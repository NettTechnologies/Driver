
NewController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c22c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800c3b4  0800c3b4  0000d3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d4  0800c3d4  0000e4c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d4  0800c3d4  0000d3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3dc  0800c3dc  0000e4c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3dc  0800c3dc  0000d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c0  20000000  0800c3e4  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  200004c0  0800c8a4  0000e4c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  0800c8a4  0000ed60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e4c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018de4  00000000  00000000  0000e4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000461f  00000000  00000000  000272cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010bd  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ce8  00000000  00000000  0002df8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002047c  00000000  00000000  00050c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c59ef  00000000  00000000  000710f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136ae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  00136b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004c0 	.word	0x200004c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c39c 	.word	0x0800c39c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004c4 	.word	0x200004c4
 80001c4:	0800c39c 	.word	0x0800c39c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_frsub>:
 8000b80:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b84:	e002      	b.n	8000b8c <__addsf3>
 8000b86:	bf00      	nop

08000b88 <__aeabi_fsub>:
 8000b88:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b8c <__addsf3>:
 8000b8c:	0042      	lsls	r2, r0, #1
 8000b8e:	bf1f      	itttt	ne
 8000b90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b94:	ea92 0f03 	teqne	r2, r3
 8000b98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba0:	d06a      	beq.n	8000c78 <__addsf3+0xec>
 8000ba2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000baa:	bfc1      	itttt	gt
 8000bac:	18d2      	addgt	r2, r2, r3
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	4048      	eorgt	r0, r1
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	bfb8      	it	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	2b19      	cmp	r3, #25
 8000bba:	bf88      	it	hi
 8000bbc:	4770      	bxhi	lr
 8000bbe:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4249      	negne	r1, r1
 8000bde:	ea92 0f03 	teq	r2, r3
 8000be2:	d03f      	beq.n	8000c64 <__addsf3+0xd8>
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bec:	eb10 000c 	adds.w	r0, r0, ip
 8000bf0:	f1c3 0320 	rsb	r3, r3, #32
 8000bf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfc:	d502      	bpl.n	8000c04 <__addsf3+0x78>
 8000bfe:	4249      	negs	r1, r1
 8000c00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c04:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c08:	d313      	bcc.n	8000c32 <__addsf3+0xa6>
 8000c0a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0e:	d306      	bcc.n	8000c1e <__addsf3+0x92>
 8000c10:	0840      	lsrs	r0, r0, #1
 8000c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c16:	f102 0201 	add.w	r2, r2, #1
 8000c1a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c1c:	d251      	bcs.n	8000cc2 <__addsf3+0x136>
 8000c1e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	ea40 0003 	orr.w	r0, r0, r3
 8000c30:	4770      	bx	lr
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	eb40 0000 	adc.w	r0, r0, r0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c40:	d2ed      	bcs.n	8000c1e <__addsf3+0x92>
 8000c42:	fab0 fc80 	clz	ip, r0
 8000c46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c52:	bfaa      	itet	ge
 8000c54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c58:	4252      	neglt	r2, r2
 8000c5a:	4318      	orrge	r0, r3
 8000c5c:	bfbc      	itt	lt
 8000c5e:	40d0      	lsrlt	r0, r2
 8000c60:	4318      	orrlt	r0, r3
 8000c62:	4770      	bx	lr
 8000c64:	f092 0f00 	teq	r2, #0
 8000c68:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c6c:	bf06      	itte	eq
 8000c6e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c72:	3201      	addeq	r2, #1
 8000c74:	3b01      	subne	r3, #1
 8000c76:	e7b5      	b.n	8000be4 <__addsf3+0x58>
 8000c78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c80:	bf18      	it	ne
 8000c82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c86:	d021      	beq.n	8000ccc <__addsf3+0x140>
 8000c88:	ea92 0f03 	teq	r2, r3
 8000c8c:	d004      	beq.n	8000c98 <__addsf3+0x10c>
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	bf08      	it	eq
 8000c94:	4608      	moveq	r0, r1
 8000c96:	4770      	bx	lr
 8000c98:	ea90 0f01 	teq	r0, r1
 8000c9c:	bf1c      	itt	ne
 8000c9e:	2000      	movne	r0, #0
 8000ca0:	4770      	bxne	lr
 8000ca2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca6:	d104      	bne.n	8000cb2 <__addsf3+0x126>
 8000ca8:	0040      	lsls	r0, r0, #1
 8000caa:	bf28      	it	cs
 8000cac:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cb0:	4770      	bx	lr
 8000cb2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb6:	bf3c      	itt	cc
 8000cb8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cbc:	4770      	bxcc	lr
 8000cbe:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cca:	4770      	bx	lr
 8000ccc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd0:	bf16      	itet	ne
 8000cd2:	4608      	movne	r0, r1
 8000cd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd8:	4601      	movne	r1, r0
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	bf06      	itte	eq
 8000cde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce2:	ea90 0f01 	teqeq	r0, r1
 8000ce6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cea:	4770      	bx	lr

08000cec <__aeabi_ui2f>:
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e004      	b.n	8000cfc <__aeabi_i2f+0x8>
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_i2f>:
 8000cf4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf8:	bf48      	it	mi
 8000cfa:	4240      	negmi	r0, r0
 8000cfc:	ea5f 0c00 	movs.w	ip, r0
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d08:	4601      	mov	r1, r0
 8000d0a:	f04f 0000 	mov.w	r0, #0
 8000d0e:	e01c      	b.n	8000d4a <__aeabi_l2f+0x2a>

08000d10 <__aeabi_ul2f>:
 8000d10:	ea50 0201 	orrs.w	r2, r0, r1
 8000d14:	bf08      	it	eq
 8000d16:	4770      	bxeq	lr
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e00a      	b.n	8000d34 <__aeabi_l2f+0x14>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_l2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d2c:	d502      	bpl.n	8000d34 <__aeabi_l2f+0x14>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	ea5f 0c01 	movs.w	ip, r1
 8000d38:	bf02      	ittt	eq
 8000d3a:	4684      	moveq	ip, r0
 8000d3c:	4601      	moveq	r1, r0
 8000d3e:	2000      	moveq	r0, #0
 8000d40:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d44:	bf08      	it	eq
 8000d46:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4e:	fabc f28c 	clz	r2, ip
 8000d52:	3a08      	subs	r2, #8
 8000d54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d58:	db10      	blt.n	8000d7c <__aeabi_l2f+0x5c>
 8000d5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5e:	4463      	add	r3, ip
 8000d60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	f020 0001 	biceq.w	r0, r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	f102 0220 	add.w	r2, r2, #32
 8000d80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_fmul>:
 8000d9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000da0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da4:	bf1e      	ittt	ne
 8000da6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000daa:	ea92 0f0c 	teqne	r2, ip
 8000dae:	ea93 0f0c 	teqne	r3, ip
 8000db2:	d06f      	beq.n	8000e94 <__aeabi_fmul+0xf8>
 8000db4:	441a      	add	r2, r3
 8000db6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dba:	0240      	lsls	r0, r0, #9
 8000dbc:	bf18      	it	ne
 8000dbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dc2:	d01e      	beq.n	8000e02 <__aeabi_fmul+0x66>
 8000dc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ddc:	bf3e      	ittt	cc
 8000dde:	0049      	lslcc	r1, r1, #1
 8000de0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de4:	005b      	lslcc	r3, r3, #1
 8000de6:	ea40 0001 	orr.w	r0, r0, r1
 8000dea:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dee:	2afd      	cmp	r2, #253	@ 0xfd
 8000df0:	d81d      	bhi.n	8000e2e <__aeabi_fmul+0x92>
 8000df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dfa:	bf08      	it	eq
 8000dfc:	f020 0001 	biceq.w	r0, r0, #1
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e0a:	bf08      	it	eq
 8000e0c:	0249      	lsleq	r1, r1, #9
 8000e0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e16:	3a7f      	subs	r2, #127	@ 0x7f
 8000e18:	bfc2      	ittt	gt
 8000e1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e22:	4770      	bxgt	lr
 8000e24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	3a01      	subs	r2, #1
 8000e2e:	dc5d      	bgt.n	8000eec <__aeabi_fmul+0x150>
 8000e30:	f112 0f19 	cmn.w	r2, #25
 8000e34:	bfdc      	itt	le
 8000e36:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e3a:	4770      	bxle	lr
 8000e3c:	f1c2 0200 	rsb	r2, r2, #0
 8000e40:	0041      	lsls	r1, r0, #1
 8000e42:	fa21 f102 	lsr.w	r1, r1, r2
 8000e46:	f1c2 0220 	rsb	r2, r2, #32
 8000e4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e52:	f140 0000 	adc.w	r0, r0, #0
 8000e56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e5a:	bf08      	it	eq
 8000e5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e60:	4770      	bx	lr
 8000e62:	f092 0f00 	teq	r2, #0
 8000e66:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0040      	lsleq	r0, r0, #1
 8000e6e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e72:	3a01      	subeq	r2, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xce>
 8000e76:	ea40 000c 	orr.w	r0, r0, ip
 8000e7a:	f093 0f00 	teq	r3, #0
 8000e7e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0049      	lsleq	r1, r1, #1
 8000e86:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e8a:	3b01      	subeq	r3, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xe6>
 8000e8e:	ea41 010c 	orr.w	r1, r1, ip
 8000e92:	e78f      	b.n	8000db4 <__aeabi_fmul+0x18>
 8000e94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	bf18      	it	ne
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d00a      	beq.n	8000eba <__aeabi_fmul+0x11e>
 8000ea4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea8:	bf18      	it	ne
 8000eaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eae:	d1d8      	bne.n	8000e62 <__aeabi_fmul+0xc6>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	bf17      	itett	ne
 8000ec0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec4:	4608      	moveq	r0, r1
 8000ec6:	f091 0f00 	teqne	r1, #0
 8000eca:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ece:	d014      	beq.n	8000efa <__aeabi_fmul+0x15e>
 8000ed0:	ea92 0f0c 	teq	r2, ip
 8000ed4:	d101      	bne.n	8000eda <__aeabi_fmul+0x13e>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	d10f      	bne.n	8000efa <__aeabi_fmul+0x15e>
 8000eda:	ea93 0f0c 	teq	r3, ip
 8000ede:	d103      	bne.n	8000ee8 <__aeabi_fmul+0x14c>
 8000ee0:	024b      	lsls	r3, r1, #9
 8000ee2:	bf18      	it	ne
 8000ee4:	4608      	movne	r0, r1
 8000ee6:	d108      	bne.n	8000efa <__aeabi_fmul+0x15e>
 8000ee8:	ea80 0001 	eor.w	r0, r0, r1
 8000eec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ef0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef8:	4770      	bx	lr
 8000efa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_fdiv>:
 8000f04:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f0c:	bf1e      	ittt	ne
 8000f0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f12:	ea92 0f0c 	teqne	r2, ip
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d069      	beq.n	8000ff0 <__aeabi_fdiv+0xec>
 8000f1c:	eba2 0203 	sub.w	r2, r2, r3
 8000f20:	ea80 0c01 	eor.w	ip, r0, r1
 8000f24:	0249      	lsls	r1, r1, #9
 8000f26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f2a:	d037      	beq.n	8000f9c <__aeabi_fdiv+0x98>
 8000f2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f38:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	bf38      	it	cc
 8000f40:	005b      	lslcc	r3, r3, #1
 8000f42:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f46:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	bf24      	itt	cs
 8000f4e:	1a5b      	subcs	r3, r3, r1
 8000f50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f66:	bf24      	itt	cs
 8000f68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	bf18      	it	ne
 8000f82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f86:	d1e0      	bne.n	8000f4a <__aeabi_fdiv+0x46>
 8000f88:	2afd      	cmp	r2, #253	@ 0xfd
 8000f8a:	f63f af50 	bhi.w	8000e2e <__aeabi_fmul+0x92>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f94:	bf08      	it	eq
 8000f96:	f020 0001 	biceq.w	r0, r0, #1
 8000f9a:	4770      	bx	lr
 8000f9c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fa0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa4:	327f      	adds	r2, #127	@ 0x7f
 8000fa6:	bfc2      	ittt	gt
 8000fa8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb0:	4770      	bxgt	lr
 8000fb2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	3a01      	subs	r2, #1
 8000fbc:	e737      	b.n	8000e2e <__aeabi_fmul+0x92>
 8000fbe:	f092 0f00 	teq	r2, #0
 8000fc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0040      	lsleq	r0, r0, #1
 8000fca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fce:	3a01      	subeq	r2, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xc2>
 8000fd2:	ea40 000c 	orr.w	r0, r0, ip
 8000fd6:	f093 0f00 	teq	r3, #0
 8000fda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0049      	lsleq	r1, r1, #1
 8000fe2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe6:	3b01      	subeq	r3, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xda>
 8000fea:	ea41 010c 	orr.w	r1, r1, ip
 8000fee:	e795      	b.n	8000f1c <__aeabi_fdiv+0x18>
 8000ff0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff4:	ea92 0f0c 	teq	r2, ip
 8000ff8:	d108      	bne.n	800100c <__aeabi_fdiv+0x108>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	f47f af7d 	bne.w	8000efa <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	f47f af70 	bne.w	8000ee8 <__aeabi_fmul+0x14c>
 8001008:	4608      	mov	r0, r1
 800100a:	e776      	b.n	8000efa <__aeabi_fmul+0x15e>
 800100c:	ea93 0f0c 	teq	r3, ip
 8001010:	d104      	bne.n	800101c <__aeabi_fdiv+0x118>
 8001012:	024b      	lsls	r3, r1, #9
 8001014:	f43f af4c 	beq.w	8000eb0 <__aeabi_fmul+0x114>
 8001018:	4608      	mov	r0, r1
 800101a:	e76e      	b.n	8000efa <__aeabi_fmul+0x15e>
 800101c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001020:	bf18      	it	ne
 8001022:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001026:	d1ca      	bne.n	8000fbe <__aeabi_fdiv+0xba>
 8001028:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800102c:	f47f af5c 	bne.w	8000ee8 <__aeabi_fmul+0x14c>
 8001030:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001034:	f47f af3c 	bne.w	8000eb0 <__aeabi_fmul+0x114>
 8001038:	e75f      	b.n	8000efa <__aeabi_fmul+0x15e>
 800103a:	bf00      	nop

0800103c <__gesf2>:
 800103c:	f04f 3cff 	mov.w	ip, #4294967295
 8001040:	e006      	b.n	8001050 <__cmpsf2+0x4>
 8001042:	bf00      	nop

08001044 <__lesf2>:
 8001044:	f04f 0c01 	mov.w	ip, #1
 8001048:	e002      	b.n	8001050 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__cmpsf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	bf18      	it	ne
 8001062:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001066:	d011      	beq.n	800108c <__cmpsf2+0x40>
 8001068:	b001      	add	sp, #4
 800106a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106e:	bf18      	it	ne
 8001070:	ea90 0f01 	teqne	r0, r1
 8001074:	bf58      	it	pl
 8001076:	ebb2 0003 	subspl.w	r0, r2, r3
 800107a:	bf88      	it	hi
 800107c:	17c8      	asrhi	r0, r1, #31
 800107e:	bf38      	it	cc
 8001080:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001084:	bf18      	it	ne
 8001086:	f040 0001 	orrne.w	r0, r0, #1
 800108a:	4770      	bx	lr
 800108c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001090:	d102      	bne.n	8001098 <__cmpsf2+0x4c>
 8001092:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001096:	d105      	bne.n	80010a4 <__cmpsf2+0x58>
 8001098:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800109c:	d1e4      	bne.n	8001068 <__cmpsf2+0x1c>
 800109e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010a2:	d0e1      	beq.n	8001068 <__cmpsf2+0x1c>
 80010a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_cfrcmple>:
 80010ac:	4684      	mov	ip, r0
 80010ae:	4608      	mov	r0, r1
 80010b0:	4661      	mov	r1, ip
 80010b2:	e7ff      	b.n	80010b4 <__aeabi_cfcmpeq>

080010b4 <__aeabi_cfcmpeq>:
 80010b4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b6:	f7ff ffc9 	bl	800104c <__cmpsf2>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	bf48      	it	mi
 80010be:	f110 0f00 	cmnmi.w	r0, #0
 80010c2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c4 <__aeabi_fcmpeq>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff fff4 	bl	80010b4 <__aeabi_cfcmpeq>
 80010cc:	bf0c      	ite	eq
 80010ce:	2001      	moveq	r0, #1
 80010d0:	2000      	movne	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmplt>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffea 	bl	80010b4 <__aeabi_cfcmpeq>
 80010e0:	bf34      	ite	cc
 80010e2:	2001      	movcc	r0, #1
 80010e4:	2000      	movcs	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmple>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffe0 	bl	80010b4 <__aeabi_cfcmpeq>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpge>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffd2 	bl	80010ac <__aeabi_cfrcmple>
 8001108:	bf94      	ite	ls
 800110a:	2001      	movls	r0, #1
 800110c:	2000      	movhi	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmpgt>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffc8 	bl	80010ac <__aeabi_cfrcmple>
 800111c:	bf34      	ite	cc
 800111e:	2001      	movcc	r0, #1
 8001120:	2000      	movcs	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_f2uiz>:
 8001128:	0042      	lsls	r2, r0, #1
 800112a:	d20e      	bcs.n	800114a <__aeabi_f2uiz+0x22>
 800112c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001130:	d30b      	bcc.n	800114a <__aeabi_f2uiz+0x22>
 8001132:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001136:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113a:	d409      	bmi.n	8001150 <__aeabi_f2uiz+0x28>
 800113c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2uiz+0x32>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d102      	bne.n	8001160 <__aeabi_f2uiz+0x38>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	4770      	bx	lr
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <__aeabi_uldivmod>:
 8001168:	b953      	cbnz	r3, 8001180 <__aeabi_uldivmod+0x18>
 800116a:	b94a      	cbnz	r2, 8001180 <__aeabi_uldivmod+0x18>
 800116c:	2900      	cmp	r1, #0
 800116e:	bf08      	it	eq
 8001170:	2800      	cmpeq	r0, #0
 8001172:	bf1c      	itt	ne
 8001174:	f04f 31ff 	movne.w	r1, #4294967295
 8001178:	f04f 30ff 	movne.w	r0, #4294967295
 800117c:	f000 b968 	b.w	8001450 <__aeabi_idiv0>
 8001180:	f1ad 0c08 	sub.w	ip, sp, #8
 8001184:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001188:	f000 f806 	bl	8001198 <__udivmoddi4>
 800118c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001194:	b004      	add	sp, #16
 8001196:	4770      	bx	lr

08001198 <__udivmoddi4>:
 8001198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800119c:	9d08      	ldr	r5, [sp, #32]
 800119e:	460c      	mov	r4, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14e      	bne.n	8001242 <__udivmoddi4+0xaa>
 80011a4:	4694      	mov	ip, r2
 80011a6:	458c      	cmp	ip, r1
 80011a8:	4686      	mov	lr, r0
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	d962      	bls.n	8001276 <__udivmoddi4+0xde>
 80011b0:	b14a      	cbz	r2, 80011c6 <__udivmoddi4+0x2e>
 80011b2:	f1c2 0320 	rsb	r3, r2, #32
 80011b6:	4091      	lsls	r1, r2
 80011b8:	fa20 f303 	lsr.w	r3, r0, r3
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	4319      	orrs	r1, r3
 80011c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80011c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80011ce:	fb07 1114 	mls	r1, r7, r4, r1
 80011d2:	fa1f f68c 	uxth.w	r6, ip
 80011d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011de:	fb04 f106 	mul.w	r1, r4, r6
 80011e2:	4299      	cmp	r1, r3
 80011e4:	d90a      	bls.n	80011fc <__udivmoddi4+0x64>
 80011e6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80011ee:	f080 8110 	bcs.w	8001412 <__udivmoddi4+0x27a>
 80011f2:	4299      	cmp	r1, r3
 80011f4:	f240 810d 	bls.w	8001412 <__udivmoddi4+0x27a>
 80011f8:	3c02      	subs	r4, #2
 80011fa:	4463      	add	r3, ip
 80011fc:	1a59      	subs	r1, r3, r1
 80011fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8001202:	fb07 1110 	mls	r1, r7, r0, r1
 8001206:	fb00 f606 	mul.w	r6, r0, r6
 800120a:	fa1f f38e 	uxth.w	r3, lr
 800120e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001212:	429e      	cmp	r6, r3
 8001214:	d90a      	bls.n	800122c <__udivmoddi4+0x94>
 8001216:	eb1c 0303 	adds.w	r3, ip, r3
 800121a:	f100 31ff 	add.w	r1, r0, #4294967295
 800121e:	f080 80fa 	bcs.w	8001416 <__udivmoddi4+0x27e>
 8001222:	429e      	cmp	r6, r3
 8001224:	f240 80f7 	bls.w	8001416 <__udivmoddi4+0x27e>
 8001228:	4463      	add	r3, ip
 800122a:	3802      	subs	r0, #2
 800122c:	2100      	movs	r1, #0
 800122e:	1b9b      	subs	r3, r3, r6
 8001230:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001234:	b11d      	cbz	r5, 800123e <__udivmoddi4+0xa6>
 8001236:	40d3      	lsrs	r3, r2
 8001238:	2200      	movs	r2, #0
 800123a:	e9c5 3200 	strd	r3, r2, [r5]
 800123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001242:	428b      	cmp	r3, r1
 8001244:	d905      	bls.n	8001252 <__udivmoddi4+0xba>
 8001246:	b10d      	cbz	r5, 800124c <__udivmoddi4+0xb4>
 8001248:	e9c5 0100 	strd	r0, r1, [r5]
 800124c:	2100      	movs	r1, #0
 800124e:	4608      	mov	r0, r1
 8001250:	e7f5      	b.n	800123e <__udivmoddi4+0xa6>
 8001252:	fab3 f183 	clz	r1, r3
 8001256:	2900      	cmp	r1, #0
 8001258:	d146      	bne.n	80012e8 <__udivmoddi4+0x150>
 800125a:	42a3      	cmp	r3, r4
 800125c:	d302      	bcc.n	8001264 <__udivmoddi4+0xcc>
 800125e:	4290      	cmp	r0, r2
 8001260:	f0c0 80ee 	bcc.w	8001440 <__udivmoddi4+0x2a8>
 8001264:	1a86      	subs	r6, r0, r2
 8001266:	eb64 0303 	sbc.w	r3, r4, r3
 800126a:	2001      	movs	r0, #1
 800126c:	2d00      	cmp	r5, #0
 800126e:	d0e6      	beq.n	800123e <__udivmoddi4+0xa6>
 8001270:	e9c5 6300 	strd	r6, r3, [r5]
 8001274:	e7e3      	b.n	800123e <__udivmoddi4+0xa6>
 8001276:	2a00      	cmp	r2, #0
 8001278:	f040 808f 	bne.w	800139a <__udivmoddi4+0x202>
 800127c:	eba1 040c 	sub.w	r4, r1, ip
 8001280:	2101      	movs	r1, #1
 8001282:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001286:	fa1f f78c 	uxth.w	r7, ip
 800128a:	fbb4 f6f8 	udiv	r6, r4, r8
 800128e:	fb08 4416 	mls	r4, r8, r6, r4
 8001292:	fb07 f006 	mul.w	r0, r7, r6
 8001296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800129a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800129e:	4298      	cmp	r0, r3
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x11c>
 80012a2:	eb1c 0303 	adds.w	r3, ip, r3
 80012a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x11a>
 80012ac:	4298      	cmp	r0, r3
 80012ae:	f200 80cb 	bhi.w	8001448 <__udivmoddi4+0x2b0>
 80012b2:	4626      	mov	r6, r4
 80012b4:	1a1c      	subs	r4, r3, r0
 80012b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ba:	fb08 4410 	mls	r4, r8, r0, r4
 80012be:	fb00 f707 	mul.w	r7, r0, r7
 80012c2:	fa1f f38e 	uxth.w	r3, lr
 80012c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ca:	429f      	cmp	r7, r3
 80012cc:	d908      	bls.n	80012e0 <__udivmoddi4+0x148>
 80012ce:	eb1c 0303 	adds.w	r3, ip, r3
 80012d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80012d6:	d202      	bcs.n	80012de <__udivmoddi4+0x146>
 80012d8:	429f      	cmp	r7, r3
 80012da:	f200 80ae 	bhi.w	800143a <__udivmoddi4+0x2a2>
 80012de:	4620      	mov	r0, r4
 80012e0:	1bdb      	subs	r3, r3, r7
 80012e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012e6:	e7a5      	b.n	8001234 <__udivmoddi4+0x9c>
 80012e8:	f1c1 0720 	rsb	r7, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80012f6:	fa24 f607 	lsr.w	r6, r4, r7
 80012fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012fe:	fbb6 f8f9 	udiv	r8, r6, r9
 8001302:	fa1f fe8c 	uxth.w	lr, ip
 8001306:	fb09 6618 	mls	r6, r9, r8, r6
 800130a:	fa20 f307 	lsr.w	r3, r0, r7
 800130e:	408c      	lsls	r4, r1
 8001310:	fa00 fa01 	lsl.w	sl, r0, r1
 8001314:	fb08 f00e 	mul.w	r0, r8, lr
 8001318:	431c      	orrs	r4, r3
 800131a:	0c23      	lsrs	r3, r4, #16
 800131c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001320:	4298      	cmp	r0, r3
 8001322:	fa02 f201 	lsl.w	r2, r2, r1
 8001326:	d90a      	bls.n	800133e <__udivmoddi4+0x1a6>
 8001328:	eb1c 0303 	adds.w	r3, ip, r3
 800132c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001330:	f080 8081 	bcs.w	8001436 <__udivmoddi4+0x29e>
 8001334:	4298      	cmp	r0, r3
 8001336:	d97e      	bls.n	8001436 <__udivmoddi4+0x29e>
 8001338:	f1a8 0802 	sub.w	r8, r8, #2
 800133c:	4463      	add	r3, ip
 800133e:	1a1e      	subs	r6, r3, r0
 8001340:	fbb6 f3f9 	udiv	r3, r6, r9
 8001344:	fb09 6613 	mls	r6, r9, r3, r6
 8001348:	fb03 fe0e 	mul.w	lr, r3, lr
 800134c:	b2a4      	uxth	r4, r4
 800134e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001352:	45a6      	cmp	lr, r4
 8001354:	d908      	bls.n	8001368 <__udivmoddi4+0x1d0>
 8001356:	eb1c 0404 	adds.w	r4, ip, r4
 800135a:	f103 30ff 	add.w	r0, r3, #4294967295
 800135e:	d266      	bcs.n	800142e <__udivmoddi4+0x296>
 8001360:	45a6      	cmp	lr, r4
 8001362:	d964      	bls.n	800142e <__udivmoddi4+0x296>
 8001364:	3b02      	subs	r3, #2
 8001366:	4464      	add	r4, ip
 8001368:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800136c:	fba0 8302 	umull	r8, r3, r0, r2
 8001370:	eba4 040e 	sub.w	r4, r4, lr
 8001374:	429c      	cmp	r4, r3
 8001376:	46c6      	mov	lr, r8
 8001378:	461e      	mov	r6, r3
 800137a:	d350      	bcc.n	800141e <__udivmoddi4+0x286>
 800137c:	d04d      	beq.n	800141a <__udivmoddi4+0x282>
 800137e:	b155      	cbz	r5, 8001396 <__udivmoddi4+0x1fe>
 8001380:	ebba 030e 	subs.w	r3, sl, lr
 8001384:	eb64 0406 	sbc.w	r4, r4, r6
 8001388:	fa04 f707 	lsl.w	r7, r4, r7
 800138c:	40cb      	lsrs	r3, r1
 800138e:	431f      	orrs	r7, r3
 8001390:	40cc      	lsrs	r4, r1
 8001392:	e9c5 7400 	strd	r7, r4, [r5]
 8001396:	2100      	movs	r1, #0
 8001398:	e751      	b.n	800123e <__udivmoddi4+0xa6>
 800139a:	fa0c fc02 	lsl.w	ip, ip, r2
 800139e:	f1c2 0320 	rsb	r3, r2, #32
 80013a2:	40d9      	lsrs	r1, r3
 80013a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013a8:	fa20 f303 	lsr.w	r3, r0, r3
 80013ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80013b0:	fbb1 f0f8 	udiv	r0, r1, r8
 80013b4:	fb08 1110 	mls	r1, r8, r0, r1
 80013b8:	4094      	lsls	r4, r2
 80013ba:	431c      	orrs	r4, r3
 80013bc:	fa1f f78c 	uxth.w	r7, ip
 80013c0:	0c23      	lsrs	r3, r4, #16
 80013c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013c6:	fb00 f107 	mul.w	r1, r0, r7
 80013ca:	4299      	cmp	r1, r3
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x248>
 80013ce:	eb1c 0303 	adds.w	r3, ip, r3
 80013d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80013d6:	d22c      	bcs.n	8001432 <__udivmoddi4+0x29a>
 80013d8:	4299      	cmp	r1, r3
 80013da:	d92a      	bls.n	8001432 <__udivmoddi4+0x29a>
 80013dc:	3802      	subs	r0, #2
 80013de:	4463      	add	r3, ip
 80013e0:	1a5b      	subs	r3, r3, r1
 80013e2:	fbb3 f1f8 	udiv	r1, r3, r8
 80013e6:	fb08 3311 	mls	r3, r8, r1, r3
 80013ea:	b2a4      	uxth	r4, r4
 80013ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013f0:	fb01 f307 	mul.w	r3, r1, r7
 80013f4:	42a3      	cmp	r3, r4
 80013f6:	d908      	bls.n	800140a <__udivmoddi4+0x272>
 80013f8:	eb1c 0404 	adds.w	r4, ip, r4
 80013fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001400:	d213      	bcs.n	800142a <__udivmoddi4+0x292>
 8001402:	42a3      	cmp	r3, r4
 8001404:	d911      	bls.n	800142a <__udivmoddi4+0x292>
 8001406:	3902      	subs	r1, #2
 8001408:	4464      	add	r4, ip
 800140a:	1ae4      	subs	r4, r4, r3
 800140c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001410:	e73b      	b.n	800128a <__udivmoddi4+0xf2>
 8001412:	4604      	mov	r4, r0
 8001414:	e6f2      	b.n	80011fc <__udivmoddi4+0x64>
 8001416:	4608      	mov	r0, r1
 8001418:	e708      	b.n	800122c <__udivmoddi4+0x94>
 800141a:	45c2      	cmp	sl, r8
 800141c:	d2af      	bcs.n	800137e <__udivmoddi4+0x1e6>
 800141e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001422:	eb63 060c 	sbc.w	r6, r3, ip
 8001426:	3801      	subs	r0, #1
 8001428:	e7a9      	b.n	800137e <__udivmoddi4+0x1e6>
 800142a:	4631      	mov	r1, r6
 800142c:	e7ed      	b.n	800140a <__udivmoddi4+0x272>
 800142e:	4603      	mov	r3, r0
 8001430:	e79a      	b.n	8001368 <__udivmoddi4+0x1d0>
 8001432:	4630      	mov	r0, r6
 8001434:	e7d4      	b.n	80013e0 <__udivmoddi4+0x248>
 8001436:	46b0      	mov	r8, r6
 8001438:	e781      	b.n	800133e <__udivmoddi4+0x1a6>
 800143a:	4463      	add	r3, ip
 800143c:	3802      	subs	r0, #2
 800143e:	e74f      	b.n	80012e0 <__udivmoddi4+0x148>
 8001440:	4606      	mov	r6, r0
 8001442:	4623      	mov	r3, r4
 8001444:	4608      	mov	r0, r1
 8001446:	e711      	b.n	800126c <__udivmoddi4+0xd4>
 8001448:	3e02      	subs	r6, #2
 800144a:	4463      	add	r3, ip
 800144c:	e732      	b.n	80012b4 <__udivmoddi4+0x11c>
 800144e:	bf00      	nop

08001450 <__aeabi_idiv0>:
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <can_transmit_1>:

uint8_t fm1_data [26];
uint8_t flag_interrupt_005;


void can_transmit_1(uint8_t priority, uint16_t pgn, uint8_t sender_address, uint8_t data_bytes[8]){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	460b      	mov	r3, r1
 8001462:	80bb      	strh	r3, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	71bb      	strb	r3, [r7, #6]
	transmitt_message.id.splitted.priority = priority;
 8001468:	4a0c      	ldr	r2, [pc, #48]	@ (800149c <can_transmit_1+0x48>)
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	7013      	strb	r3, [r2, #0]
	transmitt_message.id.splitted.pgn = pgn;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <can_transmit_1+0x48>)
 8001470:	88ba      	ldrh	r2, [r7, #4]
 8001472:	f8a3 2001 	strh.w	r2, [r3, #1]
	transmitt_message.id.splitted.sourse_address = sender_address;
 8001476:	4a09      	ldr	r2, [pc, #36]	@ (800149c <can_transmit_1+0x48>)
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	70d3      	strb	r3, [r2, #3]
	transmitt_message.data_length = 8;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <can_transmit_1+0x48>)
 800147e:	2208      	movs	r2, #8
 8001480:	711a      	strb	r2, [r3, #4]
	memcpy (transmitt_message.can_data.data_bytes, data_bytes, 8);
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <can_transmit_1+0x48>)
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	3310      	adds	r3, #16
 8001488:	6810      	ldr	r0, [r2, #0]
 800148a:	6851      	ldr	r1, [r2, #4]
 800148c:	c303      	stmia	r3!, {r0, r1}
	SendMessage(&transmitt_message);
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <can_transmit_1+0x48>)
 8001490:	f000 fc54 	bl	8001d3c <SendMessage>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200004e0 	.word	0x200004e0

080014a0 <can_transmit_fm1>:

void can_transmit_fm1(void){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	static uint8_t errors_byte, supressed_byte;
	static uint8_t error_quantity, bytes_quantity;
	static uint8_t dtc[4], message_counter, data[8], message_pointer;

	message_counter = 1;
 80014a6:	4b9e      	ldr	r3, [pc, #632]	@ (8001720 <can_transmit_fm1+0x280>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
	message_pointer = 0;
 80014ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001724 <can_transmit_fm1+0x284>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	dtc[0] = 0;
 80014b2:	4b9d      	ldr	r3, [pc, #628]	@ (8001728 <can_transmit_fm1+0x288>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	dtc[1] = 0;
 80014b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001728 <can_transmit_fm1+0x288>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	705a      	strb	r2, [r3, #1]
	dtc[2] = 0;
 80014be:	4b9a      	ldr	r3, [pc, #616]	@ (8001728 <can_transmit_fm1+0x288>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	709a      	strb	r2, [r3, #2]
	dtc[3] = 0;
 80014c4:	4b98      	ldr	r3, [pc, #608]	@ (8001728 <can_transmit_fm1+0x288>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	70da      	strb	r2, [r3, #3]

	error_quantity = get_error_quantity(dtc);
 80014ca:	4897      	ldr	r0, [pc, #604]	@ (8001728 <can_transmit_fm1+0x288>)
 80014cc:	f008 fd5c 	bl	8009f88 <get_error_quantity>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b95      	ldr	r3, [pc, #596]	@ (800172c <can_transmit_fm1+0x28c>)
 80014d6:	701a      	strb	r2, [r3, #0]
	if (error_quantity < 2){
 80014d8:	4b94      	ldr	r3, [pc, #592]	@ (800172c <can_transmit_fm1+0x28c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d82b      	bhi.n	8001538 <can_transmit_fm1+0x98>
		if (error_quantity == 1) {
 80014e0:	4b92      	ldr	r3, [pc, #584]	@ (800172c <can_transmit_fm1+0x28c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d103      	bne.n	80014f0 <can_transmit_fm1+0x50>
			data[0] = 0x40;
 80014e8:	4b91      	ldr	r3, [pc, #580]	@ (8001730 <can_transmit_fm1+0x290>)
 80014ea:	2240      	movs	r2, #64	@ 0x40
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e002      	b.n	80014f6 <can_transmit_fm1+0x56>
		}
		else{
			data[0] = 0x00;
 80014f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001730 <can_transmit_fm1+0x290>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		data[1] = 0xFF;
 80014f6:	4b8e      	ldr	r3, [pc, #568]	@ (8001730 <can_transmit_fm1+0x290>)
 80014f8:	22ff      	movs	r2, #255	@ 0xff
 80014fa:	705a      	strb	r2, [r3, #1]
		data[2] = dtc[0];
 80014fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001728 <can_transmit_fm1+0x288>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b8b      	ldr	r3, [pc, #556]	@ (8001730 <can_transmit_fm1+0x290>)
 8001502:	709a      	strb	r2, [r3, #2]
		data[3] = dtc[1];
 8001504:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <can_transmit_fm1+0x288>)
 8001506:	785a      	ldrb	r2, [r3, #1]
 8001508:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <can_transmit_fm1+0x290>)
 800150a:	70da      	strb	r2, [r3, #3]
		data[4] = dtc[2];
 800150c:	4b86      	ldr	r3, [pc, #536]	@ (8001728 <can_transmit_fm1+0x288>)
 800150e:	789a      	ldrb	r2, [r3, #2]
 8001510:	4b87      	ldr	r3, [pc, #540]	@ (8001730 <can_transmit_fm1+0x290>)
 8001512:	711a      	strb	r2, [r3, #4]
		data[5] = dtc[3];
 8001514:	4b84      	ldr	r3, [pc, #528]	@ (8001728 <can_transmit_fm1+0x288>)
 8001516:	78da      	ldrb	r2, [r3, #3]
 8001518:	4b85      	ldr	r3, [pc, #532]	@ (8001730 <can_transmit_fm1+0x290>)
 800151a:	715a      	strb	r2, [r3, #5]
		data[6] = 0xFF;
 800151c:	4b84      	ldr	r3, [pc, #528]	@ (8001730 <can_transmit_fm1+0x290>)
 800151e:	22ff      	movs	r2, #255	@ 0xff
 8001520:	719a      	strb	r2, [r3, #6]
		data[7] = 0xFF;
 8001522:	4b83      	ldr	r3, [pc, #524]	@ (8001730 <can_transmit_fm1+0x290>)
 8001524:	22ff      	movs	r2, #255	@ 0xff
 8001526:	71da      	strb	r2, [r3, #7]
		can_transmit_1(DEVICE_ADDRESS, 0xFECA, 0x18, data);
 8001528:	4b81      	ldr	r3, [pc, #516]	@ (8001730 <can_transmit_fm1+0x290>)
 800152a:	2218      	movs	r2, #24
 800152c:	f64f 61ca 	movw	r1, #65226	@ 0xfeca
 8001530:	203f      	movs	r0, #63	@ 0x3f
 8001532:	f7ff ff8f 	bl	8001454 <can_transmit_1>
			}
			can_transmit_1(DEVICE_ADDRESS, 0xEBFF, 0x18, data);
		}
		TxMailboxesFreeLevel_min_val = 1;
	}
}
 8001536:	e129      	b.n	800178c <can_transmit_fm1+0x2ec>
		TxMailboxesFreeLevel_min_val = 3;
 8001538:	4b7e      	ldr	r3, [pc, #504]	@ (8001734 <can_transmit_fm1+0x294>)
 800153a:	2203      	movs	r2, #3
 800153c:	701a      	strb	r2, [r3, #0]
		bytes_quantity = ((error_quantity << 2) + 2);
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <can_transmit_fm1+0x28c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	3302      	adds	r3, #2
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b7b      	ldr	r3, [pc, #492]	@ (8001738 <can_transmit_fm1+0x298>)
 800154c:	701a      	strb	r2, [r3, #0]
		data[0] = 0x20;
 800154e:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <can_transmit_fm1+0x290>)
 8001550:	2220      	movs	r2, #32
 8001552:	701a      	strb	r2, [r3, #0]
		data[1] = bytes_quantity & 0xFF;
 8001554:	4b78      	ldr	r3, [pc, #480]	@ (8001738 <can_transmit_fm1+0x298>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <can_transmit_fm1+0x290>)
 800155a:	705a      	strb	r2, [r3, #1]
		data[2] = (bytes_quantity & 0xFF00) >> 8;
 800155c:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <can_transmit_fm1+0x290>)
 800155e:	2200      	movs	r2, #0
 8001560:	709a      	strb	r2, [r3, #2]
		if ((bytes_quantity % 7) > 0) {
 8001562:	4b75      	ldr	r3, [pc, #468]	@ (8001738 <can_transmit_fm1+0x298>)
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	4b75      	ldr	r3, [pc, #468]	@ (800173c <can_transmit_fm1+0x29c>)
 8001568:	fba3 1302 	umull	r1, r3, r3, r2
 800156c:	1ad1      	subs	r1, r2, r3
 800156e:	0849      	lsrs	r1, r1, #1
 8001570:	440b      	add	r3, r1
 8001572:	0899      	lsrs	r1, r3, #2
 8001574:	460b      	mov	r3, r1
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00e      	beq.n	80015a0 <can_transmit_fm1+0x100>
			data[3] = bytes_quantity / 7 + 1;
 8001582:	4b6d      	ldr	r3, [pc, #436]	@ (8001738 <can_transmit_fm1+0x298>)
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	4b6d      	ldr	r3, [pc, #436]	@ (800173c <can_transmit_fm1+0x29c>)
 8001588:	fba3 1302 	umull	r1, r3, r3, r2
 800158c:	1ad2      	subs	r2, r2, r3
 800158e:	0852      	lsrs	r2, r2, #1
 8001590:	4413      	add	r3, r2
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <can_transmit_fm1+0x290>)
 800159c:	70da      	strb	r2, [r3, #3]
 800159e:	e00b      	b.n	80015b8 <can_transmit_fm1+0x118>
			data[3] = bytes_quantity / 7;
 80015a0:	4b65      	ldr	r3, [pc, #404]	@ (8001738 <can_transmit_fm1+0x298>)
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b65      	ldr	r3, [pc, #404]	@ (800173c <can_transmit_fm1+0x29c>)
 80015a6:	fba3 1302 	umull	r1, r3, r3, r2
 80015aa:	1ad2      	subs	r2, r2, r3
 80015ac:	0852      	lsrs	r2, r2, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001730 <can_transmit_fm1+0x290>)
 80015b6:	70da      	strb	r2, [r3, #3]
		data[4] = 0xFF;
 80015b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <can_transmit_fm1+0x290>)
 80015ba:	22ff      	movs	r2, #255	@ 0xff
 80015bc:	711a      	strb	r2, [r3, #4]
		data[5] = 0xCA;
 80015be:	4b5c      	ldr	r3, [pc, #368]	@ (8001730 <can_transmit_fm1+0x290>)
 80015c0:	22ca      	movs	r2, #202	@ 0xca
 80015c2:	715a      	strb	r2, [r3, #5]
		data[6] = 0xFE;
 80015c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001730 <can_transmit_fm1+0x290>)
 80015c6:	22fe      	movs	r2, #254	@ 0xfe
 80015c8:	719a      	strb	r2, [r3, #6]
		data[7] = 0x00;
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <can_transmit_fm1+0x290>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	71da      	strb	r2, [r3, #7]
		can_transmit_1(DEVICE_ADDRESS, 0xECFF, 0x18, data);
 80015d0:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <can_transmit_fm1+0x290>)
 80015d2:	2218      	movs	r2, #24
 80015d4:	f64e 41ff 	movw	r1, #60671	@ 0xecff
 80015d8:	203f      	movs	r0, #63	@ 0x3f
 80015da:	f7ff ff3b 	bl	8001454 <can_transmit_1>
		for (uint8_t vector_pointer = 0; vector_pointer < 8; vector_pointer++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e093      	b.n	800170c <can_transmit_fm1+0x26c>
			errors_byte = errors_vector[vector_pointer];
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4a56      	ldr	r2, [pc, #344]	@ (8001740 <can_transmit_fm1+0x2a0>)
 80015e8:	5cd2      	ldrb	r2, [r2, r3]
 80015ea:	4b56      	ldr	r3, [pc, #344]	@ (8001744 <can_transmit_fm1+0x2a4>)
 80015ec:	701a      	strb	r2, [r3, #0]
			supressed_byte = errors_supressed[vector_pointer];
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4a55      	ldr	r2, [pc, #340]	@ (8001748 <can_transmit_fm1+0x2a8>)
 80015f2:	5cd2      	ldrb	r2, [r2, r3]
 80015f4:	4b55      	ldr	r3, [pc, #340]	@ (800174c <can_transmit_fm1+0x2ac>)
 80015f6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	71bb      	strb	r3, [r7, #6]
 80015fc:	e07f      	b.n	80016fe <can_transmit_fm1+0x25e>
				if ((errors_byte & 1U) && !(supressed_byte & 1U)) { // error present
 80015fe:	4b51      	ldr	r3, [pc, #324]	@ (8001744 <can_transmit_fm1+0x2a4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d06a      	beq.n	80016e0 <can_transmit_fm1+0x240>
 800160a:	4b50      	ldr	r3, [pc, #320]	@ (800174c <can_transmit_fm1+0x2ac>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d164      	bne.n	80016e0 <can_transmit_fm1+0x240>
					dtc[0] = error_spn_vector[(vector_pointer << 3) + i] & 0xFF;
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	00da      	lsls	r2, r3, #3
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	4413      	add	r3, r2
 800161e:	4a4c      	ldr	r2, [pc, #304]	@ (8001750 <can_transmit_fm1+0x2b0>)
 8001620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <can_transmit_fm1+0x288>)
 8001628:	701a      	strb	r2, [r3, #0]
					dtc[1] = (error_spn_vector[(vector_pointer << 3) + i] & 0xFF00) >> 8;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	00da      	lsls	r2, r3, #3
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	4413      	add	r3, r2
 8001632:	4a47      	ldr	r2, [pc, #284]	@ (8001750 <can_transmit_fm1+0x2b0>)
 8001634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	b29b      	uxth	r3, r3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <can_transmit_fm1+0x288>)
 8001640:	705a      	strb	r2, [r3, #1]
					dtc[2] = (((error_spn_vector[(vector_pointer << 3) + i] & 0x70000) >> 16) << 5) + error_fmi_vector[(vector_pointer << 3) + i];
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	00da      	lsls	r2, r3, #3
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	4413      	add	r3, r2
 800164a:	4a42      	ldr	r2, [pc, #264]	@ (8001754 <can_transmit_fm1+0x2b4>)
 800164c:	5cd2      	ldrb	r2, [r2, r3]
 800164e:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <can_transmit_fm1+0x288>)
 8001650:	709a      	strb	r2, [r3, #2]
					dtc[3] = 1;
 8001652:	4b35      	ldr	r3, [pc, #212]	@ (8001728 <can_transmit_fm1+0x288>)
 8001654:	2201      	movs	r2, #1
 8001656:	70da      	strb	r2, [r3, #3]
					for (uint8_t dtc_frame_pointer = 0; dtc_frame_pointer < 4; dtc_frame_pointer++){
 8001658:	2300      	movs	r3, #0
 800165a:	717b      	strb	r3, [r7, #5]
 800165c:	e03d      	b.n	80016da <can_transmit_fm1+0x23a>
						if (message_pointer == 0) {
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <can_transmit_fm1+0x284>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11a      	bne.n	800169c <can_transmit_fm1+0x1fc>
							data[0] = message_counter;
 8001666:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <can_transmit_fm1+0x280>)
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <can_transmit_fm1+0x290>)
 800166c:	701a      	strb	r2, [r3, #0]
							if (message_counter == 1){
 800166e:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <can_transmit_fm1+0x280>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d109      	bne.n	800168a <can_transmit_fm1+0x1ea>
								data[1] = 0x40; // MIL lamp status
 8001676:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <can_transmit_fm1+0x290>)
 8001678:	2240      	movs	r2, #64	@ 0x40
 800167a:	705a      	strb	r2, [r3, #1]
								data[2] = 0xFF;	// MIL lamp status
 800167c:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <can_transmit_fm1+0x290>)
 800167e:	22ff      	movs	r2, #255	@ 0xff
 8001680:	709a      	strb	r2, [r3, #2]
								message_pointer = 3;
 8001682:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <can_transmit_fm1+0x284>)
 8001684:	2203      	movs	r2, #3
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e002      	b.n	8001690 <can_transmit_fm1+0x1f0>
								message_pointer = 1;
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <can_transmit_fm1+0x284>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
							message_counter ++;
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <can_transmit_fm1+0x280>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <can_transmit_fm1+0x280>)
 800169a:	701a      	strb	r2, [r3, #0]
						data[message_pointer] = dtc[dtc_frame_pointer];
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <can_transmit_fm1+0x284>)
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <can_transmit_fm1+0x288>)
 80016a6:	5cd2      	ldrb	r2, [r2, r3]
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <can_transmit_fm1+0x290>)
 80016aa:	545a      	strb	r2, [r3, r1]
						message_pointer ++;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <can_transmit_fm1+0x284>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <can_transmit_fm1+0x284>)
 80016b6:	701a      	strb	r2, [r3, #0]
						if (message_pointer == 8){
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <can_transmit_fm1+0x284>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d109      	bne.n	80016d4 <can_transmit_fm1+0x234>
							can_transmit_1(DEVICE_ADDRESS, 0xEBFF, 0x18, data);
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <can_transmit_fm1+0x290>)
 80016c2:	2218      	movs	r2, #24
 80016c4:	f64e 31ff 	movw	r1, #60415	@ 0xebff
 80016c8:	203f      	movs	r0, #63	@ 0x3f
 80016ca:	f7ff fec3 	bl	8001454 <can_transmit_1>
							message_pointer = 0;
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <can_transmit_fm1+0x284>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
					for (uint8_t dtc_frame_pointer = 0; dtc_frame_pointer < 4; dtc_frame_pointer++){
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	3301      	adds	r3, #1
 80016d8:	717b      	strb	r3, [r7, #5]
 80016da:	797b      	ldrb	r3, [r7, #5]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d9be      	bls.n	800165e <can_transmit_fm1+0x1be>
				errors_byte >>= 1;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <can_transmit_fm1+0x2a4>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <can_transmit_fm1+0x2a4>)
 80016ea:	701a      	strb	r2, [r3, #0]
				supressed_byte >>= 1;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <can_transmit_fm1+0x2ac>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <can_transmit_fm1+0x2ac>)
 80016f6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	3301      	adds	r3, #1
 80016fc:	71bb      	strb	r3, [r7, #6]
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	2b07      	cmp	r3, #7
 8001702:	f67f af7c 	bls.w	80015fe <can_transmit_fm1+0x15e>
		for (uint8_t vector_pointer = 0; vector_pointer < 8; vector_pointer++) {
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3301      	adds	r3, #1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b07      	cmp	r3, #7
 8001710:	f67f af68 	bls.w	80015e4 <can_transmit_fm1+0x144>
		if (message_pointer > 0){
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <can_transmit_fm1+0x284>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d034      	beq.n	8001786 <can_transmit_fm1+0x2e6>
			while (message_pointer < 8){
 800171c:	e028      	b.n	8001770 <can_transmit_fm1+0x2d0>
 800171e:	bf00      	nop
 8001720:	20000510 	.word	0x20000510
 8001724:	20000511 	.word	0x20000511
 8001728:	20000514 	.word	0x20000514
 800172c:	20000518 	.word	0x20000518
 8001730:	2000051c 	.word	0x2000051c
 8001734:	20000618 	.word	0x20000618
 8001738:	20000524 	.word	0x20000524
 800173c:	24924925 	.word	0x24924925
 8001740:	20000a38 	.word	0x20000a38
 8001744:	20000525 	.word	0x20000525
 8001748:	20000a40 	.word	0x20000a40
 800174c:	20000526 	.word	0x20000526
 8001750:	2000017c 	.word	0x2000017c
 8001754:	200001b8 	.word	0x200001b8
				data[message_pointer] = 0xFF;
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <can_transmit_fm1+0x2f4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <can_transmit_fm1+0x2f8>)
 8001760:	21ff      	movs	r1, #255	@ 0xff
 8001762:	5499      	strb	r1, [r3, r2]
				message_pointer ++;
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <can_transmit_fm1+0x2f4>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <can_transmit_fm1+0x2f4>)
 800176e:	701a      	strb	r2, [r3, #0]
			while (message_pointer < 8){
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <can_transmit_fm1+0x2f4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d9ef      	bls.n	8001758 <can_transmit_fm1+0x2b8>
			can_transmit_1(DEVICE_ADDRESS, 0xEBFF, 0x18, data);
 8001778:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <can_transmit_fm1+0x2f8>)
 800177a:	2218      	movs	r2, #24
 800177c:	f64e 31ff 	movw	r1, #60415	@ 0xebff
 8001780:	203f      	movs	r0, #63	@ 0x3f
 8001782:	f7ff fe67 	bl	8001454 <can_transmit_1>
		TxMailboxesFreeLevel_min_val = 1;
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <can_transmit_fm1+0x2fc>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000511 	.word	0x20000511
 8001798:	2000051c 	.word	0x2000051c
 800179c:	20000618 	.word	0x20000618

080017a0 <can_receive_1>:

uint8_t can_receive_1(uint16_t pgn, uint8_t *data_array, uint8_t period){
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	80fb      	strh	r3, [r7, #6]
 80017ac:	4613      	mov	r3, r2
 80017ae:	717b      	strb	r3, [r7, #5]
	static J1939Message_HandleTypeDef * current_item;
	current_item = &receive_message_1;
 80017b0:	4b22      	ldr	r3, [pc, #136]	@ (800183c <can_receive_1+0x9c>)
 80017b2:	4a23      	ldr	r2, [pc, #140]	@ (8001840 <can_receive_1+0xa0>)
 80017b4:	601a      	str	r2, [r3, #0]

	while (current_item->next_item != NULL){
 80017b6:	e036      	b.n	8001826 <can_receive_1+0x86>
		if (current_item->id.splitted.pgn == pgn){
 80017b8:	4b20      	ldr	r3, [pc, #128]	@ (800183c <can_receive_1+0x9c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d129      	bne.n	800181c <can_receive_1+0x7c>
			if ((HAL_GetTick() - current_item->last_massage_time) > (1.5 * period)){
 80017c8:	f001 fd46 	bl	8003258 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <can_receive_1+0x9c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe38 	bl	800044c <__aeabi_ui2d>
 80017dc:	4604      	mov	r4, r0
 80017de:	460d      	mov	r5, r1
 80017e0:	797b      	ldrb	r3, [r7, #5]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe42 	bl	800046c <__aeabi_i2d>
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <can_receive_1+0xa4>)
 80017ee:	f7fe fea7 	bl	8000540 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7ff f931 	bl	8000a60 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <can_receive_1+0x68>
				return 0;
 8001804:	2300      	movs	r3, #0
 8001806:	e014      	b.n	8001832 <can_receive_1+0x92>
			}
			memcpy (data_array, current_item->can_data.data_bytes, 8);
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <can_receive_1+0x9c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3310      	adds	r3, #16
 800180e:	2208      	movs	r2, #8
 8001810:	4619      	mov	r1, r3
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f00a fcba 	bl	800c18c <memcpy>
			return 1;
 8001818:	2301      	movs	r3, #1
 800181a:	e00a      	b.n	8001832 <can_receive_1+0x92>
		}
		current_item = current_item->next_item;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <can_receive_1+0x9c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4a06      	ldr	r2, [pc, #24]	@ (800183c <can_receive_1+0x9c>)
 8001824:	6013      	str	r3, [r2, #0]
	while (current_item->next_item != NULL){
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <can_receive_1+0x9c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1c3      	bne.n	80017b8 <can_receive_1+0x18>
	}
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000528 	.word	0x20000528
 8001840:	200000c0 	.word	0x200000c0
 8001844:	3ff80000 	.word	0x3ff80000

08001848 <Analise_RxMessage>:

void Analise_RxMessage(CAN_RxHeaderTypeDef *header, uint8_t message[8]){
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	static J1939Message_HandleTypeDef * current_item;
	current_item = &receive_message_1;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <Analise_RxMessage+0x70>)
 8001854:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <Analise_RxMessage+0x74>)
 8001856:	601a      	str	r2, [r3, #0]

	while (current_item->next_item != NULL){
 8001858:	e024      	b.n	80018a4 <Analise_RxMessage+0x5c>
		if (current_item->id.solid == 0)
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <Analise_RxMessage+0x70>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <Analise_RxMessage+0x26>
		{
			current_item->id.solid = header->ExtId;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <Analise_RxMessage+0x70>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6852      	ldr	r2, [r2, #4]
 800186c:	601a      	str	r2, [r3, #0]
		}
		if (current_item->id.solid == header->ExtId){
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <Analise_RxMessage+0x70>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d10e      	bne.n	800189a <Analise_RxMessage+0x52>
			memcpy (current_item->can_data.data_bytes, message, 8);
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <Analise_RxMessage+0x70>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3310      	adds	r3, #16
 8001882:	2208      	movs	r2, #8
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f00a fc80 	bl	800c18c <memcpy>
			current_item->last_massage_time = HAL_GetTick();
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <Analise_RxMessage+0x70>)
 800188e:	681c      	ldr	r4, [r3, #0]
 8001890:	f001 fce2 	bl	8003258 <HAL_GetTick>
 8001894:	4603      	mov	r3, r0
 8001896:	60e3      	str	r3, [r4, #12]
			break;
 8001898:	e00a      	b.n	80018b0 <Analise_RxMessage+0x68>
		}
		current_item = current_item->next_item;
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <Analise_RxMessage+0x70>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <Analise_RxMessage+0x70>)
 80018a2:	6013      	str	r3, [r2, #0]
	while (current_item->next_item != NULL){
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <Analise_RxMessage+0x70>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1d5      	bne.n	800185a <Analise_RxMessage+0x12>
	}
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	2000052c 	.word	0x2000052c
 80018bc:	200000c0 	.word	0x200000c0

080018c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018d2:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018d4:	4a45      	ldr	r2, [pc, #276]	@ (80019ec <MX_ADC1_Init+0x12c>)
 80018d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d8:	4b43      	ldr	r3, [pc, #268]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e0:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018e6:	4b40      	ldr	r3, [pc, #256]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018ec:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f2:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001900:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <MX_ADC1_Init+0x128>)
 8001902:	4a3b      	ldr	r2, [pc, #236]	@ (80019f0 <MX_ADC1_Init+0x130>)
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001906:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <MX_ADC1_Init+0x128>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <MX_ADC1_Init+0x128>)
 800190e:	2206      	movs	r2, #6
 8001910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001912:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <MX_ADC1_Init+0x128>)
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800191a:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <MX_ADC1_Init+0x128>)
 800191c:	2201      	movs	r2, #1
 800191e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001920:	4831      	ldr	r0, [pc, #196]	@ (80019e8 <MX_ADC1_Init+0x128>)
 8001922:	f001 fca3 	bl	800326c <HAL_ADC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800192c:	f000 ff56 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001938:	2303      	movs	r3, #3
 800193a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4829      	ldr	r0, [pc, #164]	@ (80019e8 <MX_ADC1_Init+0x128>)
 8001942:	f001 fdd1 	bl	80034e8 <HAL_ADC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800194c:	f000 ff46 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001950:	2301      	movs	r3, #1
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4822      	ldr	r0, [pc, #136]	@ (80019e8 <MX_ADC1_Init+0x128>)
 800195e:	f001 fdc3 	bl	80034e8 <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001968:	f000 ff38 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800196c:	2302      	movs	r3, #2
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001970:	2303      	movs	r3, #3
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	481b      	ldr	r0, [pc, #108]	@ (80019e8 <MX_ADC1_Init+0x128>)
 800197a:	f001 fdb5 	bl	80034e8 <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001984:	f000 ff2a 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001988:	2303      	movs	r3, #3
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001990:	2306      	movs	r3, #6
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <MX_ADC1_Init+0x128>)
 800199a:	f001 fda5 	bl	80034e8 <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80019a4:	f000 ff1a 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019a8:	2306      	movs	r3, #6
 80019aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80019ac:	2305      	movs	r3, #5
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80019b6:	f001 fd97 	bl	80034e8 <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80019c0:	f000 ff0c 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019c4:	2307      	movs	r3, #7
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80019c8:	2306      	movs	r3, #6
 80019ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_ADC1_Init+0x128>)
 80019d2:	f001 fd89 	bl	80034e8 <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80019dc:	f000 fefe 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000530 	.word	0x20000530
 80019ec:	40012000 	.word	0x40012000
 80019f0:	0f000001 	.word	0x0f000001

080019f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d157      	bne.n	8001ac6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a4e:	23cf      	movs	r3, #207	@ 0xcf
 8001a50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481d      	ldr	r0, [pc, #116]	@ (8001ad8 <HAL_ADC_MspInit+0xe4>)
 8001a62:	f003 fba3 	bl	80051ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae0 <HAL_ADC_MspInit+0xec>)
 8001a6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aaa:	480c      	ldr	r0, [pc, #48]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001aac:	f002 ffd8 	bl	8004a60 <HAL_DMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ab6:	f000 fe91 	bl	80027dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001abe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ac0:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <HAL_ADC_MspInit+0xe8>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	20000578 	.word	0x20000578
 8001ae0:	40026410 	.word	0x40026410
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <ADC_GetVoltage_0_5>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
float ADC_GetVoltage_0_5(uint8_t channel){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	static uint8_t i;
	static uint32_t adc_avg_channel;
	adc_avg_channel = 0;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <ADC_GetVoltage_0_5+0x78>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
	for (i=channel; i < ADC_FILTRATION_STEPS * ADC_CHANNELS_NUM; i+=ADC_CHANNELS_NUM){
 8001af8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b64 <ADC_GetVoltage_0_5+0x7c>)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	7013      	strb	r3, [r2, #0]
 8001afe:	e011      	b.n	8001b24 <ADC_GetVoltage_0_5+0x3c>
		adc_avg_channel += adc_buf.dma_buffer_half[i]; //>>((channel&1)<<2);
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <ADC_GetVoltage_0_5+0x7c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <ADC_GetVoltage_0_5+0x80>)
 8001b08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <ADC_GetVoltage_0_5+0x78>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <ADC_GetVoltage_0_5+0x78>)
 8001b16:	6013      	str	r3, [r2, #0]
	for (i=channel; i < ADC_FILTRATION_STEPS * ADC_CHANNELS_NUM; i+=ADC_CHANNELS_NUM){
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <ADC_GetVoltage_0_5+0x7c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3306      	adds	r3, #6
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <ADC_GetVoltage_0_5+0x7c>)
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <ADC_GetVoltage_0_5+0x7c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b2a:	d9e9      	bls.n	8001b00 <ADC_GetVoltage_0_5+0x18>
	}
	return adc_avg_channel/8190.0;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <ADC_GetVoltage_0_5+0x78>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc8b 	bl	800044c <__aeabi_ui2d>
 8001b36:	a308      	add	r3, pc, #32	@ (adr r3, 8001b58 <ADC_GetVoltage_0_5+0x70>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fe2a 	bl	8000794 <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ffca 	bl	8000ae0 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40bffe00 	.word	0x40bffe00
 8001b60:	200005d8 	.word	0x200005d8
 8001b64:	200005dc 	.word	0x200005dc
 8001b68:	20000658 	.word	0x20000658

08001b6c <analog_in_1>:


float analog_in_1(void){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	//return 1.1;
	return ADC_GetVoltage_0_5(0);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff ffb9 	bl	8001ae8 <ADC_GetVoltage_0_5>
 8001b76:	4603      	mov	r3, r0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <analog_in_2>:

float analog_in_2(void){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	//return 0.521;
	return ADC_GetVoltage_0_5(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff ffb1 	bl	8001ae8 <ADC_GetVoltage_0_5>
 8001b86:	4603      	mov	r3, r0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <analog_in_3>:

float analog_in_3(void){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	//return 2.2287;
	return ADC_GetVoltage_0_5(2);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff ffa9 	bl	8001ae8 <ADC_GetVoltage_0_5>
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <rtd_in_1>:

float rtd_in_1(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	//return 3.04;
	return ADC_GetVoltage_0_5(3);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f7ff ffa1 	bl	8001ae8 <ADC_GetVoltage_0_5>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}

08001bac <rtd_in_2>:

float rtd_in_2(void){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	//return 1.53;
	return ADC_GetVoltage_0_5(5);
 8001bb0:	2005      	movs	r0, #5
 8001bb2:	f7ff ff99 	bl	8001ae8 <ADC_GetVoltage_0_5>
 8001bb6:	4603      	mov	r3, r0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bc2:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <MX_CAN1_Init+0x6c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bc8:	2208      	movs	r2, #8
 8001bca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bd8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bdc:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8001be0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001be4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001be8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_CAN1_Init+0x68>)
 8001c10:	f001 ff12 	bl	8003a38 <HAL_CAN_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001c1a:	f000 fddf 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000061c 	.word	0x2000061c
 8001c28:	40006400 	.word	0x40006400

08001c2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc0 <HAL_CAN_MspInit+0x94>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d134      	bne.n	8001cb8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <HAL_CAN_MspInit+0x98>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_CAN_MspInit+0x98>)
 8001c58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_CAN_MspInit+0x98>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_CAN_MspInit+0x98>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <HAL_CAN_MspInit+0x98>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_CAN_MspInit+0x98>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <HAL_CAN_MspInit+0x9c>)
 8001ca4:	f003 fa82 	bl	80051ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2014      	movs	r0, #20
 8001cae:	f002 fe26 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cb2:	2014      	movs	r0, #20
 8001cb4:	f002 fe3f 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40006400 	.word	0x40006400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <CAN_Config>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;
  //uint32_t EXT_ID_CAN = 0xCF004FF;

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000; //(EXT_ID_CAN >> 13) & 0xFFFF;  //
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000; //((EXT_ID_CAN <<3) & 0xFFF8) | 4;//0x0000;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000; //0xFFFF;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000; //0xFFFC;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480e      	ldr	r0, [pc, #56]	@ (8001d38 <CAN_Config+0x6c>)
 8001d00:	f001 ff96 	bl	8003c30 <HAL_CAN_ConfigFilter>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <CAN_Config+0x42>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001d0a:	f000 fd67 	bl	80027dc <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001d0e:	480a      	ldr	r0, [pc, #40]	@ (8001d38 <CAN_Config+0x6c>)
 8001d10:	f002 f86e 	bl	8003df0 <HAL_CAN_Start>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <CAN_Config+0x52>
  {
    /* Start Error */
    Error_Handler();
 8001d1a:	f000 fd5f 	bl	80027dc <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <CAN_Config+0x6c>)
 8001d22:	f002 facd 	bl	80042c0 <HAL_CAN_ActivateNotification>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <CAN_Config+0x64>
  {
    /* Notification Error */
    Error_Handler();
 8001d2c:	f000 fd56 	bl	80027dc <Error_Handler>
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	@ 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000061c 	.word	0x2000061c

08001d3c <SendMessage>:

void SendMessage(J1939Message_HandleTypeDef* j1939message){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	TxHeader.StdId = 0;
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <SendMessage+0x5c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = j1939message->id.solid;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <SendMessage+0x5c>)
 8001d50:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <SendMessage+0x5c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <SendMessage+0x5c>)
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = j1939message->data_length;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <SendMessage+0x5c>)
 8001d66:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <SendMessage+0x5c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	751a      	strb	r2, [r3, #20]

	//swap_data(j1939message);
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) < TxMailboxesFreeLevel_min_val){
 8001d6e:	bf00      	nop
 8001d70:	480a      	ldr	r0, [pc, #40]	@ (8001d9c <SendMessage+0x60>)
 8001d72:	f002 f950 	bl	8004016 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <SendMessage+0x64>)
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d3f7      	bcc.n	8001d70 <SendMessage+0x34>
	}
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, j1939message->can_data.data_bytes, &TxMailBox);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f103 0210 	add.w	r2, r3, #16
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <SendMessage+0x68>)
 8001d88:	4903      	ldr	r1, [pc, #12]	@ (8001d98 <SendMessage+0x5c>)
 8001d8a:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <SendMessage+0x60>)
 8001d8c:	f002 f874 	bl	8003e78 <HAL_CAN_AddTxMessage>

}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200005fc 	.word	0x200005fc
 8001d9c:	2000061c 	.word	0x2000061c
 8001da0:	20000618 	.word	0x20000618
 8001da4:	20000614 	.word	0x20000614

08001da8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_DAC_Init+0x60>)
 8001db8:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <MX_DAC_Init+0x64>)
 8001dba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001dbc:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <MX_DAC_Init+0x60>)
 8001dbe:	f002 fdd4 	bl	800496a <HAL_DAC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001dc8:	f000 fd08 	bl	80027dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480b      	ldr	r0, [pc, #44]	@ (8001e08 <MX_DAC_Init+0x60>)
 8001ddc:	f002 fde7 	bl	80049ae <HAL_DAC_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001de6:	f000 fcf9 	bl	80027dc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	2210      	movs	r2, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_DAC_Init+0x60>)
 8001df2:	f002 fddc 	bl	80049ae <HAL_DAC_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001dfc:	f000 fcee 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000644 	.word	0x20000644
 8001e0c:	40007400 	.word	0x40007400

08001e10 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <HAL_DAC_MspInit+0x7c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d127      	bne.n	8001e82 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <HAL_DAC_MspInit+0x80>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	4a15      	ldr	r2, [pc, #84]	@ (8001e90 <HAL_DAC_MspInit+0x80>)
 8001e3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <HAL_DAC_MspInit+0x80>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_DAC_MspInit+0x80>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <HAL_DAC_MspInit+0x80>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_DAC_MspInit+0x80>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e6a:	2330      	movs	r3, #48	@ 0x30
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <HAL_DAC_MspInit+0x84>)
 8001e7e:	f003 f995 	bl	80051ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40007400 	.word	0x40007400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000

08001e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <MX_DMA_Init+0x78>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f10 <MX_DMA_Init+0x78>)
 8001ea8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_DMA_Init+0x78>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <MX_DMA_Init+0x78>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a13      	ldr	r2, [pc, #76]	@ (8001f10 <MX_DMA_Init+0x78>)
 8001ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <MX_DMA_Init+0x78>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	200b      	movs	r0, #11
 8001edc:	f002 fd0f 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ee0:	200b      	movs	r0, #11
 8001ee2:	f002 fd28 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2011      	movs	r0, #17
 8001eec:	f002 fd07 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ef0:	2011      	movs	r0, #17
 8001ef2:	f002 fd20 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2038      	movs	r0, #56	@ 0x38
 8001efc:	f002 fcff 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f00:	2038      	movs	r0, #56	@ 0x38
 8001f02:	f002 fd18 	bl	8004936 <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a4c      	ldr	r2, [pc, #304]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b46      	ldr	r3, [pc, #280]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a45      	ldr	r2, [pc, #276]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b43      	ldr	r3, [pc, #268]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b3f      	ldr	r3, [pc, #252]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a37      	ldr	r2, [pc, #220]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <MX_GPIO_Init+0x150>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 515c 	mov.w	r1, #14080	@ 0x3700
 8001fa0:	4831      	ldr	r0, [pc, #196]	@ (8002068 <MX_GPIO_Init+0x154>)
 8001fa2:	f003 faa1 	bl	80054e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f242 0154 	movw	r1, #8276	@ 0x2054
 8001fac:	482f      	ldr	r0, [pc, #188]	@ (800206c <MX_GPIO_Init+0x158>)
 8001fae:	f003 fa9b 	bl	80054e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb8:	482d      	ldr	r0, [pc, #180]	@ (8002070 <MX_GPIO_Init+0x15c>)
 8001fba:	f003 fa95 	bl	80054e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC8 PC9 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001fbe:	f44f 535c 	mov.w	r3, #14080	@ 0x3700
 8001fc2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4824      	ldr	r0, [pc, #144]	@ (8002068 <MX_GPIO_Init+0x154>)
 8001fd8:	f003 f8e8 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	481f      	ldr	r0, [pc, #124]	@ (800206c <MX_GPIO_Init+0x158>)
 8001ff0:	f003 f8dc 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_6;
 8001ff4:	f242 0354 	movw	r3, #8276	@ 0x2054
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4817      	ldr	r0, [pc, #92]	@ (800206c <MX_GPIO_Init+0x158>)
 800200e:	f003 f8cd 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002018:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <MX_GPIO_Init+0x15c>)
 800202a:	f003 f8bf 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800202e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	480a      	ldr	r0, [pc, #40]	@ (8002070 <MX_GPIO_Init+0x15c>)
 8002048:	f003 f8b0 	bl	80051ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2028      	movs	r0, #40	@ 0x28
 8002052:	f002 fc54 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002056:	2028      	movs	r0, #40	@ 0x28
 8002058:	f002 fc6d 	bl	8004936 <HAL_NVIC_EnableIRQ>

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	@ 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	40020800 	.word	0x40020800
 800206c:	40020400 	.word	0x40020400
 8002070:	40020000 	.word	0x40020000

08002074 <PumpPort_SwitchState>:

/* USER CODE BEGIN 2 */
uint16_t PumpPort_SwitchState(){
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	if(Pump.port_state == 0){
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <PumpPort_SwitchState+0x48>)
 800207a:	7b1b      	ldrb	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10d      	bne.n	800209c <PumpPort_SwitchState+0x28>
		Pump.port_state = 1;
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <PumpPort_SwitchState+0x48>)
 8002082:	2201      	movs	r2, #1
 8002084:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(Pump.port, Pump.pin, GPIO_PIN_RESET);
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <PumpPort_SwitchState+0x48>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4a0c      	ldr	r2, [pc, #48]	@ (80020bc <PumpPort_SwitchState+0x48>)
 800208c:	88d1      	ldrh	r1, [r2, #6]
 800208e:	2200      	movs	r2, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fa29 	bl	80054e8 <HAL_GPIO_WritePin>
		return Pump.t_off;
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <PumpPort_SwitchState+0x48>)
 8002098:	8a1b      	ldrh	r3, [r3, #16]
 800209a:	e00c      	b.n	80020b6 <PumpPort_SwitchState+0x42>
	}
	else{
		Pump.port_state = 0;
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <PumpPort_SwitchState+0x48>)
 800209e:	2200      	movs	r2, #0
 80020a0:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(Pump.port, Pump.pin, GPIO_PIN_SET);
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <PumpPort_SwitchState+0x48>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <PumpPort_SwitchState+0x48>)
 80020a8:	88d1      	ldrh	r1, [r2, #6]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fa1b 	bl	80054e8 <HAL_GPIO_WritePin>
		return Pump.t_on;
 80020b2:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <PumpPort_SwitchState+0x48>)
 80020b4:	89db      	ldrh	r3, [r3, #14]
	}
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200000d8 	.word	0x200000d8

080020c0 <start_pumping>:

void start_pumping() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Pump.it_timer);
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <start_pumping+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f006 fc9f 	bl	8008a0c <HAL_TIM_Base_Start_IT>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200000d8 	.word	0x200000d8

080020d8 <stop_pumping>:

void stop_pumping() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Pump.it_timer);
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <stop_pumping+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f006 fd01 	bl	8008ae8 <HAL_TIM_Base_Stop_IT>
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200000d8 	.word	0x200000d8

080020f0 <pump_cycle>:

void pump_cycle(uint16_t pumping_cycle_ms) {  //Step_pump
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
	if (pumping_cycle_ms >= 70) {
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	2b45      	cmp	r3, #69	@ 0x45
 80020fe:	d918      	bls.n	8002132 <pump_cycle+0x42>
		if (Pump.state == 0) {
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <pump_cycle+0x54>)
 8002102:	791b      	ldrb	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <pump_cycle+0x22>
			start_pumping();
 8002108:	f7ff ffda 	bl	80020c0 <start_pumping>
			Pump.state = 1;
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <pump_cycle+0x54>)
 800210e:	2201      	movs	r2, #1
 8002110:	711a      	strb	r2, [r3, #4]
		}

		Pump.t_on = 40 * 30; // 40*30;
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <pump_cycle+0x54>)
 8002114:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002118:	81da      	strh	r2, [r3, #14]
		Pump.t_off = (pumping_cycle_ms - 40) * 30;
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	461a      	mov	r2, r3
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	b29b      	uxth	r3, r3
 8002126:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <pump_cycle+0x54>)
 800212e:	821a      	strh	r2, [r3, #16]
	}
	else{
		stop_pumping();
		Pump.state = 0;
	}
}
 8002130:	e004      	b.n	800213c <pump_cycle+0x4c>
		stop_pumping();
 8002132:	f7ff ffd1 	bl	80020d8 <stop_pumping>
		Pump.state = 0;
 8002136:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <pump_cycle+0x54>)
 8002138:	2200      	movs	r2, #0
 800213a:	711a      	strb	r2, [r3, #4]
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200000d8 	.word	0x200000d8

08002148 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <MX_I2C1_Init+0x50>)
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <MX_I2C1_Init+0x54>)
 8002150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_I2C1_Init+0x50>)
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <MX_I2C1_Init+0x58>)
 8002156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <MX_I2C1_Init+0x50>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800215e:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <MX_I2C1_Init+0x50>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_I2C1_Init+0x50>)
 8002166:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800216a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <MX_I2C1_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_I2C1_Init+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <MX_I2C1_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <MX_I2C1_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_I2C1_Init+0x50>)
 8002186:	f003 f9df 	bl	8005548 <HAL_I2C_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002190:	f000 fb24 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200006d0 	.word	0x200006d0
 800219c:	40005400 	.word	0x40005400
 80021a0:	000186a0 	.word	0x000186a0

080021a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a50      	ldr	r2, [pc, #320]	@ (8002304 <HAL_I2C_MspInit+0x160>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	f040 8099 	bne.w	80022fa <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002308 <HAL_I2C_MspInit+0x164>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002308 <HAL_I2C_MspInit+0x164>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002308 <HAL_I2C_MspInit+0x164>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ea:	2312      	movs	r3, #18
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f6:	2304      	movs	r3, #4
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4842      	ldr	r0, [pc, #264]	@ (800230c <HAL_I2C_MspInit+0x168>)
 8002202:	f002 ffd3 	bl	80051ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b3f      	ldr	r3, [pc, #252]	@ (8002308 <HAL_I2C_MspInit+0x164>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	4a3e      	ldr	r2, [pc, #248]	@ (8002308 <HAL_I2C_MspInit+0x164>)
 8002210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002214:	6413      	str	r3, [r2, #64]	@ 0x40
 8002216:	4b3c      	ldr	r3, [pc, #240]	@ (8002308 <HAL_I2C_MspInit+0x164>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002224:	4a3b      	ldr	r2, [pc, #236]	@ (8002314 <HAL_I2C_MspInit+0x170>)
 8002226:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002228:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 800222a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800222e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002230:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 800223e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002242:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002244:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800224a:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002256:	4b2e      	ldr	r3, [pc, #184]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225c:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002262:	482b      	ldr	r0, [pc, #172]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002264:	f002 fbfc 	bl	8004a60 <HAL_DMA_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800226e:	f000 fab5 	bl	80027dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a26      	ldr	r2, [pc, #152]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 8002276:	639a      	str	r2, [r3, #56]	@ 0x38
 8002278:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <HAL_I2C_MspInit+0x16c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800227e:	4b26      	ldr	r3, [pc, #152]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_I2C_MspInit+0x178>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002284:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 8002286:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800228a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002292:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002298:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 800229a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800229e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80022be:	4816      	ldr	r0, [pc, #88]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022c0:	f002 fbce 	bl	8004a60 <HAL_DMA_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80022ca:	f000 fa87 	bl	80027dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d4:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <HAL_I2C_MspInit+0x174>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	201f      	movs	r0, #31
 80022e0:	f002 fb0d 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022e4:	201f      	movs	r0, #31
 80022e6:	f002 fb26 	bl	8004936 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2020      	movs	r0, #32
 80022f0:	f002 fb05 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80022f4:	2020      	movs	r0, #32
 80022f6:	f002 fb1e 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40005400 	.word	0x40005400
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400
 8002310:	20000724 	.word	0x20000724
 8002314:	40026010 	.word	0x40026010
 8002318:	20000784 	.word	0x20000784
 800231c:	400260a0 	.word	0x400260a0

08002320 <Injector_Start>:
		0,							// State
		0,							// Current parameters
		0							// Error code
};

void Injector_Start(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af02      	add	r7, sp, #8
	buf[0] = INJECTOR_PEAK_CURRENT;
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <Injector_Start+0x78>)
 8002328:	2216      	movs	r2, #22
 800232a:	701a      	strb	r2, [r3, #0]
	buf[1] = INJECTOR_PHASE_2_DURATION;
 800232c:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <Injector_Start+0x78>)
 800232e:	2233      	movs	r2, #51	@ 0x33
 8002330:	705a      	strb	r2, [r3, #1]
	buf[2] = INJECTOR_PHASE_3_DURATION;
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <Injector_Start+0x78>)
 8002334:	2224      	movs	r2, #36	@ 0x24
 8002336:	709a      	strb	r2, [r3, #2]
	buf[3] = INJECTOR_DEMAG_MODE;
 8002338:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <Injector_Start+0x78>)
 800233a:	2201      	movs	r2, #1
 800233c:	70da      	strb	r2, [r3, #3]
	buf[4] = INJECTOR_HOLD_CURRENT;
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <Injector_Start+0x78>)
 8002340:	226e      	movs	r2, #110	@ 0x6e
 8002342:	711a      	strb	r2, [r3, #4]
	buf[5] = INJECTOR_TEMP_HOLD_CURRENT;
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <Injector_Start+0x78>)
 8002346:	222c      	movs	r2, #44	@ 0x2c
 8002348:	715a      	strb	r2, [r3, #5]
	buf[6] = INJECTOR_TEMP_HOLD_TIME;
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <Injector_Start+0x78>)
 800234c:	2214      	movs	r2, #20
 800234e:	719a      	strb	r2, [r3, #6]
	buf[7] = INJECTOR_PHASE_1_MAX_DURATION;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <Injector_Start+0x78>)
 8002352:	2233      	movs	r2, #51	@ 0x33
 8002354:	71da      	strb	r2, [r3, #7]
	HAL_I2C_Mem_Write_DMA(&hi2c1, Injector.address, PEAK_CURRENT_REG, 1, buf, 8);
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <Injector_Start+0x7c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	2308      	movs	r3, #8
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <Injector_Start+0x78>)
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2301      	movs	r3, #1
 8002366:	22a0      	movs	r2, #160	@ 0xa0
 8002368:	480d      	ldr	r0, [pc, #52]	@ (80023a0 <Injector_Start+0x80>)
 800236a:	f003 fa45 	bl	80057f8 <HAL_I2C_Mem_Write_DMA>
	HAL_TIM_PWM_Start(Injector.pwm_timer, Injector.pwm_timer_channel);
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <Injector_Start+0x7c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <Injector_Start+0x7c>)
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f006 fc93 	bl	8008ca4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(Injector.sync_output->it_timer);
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <Injector_Start+0x7c>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f006 fb41 	bl	8008a0c <HAL_TIM_Base_Start_IT>
	Injector.state = 2;
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <Injector_Start+0x7c>)
 800238c:	2202      	movs	r2, #2
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200007e4 	.word	0x200007e4
 800239c:	20000114 	.word	0x20000114
 80023a0:	200006d0 	.word	0x200006d0

080023a4 <L99SD_Init>:
	HAL_TIM_PWM_Start(ShootOff.pwm_timer, ShootOff.pwm_timer_channel);
	HAL_TIM_Base_Start_IT(ShootOff.sync_output->it_timer);
	ShootOff.state = 2;
}

void L99SD_Init(L99SD_HandleTypeDef * driver){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(driver->enable_port, driver->enable_pin, GPIO_PIN_SET);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6958      	ldr	r0, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8a1b      	ldrh	r3, [r3, #16]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4619      	mov	r1, r3
 80023b8:	f003 f896 	bl	80054e8 <HAL_GPIO_WritePin>
	driver->state = 1;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	761a      	strb	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <L99SD_Stop>:

void L99SD_Stop(L99SD_HandleTypeDef * driver){
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(driver->enable_port, driver->enable_pin, GPIO_PIN_RESET);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6958      	ldr	r0, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8a1b      	ldrh	r3, [r3, #16]
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	f003 f883 	bl	80054e8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(driver->sync_output->it_timer);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f006 fb7d 	bl	8008ae8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(driver->pwm_timer, driver->pwm_timer_channel);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f006 fd1b 	bl	8008e34 <HAL_TIM_PWM_Stop>
	driver->state = 0;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <SyncPort_SwitchState>:

uint16_t SyncPort_SwitchState(L99SD_HandleTypeDef * driver){
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
	if(driver->sync_output->state == 0){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	7c1b      	ldrb	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11e      	bne.n	800245c <SyncPort_SwitchState+0x50>
		driver->sync_output->state = 1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(driver->sync_output->sync_port, driver->sync_output->sync_pin, GPIO_PIN_RESET);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	6898      	ldr	r0, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	889b      	ldrh	r3, [r3, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	f003 f857 	bl	80054e8 <HAL_GPIO_WritePin>
		HAL_I2C_Mem_Read_DMA(&hi2c1, driver->address, FAULT_REG, 1, &driver->error_code, 1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3321      	adds	r3, #33	@ 0x21
 8002444:	2201      	movs	r2, #1
 8002446:	9201      	str	r2, [sp, #4]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2301      	movs	r3, #1
 800244c:	22fc      	movs	r2, #252	@ 0xfc
 800244e:	4814      	ldr	r0, [pc, #80]	@ (80024a0 <SyncPort_SwitchState+0x94>)
 8002450:	f003 fb30 	bl	8005ab4 <HAL_I2C_Mem_Read_DMA>
		return driver->sync_output->t_off;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	89db      	ldrh	r3, [r3, #14]
 800245a:	e01d      	b.n	8002498 <SyncPort_SwitchState+0x8c>
	}
	else{
		driver->sync_output->state = 0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(driver->sync_output->sync_port, driver->sync_output->sync_pin, GPIO_PIN_SET);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	6898      	ldr	r0, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	889b      	ldrh	r3, [r3, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	4619      	mov	r1, r3
 8002474:	f003 f838 	bl	80054e8 <HAL_GPIO_WritePin>
		HAL_I2C_Mem_Read_DMA(&hi2c1, driver->address, PEAK_CURRENT_REG, 1, driver->current_parameters, 8);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3319      	adds	r3, #25
 8002482:	2208      	movs	r2, #8
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	22a0      	movs	r2, #160	@ 0xa0
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <SyncPort_SwitchState+0x94>)
 800248e:	f003 fb11 	bl	8005ab4 <HAL_I2C_Mem_Read_DMA>
		return driver->sync_output->t_on;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	899b      	ldrh	r3, [r3, #12]
	}
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200006d0 	.word	0x200006d0

080024a4 <pwm_out_2>:
		memset (ShootOff.current_parameters, 0, 8);
	}
	return ShootOff.error_code;
}

void pwm_out_2(uint8_t duty_cycle){  //Injector
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
	if (duty_cycle>=5) {
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d953      	bls.n	800255c <pwm_out_2+0xb8>
		if (Injector.state == 0) {
 80024b4:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <pwm_out_2+0xf0>)
 80024b6:	7e1b      	ldrb	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <pwm_out_2+0x26>
			L99SD_Init(&Injector);
 80024bc:	4835      	ldr	r0, [pc, #212]	@ (8002594 <pwm_out_2+0xf0>)
 80024be:	f7ff ff71 	bl	80023a4 <L99SD_Init>
			injector_wrong_parameters_counter = 0;
 80024c2:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <pwm_out_2+0xf4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	e050      	b.n	800256c <pwm_out_2+0xc8>
		}
		else {
			if(Injector.state == 1) {
 80024ca:	4b32      	ldr	r3, [pc, #200]	@ (8002594 <pwm_out_2+0xf0>)
 80024cc:	7e1b      	ldrb	r3, [r3, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <pwm_out_2+0x32>
				Injector_Start();
 80024d2:	f7ff ff25 	bl	8002320 <Injector_Start>
			}

			if (duty_cycle > 90) {
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80024da:	d901      	bls.n	80024e0 <pwm_out_2+0x3c>
				duty_cycle = 90;
 80024dc:	235a      	movs	r3, #90	@ 0x5a
 80024de:	71fb      	strb	r3, [r7, #7]
			}
			Injector.sync_output->t_on = duty_cycle*30;
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <pwm_out_2+0xf0>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4611      	mov	r1, r2
 80024ea:	0109      	lsls	r1, r1, #4
 80024ec:	1a8a      	subs	r2, r1, r2
 80024ee:	0052      	lsls	r2, r2, #1
 80024f0:	b292      	uxth	r2, r2
 80024f2:	819a      	strh	r2, [r3, #12]
			Injector.sync_output->t_off = (100-duty_cycle)*30;
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <pwm_out_2+0xf0>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4611      	mov	r1, r2
 8002502:	0109      	lsls	r1, r1, #4
 8002504:	1a8a      	subs	r2, r1, r2
 8002506:	0052      	lsls	r2, r2, #1
 8002508:	b292      	uxth	r2, r2
 800250a:	81da      	strh	r2, [r3, #14]

			if((Injector.current_parameters[0] != INJECTOR_PEAK_CURRENT) && (Injector.current_parameters[4] != INJECTOR_HOLD_CURRENT)){
 800250c:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <pwm_out_2+0xf0>)
 800250e:	7e5b      	ldrb	r3, [r3, #25]
 8002510:	2b16      	cmp	r3, #22
 8002512:	d02b      	beq.n	800256c <pwm_out_2+0xc8>
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <pwm_out_2+0xf0>)
 8002516:	7f5b      	ldrb	r3, [r3, #29]
 8002518:	2b6e      	cmp	r3, #110	@ 0x6e
 800251a:	d027      	beq.n	800256c <pwm_out_2+0xc8>
				if (injector_wrong_parameters_counter > INJECTOR_WRONG_PARAMETERS_MAX_COUNTER){
 800251c:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <pwm_out_2+0xf4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d914      	bls.n	800254e <pwm_out_2+0xaa>
					injector_error_counter++;
 8002524:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <pwm_out_2+0xf8>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <pwm_out_2+0xf8>)
 800252e:	701a      	strb	r2, [r3, #0]
					if(injector_error_counter > INJECTOR_ECU_ERROR_MAX_COUNTER){
 8002530:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <pwm_out_2+0xf8>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d906      	bls.n	8002546 <pwm_out_2+0xa2>
						errors_vector[0] |= 40;
 8002538:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <pwm_out_2+0xfc>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <pwm_out_2+0xfc>)
 8002544:	701a      	strb	r2, [r3, #0]
					}
					L99SD_Stop(&Injector);
 8002546:	4813      	ldr	r0, [pc, #76]	@ (8002594 <pwm_out_2+0xf0>)
 8002548:	f7ff ff3f 	bl	80023ca <L99SD_Stop>
 800254c:	e00e      	b.n	800256c <pwm_out_2+0xc8>
				}
				else{
					injector_wrong_parameters_counter++;
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <pwm_out_2+0xf4>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <pwm_out_2+0xf4>)
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e007      	b.n	800256c <pwm_out_2+0xc8>
				}
			}
		}
	}
	else{
		L99SD_Stop(&Injector);
 800255c:	480d      	ldr	r0, [pc, #52]	@ (8002594 <pwm_out_2+0xf0>)
 800255e:	f7ff ff34 	bl	80023ca <L99SD_Stop>
		memset (Injector.current_parameters, 0, 8);
 8002562:	2208      	movs	r2, #8
 8002564:	2100      	movs	r1, #0
 8002566:	480f      	ldr	r0, [pc, #60]	@ (80025a4 <pwm_out_2+0x100>)
 8002568:	f009 fddd 	bl	800c126 <memset>
	}

	errors_vector[0] &= 0x80;
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <pwm_out_2+0xfc>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <pwm_out_2+0xfc>)
 8002578:	701a      	strb	r2, [r3, #0]
	errors_vector[0] |= Injector.error_code;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <pwm_out_2+0xfc>)
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <pwm_out_2+0xf0>)
 8002580:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002584:	4313      	orrs	r3, r2
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <pwm_out_2+0xfc>)
 800258a:	701a      	strb	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000114 	.word	0x20000114
 8002598:	200007ec 	.word	0x200007ec
 800259c:	200007ed 	.word	0x200007ed
 80025a0:	20000a38 	.word	0x20000a38
 80025a4:	2000012d 	.word	0x2000012d

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f000 fdf0 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f840 	bl	8002634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f7ff fcae 	bl	8001f14 <MX_GPIO_Init>
  MX_DMA_Init();
 80025b8:	f7ff fc6e 	bl	8001e98 <MX_DMA_Init>
  MX_ADC1_Init();
 80025bc:	f7ff f980 	bl	80018c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 80025c0:	f7ff fafc 	bl	8001bbc <MX_CAN1_Init>
  MX_DAC_Init();
 80025c4:	f7ff fbf0 	bl	8001da8 <MX_DAC_Init>
  MX_I2C1_Init();
 80025c8:	f7ff fdbe 	bl	8002148 <MX_I2C1_Init>
  MX_SPI2_Init();
 80025cc:	f000 f90c 	bl	80027e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80025d0:	f000 faac 	bl	8002b2c <MX_TIM1_Init>
  MX_TIM2_Init();
 80025d4:	f000 fb58 	bl	8002c88 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025d8:	f000 fba4 	bl	8002d24 <MX_TIM3_Init>
  MX_FATFS_Init();
 80025dc:	f007 fc72 	bl	8009ec4 <MX_FATFS_Init>
  MX_TIM7_Init();
 80025e0:	f000 fc3c 	bl	8002e5c <MX_TIM7_Init>
  MX_TIM13_Init();
 80025e4:	f000 fc70 	bl	8002ec8 <MX_TIM13_Init>
  MX_TIM5_Init();
 80025e8:	f000 fbea 	bl	8002dc0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 80025ec:	f7ff fb6e 	bl	8001ccc <CAN_Config>

  HAL_TIM_PWM_Init(&htim1);
 80025f0:	480b      	ldr	r0, [pc, #44]	@ (8002620 <main+0x78>)
 80025f2:	f006 faff 	bl	8008bf4 <HAL_TIM_PWM_Init>

  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
 80025f6:	2108      	movs	r1, #8
 80025f8:	4809      	ldr	r0, [pc, #36]	@ (8002620 <main+0x78>)
 80025fa:	f006 fc8b 	bl	8008f14 <HAL_TIM_IC_Start>

  KType_Init();
 80025fe:	f000 f973 	bl	80028e8 <KType_Init>
  HAL_ADC_Start_DMA(&hadc1, adc_buf.dma_buffer, ADC_CHANNELS_NUM*ADC_FILTRATION_STEPS);
 8002602:	223c      	movs	r2, #60	@ 0x3c
 8002604:	4907      	ldr	r1, [pc, #28]	@ (8002624 <main+0x7c>)
 8002606:	4808      	ldr	r0, [pc, #32]	@ (8002628 <main+0x80>)
 8002608:	f000 fe74 	bl	80032f4 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim5);
 800260c:	4807      	ldr	r0, [pc, #28]	@ (800262c <main+0x84>)
 800260e:	f006 f9fd 	bl	8008a0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002612:	4807      	ldr	r0, [pc, #28]	@ (8002630 <main+0x88>)
 8002614:	f006 f9fa 	bl	8008a0c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  digit_out_1(false);
 8002618:	2000      	movs	r0, #0
 800261a:	f000 f8c5 	bl	80027a8 <digit_out_1>
 800261e:	e7fb      	b.n	8002618 <main+0x70>
 8002620:	2000087c 	.word	0x2000087c
 8002624:	20000658 	.word	0x20000658
 8002628:	20000530 	.word	0x20000530
 800262c:	20000954 	.word	0x20000954
 8002630:	2000099c 	.word	0x2000099c

08002634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b092      	sub	sp, #72	@ 0x48
 8002638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263a:	f107 0318 	add.w	r3, r7, #24
 800263e:	2230      	movs	r2, #48	@ 0x30
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f009 fd6f 	bl	800c126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800265a:	2301      	movs	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265e:	2302      	movs	r3, #2
 8002660:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002662:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002668:	2308      	movs	r3, #8
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 800266c:	23f0      	movs	r3, #240	@ 0xf0
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002670:	2302      	movs	r3, #2
 8002672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002674:	2304      	movs	r3, #4
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	4618      	mov	r0, r3
 800267e:	f005 fc75 	bl	8007f6c <HAL_RCC_OscConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002688:	f000 f8a8 	bl	80027dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268c:	230f      	movs	r3, #15
 800268e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002690:	2302      	movs	r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002698:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800269c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800269e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2103      	movs	r1, #3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 feb3 	bl	8008414 <HAL_RCC_ClockConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026b4:	f000 f892 	bl	80027dc <Error_Handler>
  }
}
 80026b8:	bf00      	nop
 80026ba:	3748      	adds	r7, #72	@ 0x48
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <freq_calculation>:
	else{
		return false;
	}
}

void freq_calculation(void) {
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	frequency[frequency_pionter] = freq_counter;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <freq_calculation+0x3c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <freq_calculation+0x40>)
 80026cc:	7819      	ldrb	r1, [r3, #0]
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <freq_calculation+0x44>)
 80026d0:	5499      	strb	r1, [r3, r2]
	frequency_pionter++;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <freq_calculation+0x3c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <freq_calculation+0x3c>)
 80026dc:	701a      	strb	r2, [r3, #0]
	if (frequency_pionter > 4) {
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <freq_calculation+0x3c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d902      	bls.n	80026ec <freq_calculation+0x2c>
		frequency_pionter = 0;
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <freq_calculation+0x3c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
	}
	freq_counter = 0;
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <freq_calculation+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200007f5 	.word	0x200007f5
 8002700:	200007ee 	.word	0x200007ee
 8002704:	200007f0 	.word	0x200007f0

08002708 <freq_in_1>:

float freq_in_1(void){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	static uint8_t i;
	static uint16_t frequency_sum;

	frequency_sum = 0;
 800270c:	4b17      	ldr	r3, [pc, #92]	@ (800276c <freq_in_1+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]

	for (i = 0; i<5; i++) {
 8002712:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <freq_in_1+0x68>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e011      	b.n	800273e <freq_in_1+0x36>
		frequency_sum += frequency[i];
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <freq_in_1+0x68>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <freq_in_1+0x6c>)
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	461a      	mov	r2, r3
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <freq_in_1+0x64>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <freq_in_1+0x64>)
 8002730:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<5; i++) {
 8002732:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <freq_in_1+0x68>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <freq_in_1+0x68>)
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <freq_in_1+0x68>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d9e9      	bls.n	800271a <freq_in_1+0x12>
	}
	return frequency_sum/5.0;
 8002746:	4b09      	ldr	r3, [pc, #36]	@ (800276c <freq_in_1+0x64>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fe8e 	bl	800046c <__aeabi_i2d>
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <freq_in_1+0x70>)
 8002756:	f7fe f81d 	bl	8000794 <__aeabi_ddiv>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe f9bd 	bl	8000ae0 <__aeabi_d2f>
 8002766:	4603      	mov	r3, r0
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200007f6 	.word	0x200007f6
 8002770:	200007f8 	.word	0x200007f8
 8002774:	200007f0 	.word	0x200007f0
 8002778:	40140000 	.word	0x40140000

0800277c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278c:	d105      	bne.n	800279a <HAL_GPIO_EXTI_Callback+0x1e>
		freq_counter++;
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002798:	701a      	strb	r2, [r3, #0]
	}
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	200007ee 	.word	0x200007ee

080027a8 <digit_out_1>:

void digit_out_1(bool state){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
	if (state){
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <digit_out_1+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	2104      	movs	r1, #4
 80027bc:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <digit_out_1+0x30>)
 80027be:	f002 fe93 	bl	80054e8 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
	}
}
 80027c2:	e004      	b.n	80027ce <digit_out_1+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2104      	movs	r1, #4
 80027c8:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <digit_out_1+0x30>)
 80027ca:	f002 fe8d 	bl	80054e8 <HAL_GPIO_WritePin>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40020400 	.word	0x40020400

080027dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e0:	b672      	cpsid	i
}
 80027e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <Error_Handler+0x8>

080027e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <MX_SPI2_Init+0x68>)
 80027ee:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <MX_SPI2_Init+0x6c>)
 80027f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027f2:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MX_SPI2_Init+0x68>)
 80027f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <MX_SPI2_Init+0x68>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <MX_SPI2_Init+0x68>)
 8002802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002806:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <MX_SPI2_Init+0x68>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <MX_SPI2_Init+0x68>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <MX_SPI2_Init+0x68>)
 8002816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <MX_SPI2_Init+0x68>)
 800281e:	2218      	movs	r2, #24
 8002820:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002822:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <MX_SPI2_Init+0x68>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <MX_SPI2_Init+0x68>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <MX_SPI2_Init+0x68>)
 8002830:	2200      	movs	r2, #0
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <MX_SPI2_Init+0x68>)
 8002836:	220a      	movs	r2, #10
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	@ (8002850 <MX_SPI2_Init+0x68>)
 800283c:	f006 f80e 	bl	800885c <HAL_SPI_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002846:	f7ff ffc9 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000081c 	.word	0x2000081c
 8002854:	40003800 	.word	0x40003800

08002858 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <HAL_SPI_MspInit+0x84>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12c      	bne.n	80028d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002888:	6413      	str	r3, [r2, #64]	@ 0x40
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80028b2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028c4:	2305      	movs	r3, #5
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <HAL_SPI_MspInit+0x8c>)
 80028d0:	f002 fc6c 	bl	80051ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	@ 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40003800 	.word	0x40003800
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400

080028e8 <KType_Init>:

int16_t therm_in_3(void){
	return Read_MAX31855(&ktype1, &hspi2);
}

void KType_Init(void){
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	ktype0.port = GPIOB;
 80028ec:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <KType_Init+0x28>)
 80028ee:	4a09      	ldr	r2, [pc, #36]	@ (8002914 <KType_Init+0x2c>)
 80028f0:	605a      	str	r2, [r3, #4]
	ktype0.pin = GPIO_PIN_4;
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <KType_Init+0x28>)
 80028f4:	2210      	movs	r2, #16
 80028f6:	801a      	strh	r2, [r3, #0]
	ktype1.port = GPIOA;
 80028f8:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <KType_Init+0x30>)
 80028fa:	4a08      	ldr	r2, [pc, #32]	@ (800291c <KType_Init+0x34>)
 80028fc:	605a      	str	r2, [r3, #4]
	ktype1.pin = GPIO_PIN_15;
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <KType_Init+0x30>)
 8002900:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002904:	801a      	strh	r2, [r3, #0]
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	200007fc 	.word	0x200007fc
 8002914:	40020400 	.word	0x40020400
 8002918:	2000080c 	.word	0x2000080c
 800291c:	40020000 	.word	0x40020000

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_MspInit+0x48>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	4a0e      	ldr	r2, [pc, #56]	@ (8002968 <HAL_MspInit+0x48>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002934:	6453      	str	r3, [r2, #68]	@ 0x44
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <HAL_MspInit+0x48>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_MspInit+0x48>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a07      	ldr	r2, [pc, #28]	@ (8002968 <HAL_MspInit+0x48>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_MspInit+0x48>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40023800 	.word	0x40023800

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029bc:	f000 fc3a 	bl	8003234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <DMA1_Stream0_IRQHandler+0x10>)
 80029ca:	f002 f971 	bl	8004cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000724 	.word	0x20000724

080029d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <DMA1_Stream6_IRQHandler+0x10>)
 80029de:	f002 f967 	bl	8004cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000784 	.word	0x20000784

080029ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <CAN1_RX0_IRQHandler+0x10>)
 80029f2:	f001 fc8a 	bl	800430a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000061c 	.word	0x2000061c

08002a00 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <TIM1_CC_IRQHandler+0x10>)
 8002a06:	f006 fb61 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000087c 	.word	0x2000087c

08002a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	__HAL_TIM_SET_COUNTER(&htim2, PumpPort_SwitchState());
 8002a18:	f7ff fb2c 	bl	8002074 <PumpPort_SwitchState>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <TIM2_IRQHandler+0x1c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a26:	4802      	ldr	r0, [pc, #8]	@ (8002a30 <TIM2_IRQHandler+0x1c>)
 8002a28:	f006 fb50 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200008c4 	.word	0x200008c4

08002a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	__HAL_TIM_SET_COUNTER(&htim3, SyncPort_SwitchState(&ShootOff));
 8002a38:	4806      	ldr	r0, [pc, #24]	@ (8002a54 <TIM3_IRQHandler+0x20>)
 8002a3a:	f7ff fce7 	bl	800240c <SyncPort_SwitchState>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <TIM3_IRQHandler+0x24>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a48:	4803      	ldr	r0, [pc, #12]	@ (8002a58 <TIM3_IRQHandler+0x24>)
 8002a4a:	f006 fb3f 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000138 	.word	0x20000138
 8002a58:	2000090c 	.word	0x2000090c

08002a5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <I2C1_EV_IRQHandler+0x10>)
 8002a62:	f003 f9b7 	bl	8005dd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200006d0 	.word	0x200006d0

08002a70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <I2C1_ER_IRQHandler+0x10>)
 8002a76:	f003 fb00 	bl	800607a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200006d0 	.word	0x200006d0

08002a84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002a88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a8c:	f002 fd44 	bl	8005518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	hci_ctrl();
 8002a98:	f007 fbf6 	bl	800a288 <hci_ctrl>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a9c:	4802      	ldr	r0, [pc, #8]	@ (8002aa8 <TIM5_IRQHandler+0x14>)
 8002a9e:	f006 fb15 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000954 	.word	0x20000954

08002aac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	doc_out_stablility_check();
 8002ab0:	f008 fcce 	bl	800b450 <doc_out_stablility_check>
	dpf_out_stablility_check();
 8002ab4:	f008 fdbc 	bl	800b630 <dpf_out_stablility_check>
	dpf_out_trand_calculation();
 8002ab8:	f008 fd9e 	bl	800b5f8 <dpf_out_trand_calculation>

	freq_calculation();
 8002abc:	f7ff fe00 	bl	80026c0 <freq_calculation>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ac0:	4803      	ldr	r0, [pc, #12]	@ (8002ad0 <TIM7_IRQHandler+0x24>)
 8002ac2:	f006 fb03 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  can_transmit_fm1();
 8002ac6:	f7fe fceb 	bl	80014a0 <can_transmit_fm1>

  /* USER CODE END TIM7_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000099c 	.word	0x2000099c

08002ad4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <DMA2_Stream0_IRQHandler+0x10>)
 8002ada:	f002 f8e9 	bl	8004cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000578 	.word	0x20000578

08002ae8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002af4:	2100      	movs	r1, #0
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f001 fac1 	bl	800407e <HAL_CAN_GetRxMessage>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 8002b02:	f7ff fe6b 	bl	80027dc <Error_Handler>
	}
	Analise_RxMessage(&RxHeader, RxData);
 8002b06:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002b08:	4804      	ldr	r0, [pc, #16]	@ (8002b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002b0a:	f7fe fe9d 	bl	8001848 <Analise_RxMessage>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000874 	.word	0x20000874
 8002b1c:	200005e0 	.word	0x200005e0

08002b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b096      	sub	sp, #88	@ 0x58
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2220      	movs	r2, #32
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f009 fade 	bl	800c126 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b6a:	4b45      	ldr	r3, [pc, #276]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b6c:	4a45      	ldr	r2, [pc, #276]	@ (8002c84 <MX_TIM1_Init+0x158>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b70:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b42      	ldr	r3, [pc, #264]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000;
 8002b7c:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b7e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002b82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b96:	483a      	ldr	r0, [pc, #232]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002b98:	f005 fee9 	bl	800896e <HAL_TIM_Base_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002ba2:	f7ff fe1b 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002baa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4833      	ldr	r0, [pc, #204]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002bb4:	f006 fcb0 	bl	8009518 <HAL_TIM_ConfigClockSource>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002bbe:	f7ff fe0d 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc2:	482f      	ldr	r0, [pc, #188]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002bc4:	f006 f816 	bl	8008bf4 <HAL_TIM_PWM_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002bce:	f7ff fe05 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bde:	4619      	mov	r1, r3
 8002be0:	4827      	ldr	r0, [pc, #156]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002be2:	f007 f891 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002bec:	f7ff fdf6 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf0:	2360      	movs	r3, #96	@ 0x60
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 3000;
 8002bf4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c12:	2200      	movs	r2, #0
 8002c14:	4619      	mov	r1, r3
 8002c16:	481a      	ldr	r0, [pc, #104]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002c18:	f006 fbbc 	bl	8009394 <HAL_TIM_PWM_ConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002c22:	f7ff fddb 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4814      	ldr	r0, [pc, #80]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002c30:	f006 fbb0 	bl	8009394 <HAL_TIM_PWM_ConfigChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002c3a:	f7ff fdcf 	bl	80027dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4807      	ldr	r0, [pc, #28]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002c62:	f007 f8cb 	bl	8009dfc <HAL_TIMEx_ConfigBreakDeadTime>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002c6c:	f7ff fdb6 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c70:	4803      	ldr	r0, [pc, #12]	@ (8002c80 <MX_TIM1_Init+0x154>)
 8002c72:	f000 fa29 	bl	80030c8 <HAL_TIM_MspPostInit>

}
 8002c76:	bf00      	nop
 8002c78:	3758      	adds	r7, #88	@ 0x58
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000087c 	.word	0x2000087c
 8002c84:	40010000 	.word	0x40010000

08002c88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002ca6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002caa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1999;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cae:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8002cba:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cbc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cca:	2280      	movs	r2, #128	@ 0x80
 8002ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cce:	4814      	ldr	r0, [pc, #80]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cd0:	f005 fe4d 	bl	800896e <HAL_TIM_Base_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cda:	f7ff fd7f 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ce4:	f107 0308 	add.w	r3, r7, #8
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480d      	ldr	r0, [pc, #52]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002cec:	f006 fc14 	bl	8009518 <HAL_TIM_ConfigClockSource>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002cf6:	f7ff fd71 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d02:	463b      	mov	r3, r7
 8002d04:	4619      	mov	r1, r3
 8002d06:	4806      	ldr	r0, [pc, #24]	@ (8002d20 <MX_TIM2_Init+0x98>)
 8002d08:	f006 fffe 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d12:	f7ff fd63 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200008c4 	.word	0x200008c4

08002d24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d38:	463b      	mov	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d40:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d42:	4a1e      	ldr	r2, [pc, #120]	@ (8002dbc <MX_TIM3_Init+0x98>)
 8002d44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 8002d46:	4b1c      	ldr	r3, [pc, #112]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d48:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d50:	2210      	movs	r2, #16
 8002d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 8002d54:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d64:	2280      	movs	r2, #128	@ 0x80
 8002d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d68:	4813      	ldr	r0, [pc, #76]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d6a:	f005 fe00 	bl	800896e <HAL_TIM_Base_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002d74:	f7ff fd32 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	4619      	mov	r1, r3
 8002d84:	480c      	ldr	r0, [pc, #48]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002d86:	f006 fbc7 	bl	8009518 <HAL_TIM_ConfigClockSource>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002d90:	f7ff fd24 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4805      	ldr	r0, [pc, #20]	@ (8002db8 <MX_TIM3_Init+0x94>)
 8002da2:	f006 ffb1 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002dac:	f7ff fd16 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	2000090c 	.word	0x2000090c
 8002dbc:	40000400 	.word	0x40000400

08002dc0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002dde:	4a1e      	ldr	r2, [pc, #120]	@ (8002e58 <MX_TIM5_Init+0x98>)
 8002de0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8002de2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002de4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002de8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 6000;
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002df2:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002df6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e04:	4813      	ldr	r0, [pc, #76]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002e06:	f005 fdb2 	bl	800896e <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002e10:	f7ff fce4 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	4619      	mov	r1, r3
 8002e20:	480c      	ldr	r0, [pc, #48]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002e22:	f006 fb79 	bl	8009518 <HAL_TIM_ConfigClockSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002e2c:	f7ff fcd6 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <MX_TIM5_Init+0x94>)
 8002e3e:	f006 ff63 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002e48:	f7ff fcc8 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000954 	.word	0x20000954
 8002e58:	40000c00 	.word	0x40000c00

08002e5c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e62:	463b      	mov	r3, r7
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002e6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <MX_TIM7_Init+0x68>)
 8002e6e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e76:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002e80:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002e84:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002e8e:	f005 fd6e 	bl	800896e <HAL_TIM_Base_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002e98:	f7ff fca0 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4805      	ldr	r0, [pc, #20]	@ (8002ec0 <MX_TIM7_Init+0x64>)
 8002eaa:	f006 ff2d 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002eb4:	f7ff fc92 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000099c 	.word	0x2000099c
 8002ec4:	40001400 	.word	0x40001400

08002ec8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f5c <MX_TIM13_Init+0x94>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 999;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002ee8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002eec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 60000;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002ef6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002efa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f08:	4813      	ldr	r0, [pc, #76]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002f0a:	f005 fd30 	bl	800896e <HAL_TIM_Base_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002f14:	f7ff fc62 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8002f18:	480f      	ldr	r0, [pc, #60]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002f1a:	f005 fe13 	bl	8008b44 <HAL_TIM_OC_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002f24:	f7ff fc5a 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30000;
 8002f2c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <MX_TIM13_Init+0x90>)
 8002f42:	f006 f9cb 	bl	80092dc <HAL_TIM_OC_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8002f4c:	f7ff fc46 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200009e4 	.word	0x200009e4
 8002f5c:	40001c00 	.word	0x40001c00

08002f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	@ (80030b0 <HAL_TIM_Base_MspInit+0x150>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d116      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	4b4f      	ldr	r3, [pc, #316]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f82:	4b4c      	ldr	r3, [pc, #304]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	201b      	movs	r0, #27
 8002f94:	f001 fcb3 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002f98:	201b      	movs	r0, #27
 8002f9a:	f001 fccc 	bl	8004936 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002f9e:	e082      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa8:	d116      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	4b41      	ldr	r3, [pc, #260]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4a40      	ldr	r2, [pc, #256]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fba:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	201c      	movs	r0, #28
 8002fcc:	f001 fc97 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fd0:	201c      	movs	r0, #28
 8002fd2:	f001 fcb0 	bl	8004936 <HAL_NVIC_EnableIRQ>
}
 8002fd6:	e066      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a36      	ldr	r2, [pc, #216]	@ (80030b8 <HAL_TIM_Base_MspInit+0x158>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d116      	bne.n	8003010 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4b33      	ldr	r3, [pc, #204]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a32      	ldr	r2, [pc, #200]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff2:	4b30      	ldr	r3, [pc, #192]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	201d      	movs	r0, #29
 8003004:	f001 fc7b 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003008:	201d      	movs	r0, #29
 800300a:	f001 fc94 	bl	8004936 <HAL_NVIC_EnableIRQ>
}
 800300e:	e04a      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_TIM_Base_MspInit+0x15c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d116      	bne.n	8003048 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	4a24      	ldr	r2, [pc, #144]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6413      	str	r3, [r2, #64]	@ 0x40
 800302a:	4b22      	ldr	r3, [pc, #136]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2032      	movs	r0, #50	@ 0x32
 800303c:	f001 fc5f 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003040:	2032      	movs	r0, #50	@ 0x32
 8003042:	f001 fc78 	bl	8004936 <HAL_NVIC_EnableIRQ>
}
 8003046:	e02e      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1c      	ldr	r2, [pc, #112]	@ (80030c0 <HAL_TIM_Base_MspInit+0x160>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d116      	bne.n	8003080 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b17      	ldr	r3, [pc, #92]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	4a16      	ldr	r2, [pc, #88]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	6413      	str	r3, [r2, #64]	@ 0x40
 8003062:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2037      	movs	r0, #55	@ 0x37
 8003074:	f001 fc43 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003078:	2037      	movs	r0, #55	@ 0x37
 800307a:	f001 fc5c 	bl	8004936 <HAL_NVIC_EnableIRQ>
}
 800307e:	e012      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM13)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0f      	ldr	r2, [pc, #60]	@ (80030c4 <HAL_TIM_Base_MspInit+0x164>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10d      	bne.n	80030a6 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 8003094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003098:	6413      	str	r3, [r2, #64]	@ 0x40
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_TIM_Base_MspInit+0x154>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
}
 80030a6:	bf00      	nop
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40001400 	.word	0x40001400
 80030c4:	40001c00 	.word	0x40001c00

080030c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <HAL_TIM_MspPostInit+0x68>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d11e      	bne.n	8003128 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <HAL_TIM_MspPostInit+0x6c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <HAL_TIM_MspPostInit+0x6c>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <HAL_TIM_MspPostInit+0x6c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003106:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800310a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003118:	2301      	movs	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	4619      	mov	r1, r3
 8003122:	4805      	ldr	r0, [pc, #20]	@ (8003138 <HAL_TIM_MspPostInit+0x70>)
 8003124:	f002 f842 	bl	80051ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40010000 	.word	0x40010000
 8003134:	40023800 	.word	0x40023800
 8003138:	40020000 	.word	0x40020000

0800313c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003174 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003140:	f7ff fcee 	bl	8002b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003144:	480c      	ldr	r0, [pc, #48]	@ (8003178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003146:	490d      	ldr	r1, [pc, #52]	@ (800317c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800315c:	4c0a      	ldr	r4, [pc, #40]	@ (8003188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800316a:	f008 ffeb 	bl	800c144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7ff fa1b 	bl	80025a8 <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003174:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8003180:	0800c3e4 	.word	0x0800c3e4
  ldr r2, =_sbss
 8003184:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8003188:	20000d60 	.word	0x20000d60

0800318c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	@ (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800319e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f001 fb95 	bl	80048e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	200f      	movs	r0, #15
 80031c0:	f000 f808 	bl	80031d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7ff fbac 	bl	8002920 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031dc:	4b12      	ldr	r3, [pc, #72]	@ (8003228 <HAL_InitTick+0x54>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b12      	ldr	r3, [pc, #72]	@ (800322c <HAL_InitTick+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 fbad 	bl	8004952 <HAL_SYSTICK_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00e      	b.n	8003220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d80a      	bhi.n	800321e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003208:	2200      	movs	r2, #0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f001 fb75 	bl	80048fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003214:	4a06      	ldr	r2, [pc, #24]	@ (8003230 <HAL_InitTick+0x5c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	2000015c 	.word	0x2000015c
 800322c:	20000164 	.word	0x20000164
 8003230:	20000160 	.word	0x20000160

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <HAL_IncTick+0x1c>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_IncTick+0x20>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a03      	ldr	r2, [pc, #12]	@ (8003254 <HAL_IncTick+0x20>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000164 	.word	0x20000164
 8003254:	20000a2c 	.word	0x20000a2c

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b02      	ldr	r3, [pc, #8]	@ (8003268 <HAL_GetTick+0x10>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	20000a2c 	.word	0x20000a2c

0800326c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e033      	b.n	80032ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fbb2 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032b2:	f023 0302 	bic.w	r3, r3, #2
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa32 	bl	8003728 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80032da:	e001      	b.n	80032e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_ADC_Start_DMA+0x1e>
 800330e:	2302      	movs	r3, #2
 8003310:	e0bc      	b.n	800348c <HAL_ADC_Start_DMA+0x198>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d018      	beq.n	800335a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003338:	4b56      	ldr	r3, [pc, #344]	@ (8003494 <HAL_ADC_Start_DMA+0x1a0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a56      	ldr	r2, [pc, #344]	@ (8003498 <HAL_ADC_Start_DMA+0x1a4>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9a      	lsrs	r2, r3, #18
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800334c:	e002      	b.n	8003354 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3b01      	subs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 8084 	bne.w	8003472 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003394:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a8:	d106      	bne.n	80033b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f023 0206 	bic.w	r2, r3, #6
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80033b6:	e002      	b.n	80033be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	4a34      	ldr	r2, [pc, #208]	@ (800349c <HAL_ADC_Start_DMA+0x1a8>)
 80033cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	4a33      	ldr	r2, [pc, #204]	@ (80034a0 <HAL_ADC_Start_DMA+0x1ac>)
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <HAL_ADC_Start_DMA+0x1b0>)
 80033dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80033e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80033f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003406:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	334c      	adds	r3, #76	@ 0x4c
 8003412:	4619      	mov	r1, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f001 fbd0 	bl	8004bbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800341c:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <HAL_ADC_Start_DMA+0x1b4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10f      	bne.n	8003448 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d129      	bne.n	800348a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	e020      	b.n	800348a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <HAL_ADC_Start_DMA+0x1b8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d11b      	bne.n	800348a <HAL_ADC_Start_DMA+0x196>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d114      	bne.n	800348a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e00b      	b.n	800348a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	f043 0210 	orr.w	r2, r3, #16
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	2000015c 	.word	0x2000015c
 8003498:	431bde83 	.word	0x431bde83
 800349c:	08003935 	.word	0x08003935
 80034a0:	080039ef 	.word	0x080039ef
 80034a4:	08003a0b 	.word	0x08003a0b
 80034a8:	40012300 	.word	0x40012300
 80034ac:	40012000 	.word	0x40012000

080034b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x1c>
 8003500:	2302      	movs	r3, #2
 8003502:	e103      	b.n	800370c <HAL_ADC_ConfigChannel+0x224>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b09      	cmp	r3, #9
 8003512:	d925      	bls.n	8003560 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68d9      	ldr	r1, [r3, #12]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	3b1e      	subs	r3, #30
 800352a:	2207      	movs	r2, #7
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43da      	mvns	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	400a      	ands	r2, r1
 8003538:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68d9      	ldr	r1, [r3, #12]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	4603      	mov	r3, r0
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4403      	add	r3, r0
 8003552:	3b1e      	subs	r3, #30
 8003554:	409a      	lsls	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	e022      	b.n	80035a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	2207      	movs	r2, #7
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6919      	ldr	r1, [r3, #16]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	4618      	mov	r0, r3
 8003596:	4603      	mov	r3, r0
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4403      	add	r3, r0
 800359c:	409a      	lsls	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d824      	bhi.n	80035f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3b05      	subs	r3, #5
 80035c0:	221f      	movs	r2, #31
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b05      	subs	r3, #5
 80035ea:	fa00 f203 	lsl.w	r2, r0, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035f6:	e04c      	b.n	8003692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d824      	bhi.n	800364a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	3b23      	subs	r3, #35	@ 0x23
 8003612:	221f      	movs	r2, #31
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43da      	mvns	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	400a      	ands	r2, r1
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	4618      	mov	r0, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b23      	subs	r3, #35	@ 0x23
 800363c:	fa00 f203 	lsl.w	r2, r0, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
 8003648:	e023      	b.n	8003692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	3b41      	subs	r3, #65	@ 0x41
 800365c:	221f      	movs	r2, #31
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43da      	mvns	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	400a      	ands	r2, r1
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	4618      	mov	r0, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3b41      	subs	r3, #65	@ 0x41
 8003686:	fa00 f203 	lsl.w	r2, r0, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a20      	ldr	r2, [pc, #128]	@ (8003718 <HAL_ADC_ConfigChannel+0x230>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d109      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1c8>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b12      	cmp	r3, #18
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_ADC_ConfigChannel+0x234>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	@ (800371c <HAL_ADC_ConfigChannel+0x234>)
 80036aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036ae:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_ADC_ConfigChannel+0x230>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d123      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x21a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d003      	beq.n	80036ca <HAL_ADC_ConfigChannel+0x1e2>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d11b      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <HAL_ADC_ConfigChannel+0x234>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a13      	ldr	r2, [pc, #76]	@ (800371c <HAL_ADC_ConfigChannel+0x234>)
 80036d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d111      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <HAL_ADC_ConfigChannel+0x238>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a10      	ldr	r2, [pc, #64]	@ (8003724 <HAL_ADC_ConfigChannel+0x23c>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9a      	lsrs	r2, r3, #18
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f9      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012000 	.word	0x40012000
 800371c:	40012300 	.word	0x40012300
 8003720:	2000015c 	.word	0x2000015c
 8003724:	431bde83 	.word	0x431bde83

08003728 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003730:	4b7e      	ldr	r3, [pc, #504]	@ (800392c <ADC_Init+0x204>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a7d      	ldr	r2, [pc, #500]	@ (800392c <ADC_Init+0x204>)
 8003736:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800373a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800373c:	4b7b      	ldr	r3, [pc, #492]	@ (800392c <ADC_Init+0x204>)
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4979      	ldr	r1, [pc, #484]	@ (800392c <ADC_Init+0x204>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800377c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003930 <ADC_Init+0x208>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	e00f      	b.n	8003822 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0202 	bic.w	r2, r2, #2
 8003830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6899      	ldr	r1, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7e1b      	ldrb	r3, [r3, #24]
 800383c:	005a      	lsls	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d027      	beq.n	80038a0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800385e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800386e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	3b01      	subs	r3, #1
 8003876:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800387a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	fa92 f2a2 	rbit	r2, r2
 8003882:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	fab2 f282 	clz	r2, r2
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	fa03 f102 	lsl.w	r1, r3, r2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	e007      	b.n	80038b0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	051a      	lsls	r2, r3, #20
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038f2:	025a      	lsls	r2, r3, #9
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800390a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	029a      	lsls	r2, r3, #10
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40012300 	.word	0x40012300
 8003930:	0f000001 	.word	0x0f000001

08003934 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13c      	bne.n	80039c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d12b      	bne.n	80039c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800396c:	2b00      	cmp	r3, #0
 800396e:	d127      	bne.n	80039c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003988:	2b00      	cmp	r3, #0
 800398a:	d119      	bne.n	80039c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0220 	bic.w	r2, r2, #32
 800399a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fd75 	bl	80034b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039c6:	e00e      	b.n	80039e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fd7d 	bl	80034d4 <HAL_ADC_ErrorCallback>
}
 80039da:	e004      	b.n	80039e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff fd60 	bl	80034c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2240      	movs	r2, #64	@ 0x40
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f043 0204 	orr.w	r2, r3, #4
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff fd52 	bl	80034d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0ed      	b.n	8003c26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe f8e8 	bl	8001c2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a6c:	f7ff fbf4 	bl	8003258 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a72:	e012      	b.n	8003a9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a74:	f7ff fbf0 	bl	8003258 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b0a      	cmp	r3, #10
 8003a80:	d90b      	bls.n	8003a9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2205      	movs	r2, #5
 8003a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0c5      	b.n	8003c26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0e5      	beq.n	8003a74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0202 	bic.w	r2, r2, #2
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab8:	f7ff fbce 	bl	8003258 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003abe:	e012      	b.n	8003ae6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ac0:	f7ff fbca 	bl	8003258 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d90b      	bls.n	8003ae6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2205      	movs	r2, #5
 8003ade:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e09f      	b.n	8003c26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e5      	bne.n	8003ac0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7e1b      	ldrb	r3, [r3, #24]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d108      	bne.n	8003b0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e007      	b.n	8003b1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7e5b      	ldrb	r3, [r3, #25]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d108      	bne.n	8003b38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e007      	b.n	8003b48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7e9b      	ldrb	r3, [r3, #26]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d108      	bne.n	8003b62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0220 	bic.w	r2, r2, #32
 8003b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7edb      	ldrb	r3, [r3, #27]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0210 	bic.w	r2, r2, #16
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e007      	b.n	8003b9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0210 	orr.w	r2, r2, #16
 8003b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d108      	bne.n	8003bb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0208 	bic.w	r2, r2, #8
 8003bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7f5b      	ldrb	r3, [r3, #29]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d108      	bne.n	8003be0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0204 	orr.w	r2, r2, #4
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e007      	b.n	8003bf0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	ea42 0103 	orr.w	r1, r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c46:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d003      	beq.n	8003c56 <HAL_CAN_ConfigFilter+0x26>
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f040 80be 	bne.w	8003dd2 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c56:	4b65      	ldr	r3, [pc, #404]	@ (8003dec <HAL_CAN_ConfigFilter+0x1bc>)
 8003c58:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003c70:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	431a      	orrs	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2201      	movs	r2, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	401a      	ands	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d123      	bne.n	8003d00 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3248      	adds	r2, #72	@ 0x48
 8003ce0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cf4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	3348      	adds	r3, #72	@ 0x48
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d122      	bne.n	8003d4e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3248      	adds	r2, #72	@ 0x48
 8003d2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	3348      	adds	r3, #72	@ 0x48
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	401a      	ands	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003d68:	e007      	b.n	8003d7a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003d94:	e007      	b.n	8003da6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003dc4:	f023 0201 	bic.w	r2, r3, #1
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e006      	b.n	8003de0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40006400 	.word	0x40006400

08003df0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d12e      	bne.n	8003e62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7ff fa1c 	bl	8003258 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e22:	e012      	b.n	8003e4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e24:	f7ff fa18 	bl	8003258 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b0a      	cmp	r3, #10
 8003e30:	d90b      	bls.n	8003e4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2205      	movs	r2, #5
 8003e42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e012      	b.n	8003e70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e5      	bne.n	8003e24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e006      	b.n	8003e70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d003      	beq.n	8003ea4 <HAL_CAN_AddTxMessage+0x2c>
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	f040 80ad 	bne.w	8003ffe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8095 	beq.w	8003fee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	0e1b      	lsrs	r3, r3, #24
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ece:	2201      	movs	r2, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	6809      	ldr	r1, [r1, #0]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3318      	adds	r3, #24
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	440b      	add	r3, r1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e00f      	b.n	8003f1c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f06:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f10:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	3318      	adds	r3, #24
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	440b      	add	r3, r1
 8003f1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6819      	ldr	r1, [r3, #0]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3318      	adds	r3, #24
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	440b      	add	r3, r1
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	7d1b      	ldrb	r3, [r3, #20]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d111      	bne.n	8003f5c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	6811      	ldr	r1, [r2, #0]
 8003f4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3318      	adds	r3, #24
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	440b      	add	r3, r1
 8003f58:	3304      	adds	r3, #4
 8003f5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3307      	adds	r3, #7
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	061a      	lsls	r2, r3, #24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3306      	adds	r3, #6
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3305      	adds	r3, #5
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	4313      	orrs	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	3204      	adds	r2, #4
 8003f7c:	7812      	ldrb	r2, [r2, #0]
 8003f7e:	4610      	mov	r0, r2
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	6811      	ldr	r1, [r2, #0]
 8003f84:	ea43 0200 	orr.w	r2, r3, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003f92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3303      	adds	r3, #3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	061a      	lsls	r2, r3, #24
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6811      	ldr	r1, [r2, #0]
 8003fba:	ea43 0200 	orr.w	r2, r3, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003fc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	4413      	add	r3, r2
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	6811      	ldr	r1, [r2, #0]
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	440b      	add	r3, r1
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e00e      	b.n	800400c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e006      	b.n	800400c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3724      	adds	r7, #36	@ 0x24
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004028:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800402a:	7afb      	ldrb	r3, [r7, #11]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d002      	beq.n	8004036 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d11d      	bne.n	8004072 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3301      	adds	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004092:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d003      	beq.n	80040a2 <HAL_CAN_GetRxMessage+0x24>
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	2b02      	cmp	r3, #2
 800409e:	f040 8103 	bne.w	80042a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10e      	bne.n	80040c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0f7      	b.n	80042b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0e8      	b.n	80042b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	331b      	adds	r3, #27
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	4413      	add	r3, r2
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0204 	and.w	r2, r3, #4
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10c      	bne.n	800411c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	331b      	adds	r3, #27
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	4413      	add	r3, r2
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0d5b      	lsrs	r3, r3, #21
 8004112:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e00b      	b.n	8004134 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	331b      	adds	r3, #27
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	4413      	add	r3, r2
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	331b      	adds	r3, #27
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	4413      	add	r3, r2
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0202 	and.w	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	331b      	adds	r3, #27
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2208      	movs	r2, #8
 8004166:	611a      	str	r2, [r3, #16]
 8004168:	e00b      	b.n	8004182 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	331b      	adds	r3, #27
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	331b      	adds	r3, #27
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b2da      	uxtb	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	331b      	adds	r3, #27
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	4413      	add	r3, r2
 80041a6:	3304      	adds	r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0a1a      	lsrs	r2, r3, #8
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0c1a      	lsrs	r2, r3, #16
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	3302      	adds	r3, #2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	4413      	add	r3, r2
 8004206:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	0e1a      	lsrs	r2, r3, #24
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	3303      	adds	r3, #3
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	4413      	add	r3, r2
 8004220:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	4413      	add	r3, r2
 8004238:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	0a1a      	lsrs	r2, r3, #8
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	3305      	adds	r3, #5
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0c1a      	lsrs	r2, r3, #16
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	3306      	adds	r3, #6
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4413      	add	r3, r2
 800426c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	0e1a      	lsrs	r2, r3, #24
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	3307      	adds	r3, #7
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0220 	orr.w	r2, r2, #32
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	e007      	b.n	80042a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e006      	b.n	80042b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d002      	beq.n	80042de <HAL_CAN_ActivateNotification+0x1e>
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d109      	bne.n	80042f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e006      	b.n	8004300 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	@ 0x28
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d07c      	beq.n	800444a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d023      	beq.n	80043a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2201      	movs	r2, #1
 8004360:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f983 	bl	8004678 <HAL_CAN_TxMailbox0CompleteCallback>
 8004372:	e016      	b.n	80043a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	e00c      	b.n	80043a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
 800439a:	e002      	b.n	80043a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f986 	bl	80046ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d024      	beq.n	80043f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f962 	bl	800468a <HAL_CAN_TxMailbox1CompleteCallback>
 80043c6:	e016      	b.n	80043f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043da:	e00c      	b.n	80043f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	e002      	b.n	80043f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f965 	bl	80046c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d024      	beq.n	800444a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004408:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f941 	bl	800469c <HAL_CAN_TxMailbox2CompleteCallback>
 800441a:	e016      	b.n	800444a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
 800442e:	e00c      	b.n	800444a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
 8004442:	e002      	b.n	800444a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f944 	bl	80046d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00c      	beq.n	800446e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2210      	movs	r2, #16
 800446c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00b      	beq.n	8004490 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2208      	movs	r2, #8
 8004488:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f92a 	bl	80046e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fe fb1d 	bl	8002ae8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2210      	movs	r2, #16
 80044d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2208      	movs	r2, #8
 80044ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f90a 	bl	8004708 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8f2 	bl	80046f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2210      	movs	r2, #16
 800452c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8f3 	bl	800471a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8eb 	bl	800472c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d07b      	beq.n	8004658 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d072      	beq.n	8004650 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d043      	beq.n	8004650 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03e      	beq.n	8004650 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045d8:	2b60      	cmp	r3, #96	@ 0x60
 80045da:	d02b      	beq.n	8004634 <HAL_CAN_IRQHandler+0x32a>
 80045dc:	2b60      	cmp	r3, #96	@ 0x60
 80045de:	d82e      	bhi.n	800463e <HAL_CAN_IRQHandler+0x334>
 80045e0:	2b50      	cmp	r3, #80	@ 0x50
 80045e2:	d022      	beq.n	800462a <HAL_CAN_IRQHandler+0x320>
 80045e4:	2b50      	cmp	r3, #80	@ 0x50
 80045e6:	d82a      	bhi.n	800463e <HAL_CAN_IRQHandler+0x334>
 80045e8:	2b40      	cmp	r3, #64	@ 0x40
 80045ea:	d019      	beq.n	8004620 <HAL_CAN_IRQHandler+0x316>
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	d826      	bhi.n	800463e <HAL_CAN_IRQHandler+0x334>
 80045f0:	2b30      	cmp	r3, #48	@ 0x30
 80045f2:	d010      	beq.n	8004616 <HAL_CAN_IRQHandler+0x30c>
 80045f4:	2b30      	cmp	r3, #48	@ 0x30
 80045f6:	d822      	bhi.n	800463e <HAL_CAN_IRQHandler+0x334>
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d002      	beq.n	8004602 <HAL_CAN_IRQHandler+0x2f8>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d005      	beq.n	800460c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004600:	e01d      	b.n	800463e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800460a:	e019      	b.n	8004640 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	f043 0310 	orr.w	r3, r3, #16
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004614:	e014      	b.n	8004640 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	f043 0320 	orr.w	r3, r3, #32
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800461e:	e00f      	b.n	8004640 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004628:	e00a      	b.n	8004640 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004632:	e005      	b.n	8004640 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800463c:	e000      	b.n	8004640 <HAL_CAN_IRQHandler+0x336>
            break;
 800463e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800464e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2204      	movs	r2, #4
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f867 	bl	800473e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004670:	bf00      	nop
 8004672:	3728      	adds	r7, #40	@ 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr

080046d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <__NVIC_SetPriorityGrouping+0x44>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800476c:	4013      	ands	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800477c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004782:	4a04      	ldr	r2, [pc, #16]	@ (8004794 <__NVIC_SetPriorityGrouping+0x44>)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	60d3      	str	r3, [r2, #12]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800479c:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <__NVIC_GetPriorityGrouping+0x18>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 0307 	and.w	r3, r3, #7
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	db0b      	blt.n	80047de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	f003 021f 	and.w	r2, r3, #31
 80047cc:	4906      	ldr	r1, [pc, #24]	@ (80047e8 <__NVIC_EnableIRQ+0x34>)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2001      	movs	r0, #1
 80047d6:	fa00 f202 	lsl.w	r2, r0, r2
 80047da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	@ (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	@ (800483c <__NVIC_SetPriority+0x50>)
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	@ 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf28      	it	cs
 800485e:	2304      	movcs	r3, #4
 8004860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3304      	adds	r3, #4
 8004866:	2b06      	cmp	r3, #6
 8004868:	d902      	bls.n	8004870 <NVIC_EncodePriority+0x30>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3b03      	subs	r3, #3
 800486e:	e000      	b.n	8004872 <NVIC_EncodePriority+0x32>
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	401a      	ands	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	4313      	orrs	r3, r2
         );
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	@ 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b4:	d301      	bcc.n	80048ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00f      	b.n	80048da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ba:	4a0a      	ldr	r2, [pc, #40]	@ (80048e4 <SysTick_Config+0x40>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c2:	210f      	movs	r1, #15
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	f7ff ff90 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <SysTick_Config+0x40>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d2:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <SysTick_Config+0x40>)
 80048d4:	2207      	movs	r2, #7
 80048d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000e010 	.word	0xe000e010

080048e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff2d 	bl	8004750 <__NVIC_SetPriorityGrouping>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	4603      	mov	r3, r0
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004910:	f7ff ff42 	bl	8004798 <__NVIC_GetPriorityGrouping>
 8004914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6978      	ldr	r0, [r7, #20]
 800491c:	f7ff ff90 	bl	8004840 <NVIC_EncodePriority>
 8004920:	4602      	mov	r2, r0
 8004922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff5f 	bl	80047ec <__NVIC_SetPriority>
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff35 	bl	80047b4 <__NVIC_EnableIRQ>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffa2 	bl	80048a4 <SysTick_Config>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e014      	b.n	80049a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	791b      	ldrb	r3, [r3, #4]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fd fa3f 	bl	8001e10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b089      	sub	sp, #36	@ 0x24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_DAC_ConfigChannel+0x1c>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e042      	b.n	8004a54 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	795b      	ldrb	r3, [r3, #5]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_DAC_ConfigChannel+0x2c>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e03c      	b.n	8004a54 <HAL_DAC_ConfigChannel+0xa6>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2202      	movs	r2, #2
 80049e4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	22c0      	movs	r2, #192	@ 0xc0
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	400a      	ands	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3724      	adds	r7, #36	@ 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a6c:	f7fe fbf4 	bl	8003258 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e099      	b.n	8004bb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a9c:	e00f      	b.n	8004abe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a9e:	f7fe fbdb 	bl	8003258 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d908      	bls.n	8004abe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e078      	b.n	8004bb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e8      	bne.n	8004a9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4b38      	ldr	r3, [pc, #224]	@ (8004bb8 <HAL_DMA_Init+0x158>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d107      	bne.n	8004b28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	4313      	orrs	r3, r2
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d117      	bne.n	8004b82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 faa7 	bl	80050b8 <DMA_CheckFifoParam>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2240      	movs	r2, #64	@ 0x40
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e016      	b.n	8004bb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa60 	bl	8005050 <DMA_CalcBaseAndBitshift>
 8004b90:	4603      	mov	r3, r0
 8004b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b98:	223f      	movs	r2, #63	@ 0x3f
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	f010803f 	.word	0xf010803f

08004bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_DMA_Start_IT+0x26>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e040      	b.n	8004c64 <HAL_DMA_Start_IT+0xa8>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d12f      	bne.n	8004c56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f9f2 	bl	8004ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	223f      	movs	r2, #63	@ 0x3f
 8004c16:	409a      	lsls	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0216 	orr.w	r2, r2, #22
 8004c2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e005      	b.n	8004c62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2280      	movs	r2, #128	@ 0x80
 8004c84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00c      	b.n	8004ca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cbc:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef8 <HAL_DMA_IRQHandler+0x248>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a8e      	ldr	r2, [pc, #568]	@ (8004efc <HAL_DMA_IRQHandler+0x24c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0a9b      	lsrs	r3, r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	2208      	movs	r2, #8
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01a      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0204 	bic.w	r2, r2, #4
 8004d02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	2208      	movs	r2, #8
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d14:	f043 0201 	orr.w	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d20:	2201      	movs	r2, #1
 8004d22:	409a      	lsls	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3e:	2201      	movs	r2, #1
 8004d40:	409a      	lsls	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	2204      	movs	r2, #4
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d74:	2204      	movs	r2, #4
 8004d76:	409a      	lsls	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d80:	f043 0204 	orr.w	r2, r3, #4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d043      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03c      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	2210      	movs	r2, #16
 8004dac:	409a      	lsls	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d018      	beq.n	8004df2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d024      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
 8004dde:	e01f      	b.n	8004e20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01b      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
 8004df0:	e016      	b.n	8004e20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0208 	bic.w	r2, r2, #8
 8004e0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e24:	2220      	movs	r2, #32
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 808f 	beq.w	8004f50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8087 	beq.w	8004f50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e46:	2220      	movs	r2, #32
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d136      	bne.n	8004ec8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0216 	bic.w	r2, r2, #22
 8004e68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_DMA_IRQHandler+0x1da>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0208 	bic.w	r2, r2, #8
 8004e98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9e:	223f      	movs	r2, #63	@ 0x3f
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d07e      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
        }
        return;
 8004ec6:	e079      	b.n	8004fbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01d      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10d      	bne.n	8004f00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d031      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
 8004ef4:	e02c      	b.n	8004f50 <HAL_DMA_IRQHandler+0x2a0>
 8004ef6:	bf00      	nop
 8004ef8:	2000015c 	.word	0x2000015c
 8004efc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d023      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
 8004f10:	e01e      	b.n	8004f50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10f      	bne.n	8004f40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0210 	bic.w	r2, r2, #16
 8004f2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d032      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d022      	beq.n	8004faa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2205      	movs	r2, #5
 8004f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d307      	bcc.n	8004f98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f2      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x2cc>
 8004f96:	e000      	b.n	8004f9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
 8004fba:	e000      	b.n	8004fbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004fbc:	bf00      	nop
    }
  }
}
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fd2:	b2db      	uxtb	r3, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b40      	cmp	r3, #64	@ 0x40
 8005020:	d108      	bne.n	8005034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005032:	e007      	b.n	8005044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
	...

08005050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	3b10      	subs	r3, #16
 8005060:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <DMA_CalcBaseAndBitshift+0x60>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800506a:	4a12      	ldr	r2, [pc, #72]	@ (80050b4 <DMA_CalcBaseAndBitshift+0x64>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d909      	bls.n	8005092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005090:	e007      	b.n	80050a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	aaaaaaab 	.word	0xaaaaaaab
 80050b4:	0800c3cc 	.word	0x0800c3cc

080050b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11f      	bne.n	8005112 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d856      	bhi.n	8005186 <DMA_CheckFifoParam+0xce>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <DMA_CheckFifoParam+0x28>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	08005103 	.word	0x08005103
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	08005187 	.word	0x08005187
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d046      	beq.n	800518a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005100:	e043      	b.n	800518a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800510a:	d140      	bne.n	800518e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005110:	e03d      	b.n	800518e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800511a:	d121      	bne.n	8005160 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d837      	bhi.n	8005192 <DMA_CheckFifoParam+0xda>
 8005122:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <DMA_CheckFifoParam+0x70>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	08005139 	.word	0x08005139
 800512c:	0800513f 	.word	0x0800513f
 8005130:	08005139 	.word	0x08005139
 8005134:	08005151 	.word	0x08005151
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e030      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d025      	beq.n	8005196 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800514e:	e022      	b.n	8005196 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005158:	d11f      	bne.n	800519a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800515e:	e01c      	b.n	800519a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d903      	bls.n	800516e <DMA_CheckFifoParam+0xb6>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d003      	beq.n	8005174 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800516c:	e018      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
      break;
 8005172:	e015      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e00b      	b.n	800519e <DMA_CheckFifoParam+0xe6>
      break;
 8005186:	bf00      	nop
 8005188:	e00a      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      break;
 800518a:	bf00      	nop
 800518c:	e008      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      break;
 800518e:	bf00      	nop
 8005190:	e006      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005192:	bf00      	nop
 8005194:	e004      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005196:	bf00      	nop
 8005198:	e002      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <DMA_CheckFifoParam+0xe8>
      break;
 800519e:	bf00      	nop
    }
  } 
  
  return status; 
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ba:	e16f      	b.n	800549c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2101      	movs	r1, #1
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	4013      	ands	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8161 	beq.w	8005496 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d005      	beq.n	80051ec <HAL_GPIO_Init+0x40>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d130      	bne.n	800524e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	2203      	movs	r2, #3
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005222:	2201      	movs	r2, #1
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	091b      	lsrs	r3, r3, #4
 8005238:	f003 0201 	and.w	r2, r3, #1
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b03      	cmp	r3, #3
 8005258:	d017      	beq.n	800528a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	2203      	movs	r2, #3
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d123      	bne.n	80052de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	08da      	lsrs	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3208      	adds	r2, #8
 800529e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	220f      	movs	r2, #15
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3208      	adds	r2, #8
 80052d8:	6939      	ldr	r1, [r7, #16]
 80052da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2203      	movs	r2, #3
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4013      	ands	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 0203 	and.w	r2, r3, #3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80bb 	beq.w	8005496 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005320:	2300      	movs	r3, #0
 8005322:	60bb      	str	r3, [r7, #8]
 8005324:	4b64      	ldr	r3, [pc, #400]	@ (80054b8 <HAL_GPIO_Init+0x30c>)
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	4a63      	ldr	r2, [pc, #396]	@ (80054b8 <HAL_GPIO_Init+0x30c>)
 800532a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800532e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005330:	4b61      	ldr	r3, [pc, #388]	@ (80054b8 <HAL_GPIO_Init+0x30c>)
 8005332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800533c:	4a5f      	ldr	r2, [pc, #380]	@ (80054bc <HAL_GPIO_Init+0x310>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	3302      	adds	r3, #2
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	220f      	movs	r2, #15
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a57      	ldr	r2, [pc, #348]	@ (80054c0 <HAL_GPIO_Init+0x314>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d031      	beq.n	80053cc <HAL_GPIO_Init+0x220>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a56      	ldr	r2, [pc, #344]	@ (80054c4 <HAL_GPIO_Init+0x318>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d02b      	beq.n	80053c8 <HAL_GPIO_Init+0x21c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a55      	ldr	r2, [pc, #340]	@ (80054c8 <HAL_GPIO_Init+0x31c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d025      	beq.n	80053c4 <HAL_GPIO_Init+0x218>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a54      	ldr	r2, [pc, #336]	@ (80054cc <HAL_GPIO_Init+0x320>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01f      	beq.n	80053c0 <HAL_GPIO_Init+0x214>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a53      	ldr	r2, [pc, #332]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d019      	beq.n	80053bc <HAL_GPIO_Init+0x210>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a52      	ldr	r2, [pc, #328]	@ (80054d4 <HAL_GPIO_Init+0x328>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <HAL_GPIO_Init+0x20c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a51      	ldr	r2, [pc, #324]	@ (80054d8 <HAL_GPIO_Init+0x32c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00d      	beq.n	80053b4 <HAL_GPIO_Init+0x208>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a50      	ldr	r2, [pc, #320]	@ (80054dc <HAL_GPIO_Init+0x330>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <HAL_GPIO_Init+0x204>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a4f      	ldr	r2, [pc, #316]	@ (80054e0 <HAL_GPIO_Init+0x334>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d101      	bne.n	80053ac <HAL_GPIO_Init+0x200>
 80053a8:	2308      	movs	r3, #8
 80053aa:	e010      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053ac:	2309      	movs	r3, #9
 80053ae:	e00e      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053b0:	2307      	movs	r3, #7
 80053b2:	e00c      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053b4:	2306      	movs	r3, #6
 80053b6:	e00a      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053b8:	2305      	movs	r3, #5
 80053ba:	e008      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053bc:	2304      	movs	r3, #4
 80053be:	e006      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053c0:	2303      	movs	r3, #3
 80053c2:	e004      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e002      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_GPIO_Init+0x222>
 80053cc:	2300      	movs	r3, #0
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	f002 0203 	and.w	r2, r2, #3
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	4093      	lsls	r3, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053e0:	4936      	ldr	r1, [pc, #216]	@ (80054bc <HAL_GPIO_Init+0x310>)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	3302      	adds	r3, #2
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ee:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4013      	ands	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005412:	4a34      	ldr	r2, [pc, #208]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005418:	4b32      	ldr	r3, [pc, #200]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	43db      	mvns	r3, r3
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4013      	ands	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800543c:	4a29      	ldr	r2, [pc, #164]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005442:	4b28      	ldr	r3, [pc, #160]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	43db      	mvns	r3, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005466:	4a1f      	ldr	r2, [pc, #124]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800546c:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	43db      	mvns	r3, r3
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005490:	4a14      	ldr	r2, [pc, #80]	@ (80054e4 <HAL_GPIO_Init+0x338>)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	3301      	adds	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f47f ae88 	bne.w	80051bc <HAL_GPIO_Init+0x10>
  }
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40013800 	.word	0x40013800
 80054c0:	40020000 	.word	0x40020000
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40020800 	.word	0x40020800
 80054cc:	40020c00 	.word	0x40020c00
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40021400 	.word	0x40021400
 80054d8:	40021800 	.word	0x40021800
 80054dc:	40021c00 	.word	0x40021c00
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40013c00 	.word	0x40013c00

080054e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
 80054f4:	4613      	mov	r3, r2
 80054f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054f8:	787b      	ldrb	r3, [r7, #1]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005504:	e003      	b.n	800550e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005506:	887b      	ldrh	r3, [r7, #2]
 8005508:	041a      	lsls	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	619a      	str	r2, [r3, #24]
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005522:	4b08      	ldr	r3, [pc, #32]	@ (8005544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d006      	beq.n	800553c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800552e:	4a05      	ldr	r2, [pc, #20]	@ (8005544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	4618      	mov	r0, r3
 8005538:	f7fd f920 	bl	800277c <HAL_GPIO_EXTI_Callback>
  }
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40013c00 	.word	0x40013c00

08005548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e12b      	b.n	80057b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fe18 	bl	80021a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2224      	movs	r2, #36	@ 0x24
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800559a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055ac:	f003 f934 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 80055b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4a81      	ldr	r2, [pc, #516]	@ (80057bc <HAL_I2C_Init+0x274>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d807      	bhi.n	80055cc <HAL_I2C_Init+0x84>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a80      	ldr	r2, [pc, #512]	@ (80057c0 <HAL_I2C_Init+0x278>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bf94      	ite	ls
 80055c4:	2301      	movls	r3, #1
 80055c6:	2300      	movhi	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e006      	b.n	80055da <HAL_I2C_Init+0x92>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a7d      	ldr	r2, [pc, #500]	@ (80057c4 <HAL_I2C_Init+0x27c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	bf94      	ite	ls
 80055d4:	2301      	movls	r3, #1
 80055d6:	2300      	movhi	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e0e7      	b.n	80057b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a78      	ldr	r2, [pc, #480]	@ (80057c8 <HAL_I2C_Init+0x280>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	0c9b      	lsrs	r3, r3, #18
 80055ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a6a      	ldr	r2, [pc, #424]	@ (80057bc <HAL_I2C_Init+0x274>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d802      	bhi.n	800561c <HAL_I2C_Init+0xd4>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3301      	adds	r3, #1
 800561a:	e009      	b.n	8005630 <HAL_I2C_Init+0xe8>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	4a69      	ldr	r2, [pc, #420]	@ (80057cc <HAL_I2C_Init+0x284>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	3301      	adds	r3, #1
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	430b      	orrs	r3, r1
 8005636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005642:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	495c      	ldr	r1, [pc, #368]	@ (80057bc <HAL_I2C_Init+0x274>)
 800564c:	428b      	cmp	r3, r1
 800564e:	d819      	bhi.n	8005684 <HAL_I2C_Init+0x13c>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1e59      	subs	r1, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	fbb1 f3f3 	udiv	r3, r1, r3
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005664:	400b      	ands	r3, r1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_I2C_Init+0x138>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1e59      	subs	r1, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	fbb1 f3f3 	udiv	r3, r1, r3
 8005678:	3301      	adds	r3, #1
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567e:	e051      	b.n	8005724 <HAL_I2C_Init+0x1dc>
 8005680:	2304      	movs	r3, #4
 8005682:	e04f      	b.n	8005724 <HAL_I2C_Init+0x1dc>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d111      	bne.n	80056b0 <HAL_I2C_Init+0x168>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1e58      	subs	r0, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	440b      	add	r3, r1
 800569a:	fbb0 f3f3 	udiv	r3, r0, r3
 800569e:	3301      	adds	r3, #1
 80056a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e012      	b.n	80056d6 <HAL_I2C_Init+0x18e>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1e58      	subs	r0, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	0099      	lsls	r1, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c6:	3301      	adds	r3, #1
 80056c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_I2C_Init+0x196>
 80056da:	2301      	movs	r3, #1
 80056dc:	e022      	b.n	8005724 <HAL_I2C_Init+0x1dc>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10e      	bne.n	8005704 <HAL_I2C_Init+0x1bc>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1e58      	subs	r0, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	440b      	add	r3, r1
 80056f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f8:	3301      	adds	r3, #1
 80056fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005702:	e00f      	b.n	8005724 <HAL_I2C_Init+0x1dc>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1e58      	subs	r0, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	0099      	lsls	r1, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	fbb0 f3f3 	udiv	r3, r0, r3
 800571a:	3301      	adds	r3, #1
 800571c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	6809      	ldr	r1, [r1, #0]
 8005728:	4313      	orrs	r3, r2
 800572a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005752:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6911      	ldr	r1, [r2, #16]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68d2      	ldr	r2, [r2, #12]
 800575e:	4311      	orrs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	430b      	orrs	r3, r1
 8005766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	000186a0 	.word	0x000186a0
 80057c0:	001e847f 	.word	0x001e847f
 80057c4:	003d08ff 	.word	0x003d08ff
 80057c8:	431bde83 	.word	0x431bde83
 80057cc:	10624dd3 	.word	0x10624dd3

080057d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b80      	cmp	r3, #128	@ 0x80
 80057e4:	d103      	bne.n	80057ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
  }
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	@ 0x28
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4603      	mov	r3, r0
 8005808:	817b      	strh	r3, [r7, #10]
 800580a:	460b      	mov	r3, r1
 800580c:	813b      	strh	r3, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005816:	f7fd fd1f 	bl	8003258 <HAL_GetTick>
 800581a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b20      	cmp	r3, #32
 8005826:	f040 8136 	bne.w	8005a96 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800582a:	4b9d      	ldr	r3, [pc, #628]	@ (8005aa0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	4a9c      	ldr	r2, [pc, #624]	@ (8005aa4 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	0a1a      	lsrs	r2, r3, #8
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009a      	lsls	r2, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3b01      	subs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d112      	bne.n	8005876 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
 8005874:	e110      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d0df      	beq.n	8005844 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Mem_Write_DMA+0x9a>
 800588e:	2302      	movs	r3, #2
 8005890:	e102      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d007      	beq.n	80058b8 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2221      	movs	r2, #33	@ 0x21
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2240      	movs	r2, #64	@ 0x40
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80058e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a6c      	ldr	r2, [pc, #432]	@ (8005aa8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80058f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80058fa:	897a      	ldrh	r2, [r7, #10]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005900:	893a      	ldrh	r2, [r7, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80a9 	beq.w	8005a6e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005920:	2b00      	cmp	r3, #0
 8005922:	d02a      	beq.n	800597a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005928:	4a60      	ldr	r2, [pc, #384]	@ (8005aac <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800592a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	4a5f      	ldr	r2, [pc, #380]	@ (8005ab0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005932:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005938:	2200      	movs	r2, #0
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005940:	2200      	movs	r2, #0
 8005942:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005948:	2200      	movs	r2, #0
 800594a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005950:	2200      	movs	r2, #0
 8005952:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	4619      	mov	r1, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3310      	adds	r3, #16
 8005964:	461a      	mov	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	f7ff f927 	bl	8004bbc <HAL_DMA_Start_IT>
 800596e:	4603      	mov	r3, r0
 8005970:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005972:	7efb      	ldrb	r3, [r7, #27]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d166      	bne.n	8005a46 <HAL_I2C_Mem_Write_DMA+0x24e>
 8005978:	e013      	b.n	80059a2 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e07a      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80059a2:	88f8      	ldrh	r0, [r7, #6]
 80059a4:	893a      	ldrh	r2, [r7, #8]
 80059a6:	8979      	ldrh	r1, [r7, #10]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	2323      	movs	r3, #35	@ 0x23
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4603      	mov	r3, r0
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f001 fdc6 	bl	8007544 <I2C_RequestMemoryWrite>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d022      	beq.n	8005a04 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff f952 	bl	8004c6c <HAL_DMA_Abort_IT>
 80059c8:	4603      	mov	r3, r0
 80059ca:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d0:	2200      	movs	r2, #0
 80059d2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e049      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a30:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a40:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e028      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f043 0210 	orr.w	r2, r3, #16
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e014      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000015c 	.word	0x2000015c
 8005aa4:	14f8b589 	.word	0x14f8b589
 8005aa8:	ffff0000 	.word	0xffff0000
 8005aac:	08007841 	.word	0x08007841
 8005ab0:	080079eb 	.word	0x080079eb

08005ab4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08c      	sub	sp, #48	@ 0x30
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	813b      	strh	r3, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ace:	f7fd fbc3 	bl	8003258 <HAL_GetTick>
 8005ad2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 8172 	bne.w	8005dca <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ae6:	4b93      	ldr	r3, [pc, #588]	@ (8005d34 <HAL_I2C_Mem_Read_DMA+0x280>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	08db      	lsrs	r3, r3, #3
 8005aec:	4a92      	ldr	r2, [pc, #584]	@ (8005d38 <HAL_I2C_Mem_Read_DMA+0x284>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	0a1a      	lsrs	r2, r3, #8
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d112      	bne.n	8005b32 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	f043 0220 	orr.w	r2, r3, #32
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e14c      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d0df      	beq.n	8005b00 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_Mem_Read_DMA+0x9a>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e13e      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d007      	beq.n	8005b74 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2222      	movs	r2, #34	@ 0x22
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2240      	movs	r2, #64	@ 0x40
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a62      	ldr	r2, [pc, #392]	@ (8005d3c <HAL_I2C_Mem_Read_DMA+0x288>)
 8005bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005bb6:	897a      	ldrh	r2, [r7, #10]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005bbc:	893a      	ldrh	r2, [r7, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80cc 	beq.w	8005d70 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02d      	beq.n	8005c3c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	4a56      	ldr	r2, [pc, #344]	@ (8005d40 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005be6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	4a55      	ldr	r2, [pc, #340]	@ (8005d44 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005bee:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	2200      	movs	r2, #0
 8005c06:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3310      	adds	r3, #16
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c20:	461a      	mov	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c26:	f7fe ffc9 	bl	8004bbc <HAL_DMA_Start_IT>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005c30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f040 8087 	bne.w	8005d48 <HAL_I2C_Mem_Read_DMA+0x294>
 8005c3a:	e013      	b.n	8005c64 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0b3      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005c64:	88f8      	ldrh	r0, [r7, #6]
 8005c66:	893a      	ldrh	r2, [r7, #8]
 8005c68:	8979      	ldrh	r1, [r7, #10]
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	2323      	movs	r3, #35	@ 0x23
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4603      	mov	r3, r0
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 fcfb 	bl	8007670 <I2C_RequestMemoryRead>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d023      	beq.n	8005cc8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fff1 	bl	8004c6c <HAL_DMA_Abort_IT>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	2200      	movs	r2, #0
 8005c96:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e081      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d108      	bne.n	8005ce2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e007      	b.n	8005cf2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cf0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d1e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	e049      	b.n	8005dc6 <HAL_I2C_Mem_Read_DMA+0x312>
 8005d32:	bf00      	nop
 8005d34:	2000015c 	.word	0x2000015c
 8005d38:	14f8b589 	.word	0x14f8b589
 8005d3c:	ffff0000 	.word	0xffff0000
 8005d40:	08007841 	.word	0x08007841
 8005d44:	080079eb 	.word	0x080079eb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	f043 0210 	orr.w	r2, r3, #16
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e02d      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005d70:	88f8      	ldrh	r0, [r7, #6]
 8005d72:	893a      	ldrh	r2, [r7, #8]
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	2323      	movs	r3, #35	@ 0x23
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4603      	mov	r3, r0
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f001 fc75 	bl	8007670 <I2C_RequestMemoryRead>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e01d      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3728      	adds	r7, #40	@ 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005df4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d003      	beq.n	8005e0c <HAL_I2C_EV_IRQHandler+0x38>
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	f040 80b1 	bne.w	8005f6e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10d      	bne.n	8005e42 <HAL_I2C_EV_IRQHandler+0x6e>
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005e2c:	d003      	beq.n	8005e36 <HAL_I2C_EV_IRQHandler+0x62>
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_EV_IRQHandler+0x66>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <HAL_I2C_EV_IRQHandler+0x68>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f000 8114 	beq.w	800606a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <HAL_I2C_EV_IRQHandler+0x90>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d006      	beq.n	8005e64 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 f86e 	bl	8007f38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fd58 	bl	8006912 <I2C_Master_SB>
 8005e62:	e083      	b.n	8005f6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_I2C_EV_IRQHandler+0xac>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fdcf 	bl	8006a1c <I2C_Master_ADD10>
 8005e7e:	e075      	b.n	8005f6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_I2C_EV_IRQHandler+0xc8>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fdea 	bl	8006a6e <I2C_Master_ADDR>
 8005e9a:	e067      	b.n	8005f6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d036      	beq.n	8005f14 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb4:	f000 80db 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <HAL_I2C_EV_IRQHandler+0x10a>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_I2C_EV_IRQHandler+0x10a>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9cc 	bl	8006274 <I2C_MasterTransmit_TXE>
 8005edc:	e046      	b.n	8005f6c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80c2 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80bc 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	2b21      	cmp	r3, #33	@ 0x21
 8005efa:	d103      	bne.n	8005f04 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa55 	bl	80063ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f02:	e0b4      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b40      	cmp	r3, #64	@ 0x40
 8005f08:	f040 80b1 	bne.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fac3 	bl	8006498 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f12:	e0ac      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f22:	f000 80a4 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <HAL_I2C_EV_IRQHandler+0x178>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_I2C_EV_IRQHandler+0x178>
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fb3f 	bl	80065c8 <I2C_MasterReceive_RXNE>
 8005f4a:	e00f      	b.n	8005f6c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 808b 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8085 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fbea 	bl	800673e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f6a:	e080      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x29a>
 8005f6c:	e07f      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e007      	b.n	8005f90 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d011      	beq.n	8005fbe <HAL_I2C_EV_IRQHandler+0x1ea>
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005fb4:	69b9      	ldr	r1, [r7, #24]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ffa5 	bl	8006f06 <I2C_Slave_ADDR>
 8005fbc:	e05a      	b.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x206>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 ffe0 	bl	8006f98 <I2C_Slave_STOPF>
 8005fd8:	e04c      	b.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b21      	cmp	r3, #33	@ 0x21
 8005fde:	d002      	beq.n	8005fe6 <HAL_I2C_EV_IRQHandler+0x212>
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b29      	cmp	r3, #41	@ 0x29
 8005fe4:	d120      	bne.n	8006028 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00d      	beq.n	800600c <HAL_I2C_EV_IRQHandler+0x238>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_I2C_EV_IRQHandler+0x238>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fec2 	bl	8006d8e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800600a:	e032      	b.n	8006072 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d02d      	beq.n	8006072 <HAL_I2C_EV_IRQHandler+0x29e>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800601c:	2b00      	cmp	r3, #0
 800601e:	d028      	beq.n	8006072 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fef1 	bl	8006e08 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006026:	e024      	b.n	8006072 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <HAL_I2C_EV_IRQHandler+0x27a>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_I2C_EV_IRQHandler+0x27a>
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fefe 	bl	8006e48 <I2C_SlaveReceive_RXNE>
 800604c:	e012      	b.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00d      	beq.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 ff2e 	bl	8006ec4 <I2C_SlaveReceive_BTF>
 8006068:	e004      	b.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006072:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b08a      	sub	sp, #40	@ 0x28
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006092:	2300      	movs	r3, #0
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800609c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00d      	beq.n	80060c4 <HAL_I2C_ER_IRQHandler+0x4a>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00d      	beq.n	80060ea <HAL_I2C_ER_IRQHandler+0x70>
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	f043 0302 	orr.w	r3, r3, #2
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80060e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d03e      	beq.n	8006172 <HAL_I2C_ER_IRQHandler+0xf8>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d039      	beq.n	8006172 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80060fe:	7efb      	ldrb	r3, [r7, #27]
 8006100:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006110:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006118:	7ebb      	ldrb	r3, [r7, #26]
 800611a:	2b20      	cmp	r3, #32
 800611c:	d112      	bne.n	8006144 <HAL_I2C_ER_IRQHandler+0xca>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <HAL_I2C_ER_IRQHandler+0xca>
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	2b21      	cmp	r3, #33	@ 0x21
 8006128:	d008      	beq.n	800613c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800612a:	7cfb      	ldrb	r3, [r7, #19]
 800612c:	2b29      	cmp	r3, #41	@ 0x29
 800612e:	d005      	beq.n	800613c <HAL_I2C_ER_IRQHandler+0xc2>
 8006130:	7cfb      	ldrb	r3, [r7, #19]
 8006132:	2b28      	cmp	r3, #40	@ 0x28
 8006134:	d106      	bne.n	8006144 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b21      	cmp	r3, #33	@ 0x21
 800613a:	d103      	bne.n	8006144 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f85b 	bl	80071f8 <I2C_Slave_AF>
 8006142:	e016      	b.n	8006172 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800614c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006156:	7efb      	ldrb	r3, [r7, #27]
 8006158:	2b10      	cmp	r3, #16
 800615a:	d002      	beq.n	8006162 <HAL_I2C_ER_IRQHandler+0xe8>
 800615c:	7efb      	ldrb	r3, [r7, #27]
 800615e:	2b40      	cmp	r3, #64	@ 0x40
 8006160:	d107      	bne.n	8006172 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006170:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <HAL_I2C_ER_IRQHandler+0x11e>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	f043 0308 	orr.w	r3, r3, #8
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006196:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 f898 	bl	80072e0 <I2C_ITError>
  }
}
 80061b0:	bf00      	nop
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
 800620c:	4613      	mov	r3, r2
 800620e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr

0800621a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006282:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800628a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d150      	bne.n	800633c <I2C_MasterTransmit_TXE+0xc8>
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	2b21      	cmp	r3, #33	@ 0x21
 800629e:	d14d      	bne.n	800633c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d01d      	beq.n	80062e2 <I2C_MasterTransmit_TXE+0x6e>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d01a      	beq.n	80062e2 <I2C_MasterTransmit_TXE+0x6e>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062b2:	d016      	beq.n	80062e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2211      	movs	r2, #17
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff6c 	bl	80061b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062e0:	e060      	b.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006300:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d107      	bne.n	800632c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ff81 	bl	800622c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800632a:	e03b      	b.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff3f 	bl	80061b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800633a:	e033      	b.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b21      	cmp	r3, #33	@ 0x21
 8006340:	d005      	beq.n	800634e <I2C_MasterTransmit_TXE+0xda>
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d12d      	bne.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b22      	cmp	r3, #34	@ 0x22
 800634c:	d12a      	bne.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006366:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006368:	e01c      	b.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b40      	cmp	r3, #64	@ 0x40
 8006374:	d103      	bne.n	800637e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f88e 	bl	8006498 <I2C_MemoryTransmit_TXE_BTF>
}
 800637c:	e012      	b.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80063a2:	e7ff      	b.n	80063a4 <I2C_MasterTransmit_TXE+0x130>
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b21      	cmp	r3, #33	@ 0x21
 80063c4:	d164      	bne.n	8006490 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80063f4:	e04c      	b.n	8006490 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d01d      	beq.n	8006438 <I2C_MasterTransmit_BTF+0x8c>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d01a      	beq.n	8006438 <I2C_MasterTransmit_BTF+0x8c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006408:	d016      	beq.n	8006438 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006418:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2211      	movs	r2, #17
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fec1 	bl	80061b8 <HAL_I2C_MasterTxCpltCallback>
}
 8006436:	e02b      	b.n	8006490 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006446:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006456:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d107      	bne.n	8006482 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fed6 	bl	800622c <HAL_I2C_MemTxCpltCallback>
}
 8006480:	e006      	b.n	8006490 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fe94 	bl	80061b8 <HAL_I2C_MasterTxCpltCallback>
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d11d      	bne.n	80064ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10b      	bne.n	80064d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80064ce:	e077      	b.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	121b      	asrs	r3, r3, #8
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80064ea:	e069      	b.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10b      	bne.n	800650c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800650a:	e059      	b.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006510:	2b02      	cmp	r3, #2
 8006512:	d152      	bne.n	80065ba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b22      	cmp	r3, #34	@ 0x22
 8006518:	d10d      	bne.n	8006536 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006528:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006534:	e044      	b.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d015      	beq.n	800656c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b21      	cmp	r3, #33	@ 0x21
 8006544:	d112      	bne.n	800656c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800656a:	e029      	b.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d124      	bne.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b21      	cmp	r3, #33	@ 0x21
 800657a:	d121      	bne.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800658a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800659a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fe3a 	bl	800622c <HAL_I2C_MemTxCpltCallback>
}
 80065b8:	e002      	b.n	80065c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff f908 	bl	80057d0 <I2C_Flush_DR>
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b22      	cmp	r3, #34	@ 0x22
 80065da:	f040 80ac 	bne.w	8006736 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d921      	bls.n	8006630 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b03      	cmp	r3, #3
 800661a:	f040 808c 	bne.w	8006736 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800662c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800662e:	e082      	b.n	8006736 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	2b02      	cmp	r3, #2
 8006636:	d075      	beq.n	8006724 <I2C_MasterReceive_RXNE+0x15c>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d002      	beq.n	8006644 <I2C_MasterReceive_RXNE+0x7c>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d16f      	bne.n	8006724 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fc17 	bl	8007e78 <I2C_WaitOnSTOPRequestThroughIT>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d142      	bne.n	80066d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800666e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b40      	cmp	r3, #64	@ 0x40
 80066a8:	d10a      	bne.n	80066c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fdc0 	bl	800623e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066be:	e03a      	b.n	8006736 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2212      	movs	r2, #18
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fd7b 	bl	80061ca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066d4:	e02f      	b.n	8006736 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fd97 	bl	8006250 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006722:	e008      	b.n	8006736 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006732:	605a      	str	r2, [r3, #4]
}
 8006734:	e7ff      	b.n	8006736 <I2C_MasterReceive_RXNE+0x16e>
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b04      	cmp	r3, #4
 8006754:	d11b      	bne.n	800678e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006764:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800678c:	e0bd      	b.n	800690a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d129      	bne.n	80067ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d00a      	beq.n	80067c4 <I2C_MasterReceive_BTF+0x86>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d007      	beq.n	80067c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80067ea:	e08e      	b.n	800690a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d176      	bne.n	80068e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d002      	beq.n	8006802 <I2C_MasterReceive_BTF+0xc4>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d108      	bne.n	8006814 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e019      	b.n	8006848 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d002      	beq.n	8006820 <I2C_MasterReceive_BTF+0xe2>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d108      	bne.n	8006832 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e00a      	b.n	8006848 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b10      	cmp	r3, #16
 8006836:	d007      	beq.n	8006848 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006846:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80068a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	d10a      	bne.n	80068ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fcb9 	bl	800623e <HAL_I2C_MemRxCpltCallback>
}
 80068cc:	e01d      	b.n	800690a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2212      	movs	r2, #18
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fc74 	bl	80061ca <HAL_I2C_MasterRxCpltCallback>
}
 80068e2:	e012      	b.n	800690a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b40      	cmp	r3, #64	@ 0x40
 8006924:	d117      	bne.n	8006956 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	b2db      	uxtb	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800693e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006940:	e067      	b.n	8006a12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	611a      	str	r2, [r3, #16]
}
 8006954:	e05d      	b.n	8006a12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800695e:	d133      	bne.n	80069c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b21      	cmp	r3, #33	@ 0x21
 800696a:	d109      	bne.n	8006980 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006970:	b2db      	uxtb	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800697c:	611a      	str	r2, [r3, #16]
 800697e:	e008      	b.n	8006992 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <I2C_Master_SB+0x92>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d108      	bne.n	80069b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d032      	beq.n	8006a12 <I2C_Master_SB+0x100>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d02d      	beq.n	8006a12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069c4:	605a      	str	r2, [r3, #4]
}
 80069c6:	e024      	b.n	8006a12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10e      	bne.n	80069ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	11db      	asrs	r3, r3, #7
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0306 	and.w	r3, r3, #6
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f063 030f 	orn	r3, r3, #15
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	611a      	str	r2, [r3, #16]
}
 80069ec:	e011      	b.n	8006a12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10d      	bne.n	8006a12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	11db      	asrs	r3, r3, #7
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 0306 	and.w	r3, r3, #6
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f063 030e 	orn	r3, r3, #14
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	611a      	str	r2, [r3, #16]
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <I2C_Master_ADD10+0x26>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <I2C_Master_ADD10+0x48>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a62:	605a      	str	r2, [r3, #4]
  }
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b091      	sub	sp, #68	@ 0x44
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b22      	cmp	r3, #34	@ 0x22
 8006a96:	f040 8169 	bne.w	8006d6c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <I2C_Master_ADDR+0x54>
 8006aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006aa6:	2b40      	cmp	r3, #64	@ 0x40
 8006aa8:	d10b      	bne.n	8006ac2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	e160      	b.n	8006d84 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d11d      	bne.n	8006b06 <I2C_Master_ADDR+0x98>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ad2:	d118      	bne.n	8006b06 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006af8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b04:	e13e      	b.n	8006d84 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d113      	bne.n	8006b38 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b10:	2300      	movs	r3, #0
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e115      	b.n	8006d64 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	f040 808a 	bne.w	8006c58 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b4a:	d137      	bne.n	8006bbc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b6a:	d113      	bne.n	8006b94 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b7a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	e0e7      	b.n	8006d64 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	623b      	str	r3, [r7, #32]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	623b      	str	r3, [r7, #32]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e0d3      	b.n	8006d64 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d02e      	beq.n	8006c20 <I2C_Master_ADDR+0x1b2>
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d02b      	beq.n	8006c20 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bca:	2b12      	cmp	r3, #18
 8006bcc:	d102      	bne.n	8006bd4 <I2C_Master_ADDR+0x166>
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d125      	bne.n	8006c20 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d00e      	beq.n	8006bf8 <I2C_Master_ADDR+0x18a>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d00b      	beq.n	8006bf8 <I2C_Master_ADDR+0x18a>
 8006be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d008      	beq.n	8006bf8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e007      	b.n	8006c08 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c06:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	e0a1      	b.n	8006d64 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e085      	b.n	8006d64 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d14d      	bne.n	8006cfe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d016      	beq.n	8006c96 <I2C_Master_ADDR+0x228>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d013      	beq.n	8006c96 <I2C_Master_ADDR+0x228>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d010      	beq.n	8006c96 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c82:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	e007      	b.n	8006ca6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ca4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb4:	d117      	bne.n	8006ce6 <I2C_Master_ADDR+0x278>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cbc:	d00b      	beq.n	8006cd6 <I2C_Master_ADDR+0x268>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d008      	beq.n	8006cd6 <I2C_Master_ADDR+0x268>
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d005      	beq.n	8006cd6 <I2C_Master_ADDR+0x268>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d002      	beq.n	8006cd6 <I2C_Master_ADDR+0x268>
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d107      	bne.n	8006ce6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ce4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	e032      	b.n	8006d64 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d0c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d1c:	d117      	bne.n	8006d4e <I2C_Master_ADDR+0x2e0>
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d24:	d00b      	beq.n	8006d3e <I2C_Master_ADDR+0x2d0>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d008      	beq.n	8006d3e <I2C_Master_ADDR+0x2d0>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d005      	beq.n	8006d3e <I2C_Master_ADDR+0x2d0>
 8006d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d002      	beq.n	8006d3e <I2C_Master_ADDR+0x2d0>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d107      	bne.n	8006d4e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d6a:	e00b      	b.n	8006d84 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
}
 8006d82:	e7ff      	b.n	8006d84 <I2C_Master_ADDR+0x316>
 8006d84:	bf00      	nop
 8006d86:	3744      	adds	r7, #68	@ 0x44
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02b      	beq.n	8006e00 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d114      	bne.n	8006e00 <I2C_SlaveTransmit_TXE+0x72>
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b29      	cmp	r3, #41	@ 0x29
 8006dda:	d111      	bne.n	8006e00 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2221      	movs	r2, #33	@ 0x21
 8006df0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2228      	movs	r2, #40	@ 0x28
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff f9ee 	bl	80061dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d011      	beq.n	8006e3e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02c      	beq.n	8006ebc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d114      	bne.n	8006ebc <I2C_SlaveReceive_RXNE+0x74>
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e96:	d111      	bne.n	8006ebc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2222      	movs	r2, #34	@ 0x22
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2228      	movs	r2, #40	@ 0x28
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff f999 	bl	80061ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d012      	beq.n	8006efc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f20:	2b28      	cmp	r3, #40	@ 0x28
 8006f22:	d125      	bne.n	8006f70 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f32:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	81bb      	strh	r3, [r7, #12]
 8006f52:	e002      	b.n	8006f5a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f62:	89ba      	ldrh	r2, [r7, #12]
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff f949 	bl	8006200 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f6e:	e00e      	b.n	8006f8e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f70:	2300      	movs	r3, #0
 8006f72:	60bb      	str	r3, [r7, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fb6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fe4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff4:	d172      	bne.n	80070dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2b22      	cmp	r3, #34	@ 0x22
 8006ffa:	d002      	beq.n	8007002 <I2C_Slave_STOPF+0x6a>
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007000:	d135      	bne.n	800706e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	f043 0204 	orr.w	r2, r3, #4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007034:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd ffc2 	bl	8004fc4 <HAL_DMA_GetState>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d049      	beq.n	80070da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	4a69      	ldr	r2, [pc, #420]	@ (80071f0 <I2C_Slave_STOPF+0x258>)
 800704c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd fe0a 	bl	8004c6c <HAL_DMA_Abort_IT>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d03d      	beq.n	80070da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800706c:	e035      	b.n	80070da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	f043 0204 	orr.w	r2, r3, #4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fd ff8c 	bl	8004fc4 <HAL_DMA_GetState>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d014      	beq.n	80070dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b6:	4a4e      	ldr	r2, [pc, #312]	@ (80071f0 <I2C_Slave_STOPF+0x258>)
 80070b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fd fdd4 	bl	8004c6c <HAL_DMA_Abort_IT>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	e000      	b.n	80070dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d03e      	beq.n	8007164 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d112      	bne.n	800711a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	d112      	bne.n	800714e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8b7 	bl	80072e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007172:	e039      	b.n	80071e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	2b2a      	cmp	r3, #42	@ 0x2a
 8007178:	d109      	bne.n	800718e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2228      	movs	r2, #40	@ 0x28
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff f830 	bl	80061ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b28      	cmp	r3, #40	@ 0x28
 8007198:	d111      	bne.n	80071be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a15      	ldr	r2, [pc, #84]	@ (80071f4 <I2C_Slave_STOPF+0x25c>)
 800719e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff f82f 	bl	800621a <HAL_I2C_ListenCpltCallback>
}
 80071bc:	e014      	b.n	80071e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	2b22      	cmp	r3, #34	@ 0x22
 80071c4:	d002      	beq.n	80071cc <I2C_Slave_STOPF+0x234>
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b22      	cmp	r3, #34	@ 0x22
 80071ca:	d10d      	bne.n	80071e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff f803 	bl	80061ee <HAL_I2C_SlaveRxCpltCallback>
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	08007a65 	.word	0x08007a65
 80071f4:	ffff0000 	.word	0xffff0000

080071f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007206:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b08      	cmp	r3, #8
 8007212:	d002      	beq.n	800721a <I2C_Slave_AF+0x22>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b20      	cmp	r3, #32
 8007218:	d129      	bne.n	800726e <I2C_Slave_AF+0x76>
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b28      	cmp	r3, #40	@ 0x28
 800721e:	d126      	bne.n	800726e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a2e      	ldr	r2, [pc, #184]	@ (80072dc <I2C_Slave_AF+0xe4>)
 8007224:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007234:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800723e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800724e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fe ffd7 	bl	800621a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800726c:	e031      	b.n	80072d2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b21      	cmp	r3, #33	@ 0x21
 8007272:	d129      	bne.n	80072c8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a19      	ldr	r2, [pc, #100]	@ (80072dc <I2C_Slave_AF+0xe4>)
 8007278:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2221      	movs	r2, #33	@ 0x21
 800727e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800729e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80072a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072b8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fe fa88 	bl	80057d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fe ff8b 	bl	80061dc <HAL_I2C_SlaveTxCpltCallback>
}
 80072c6:	e004      	b.n	80072d2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80072d0:	615a      	str	r2, [r3, #20]
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	ffff0000 	.word	0xffff0000

080072e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d002      	beq.n	8007304 <I2C_ITError+0x24>
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b40      	cmp	r3, #64	@ 0x40
 8007302:	d10a      	bne.n	800731a <I2C_ITError+0x3a>
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b22      	cmp	r3, #34	@ 0x22
 8007308:	d107      	bne.n	800731a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007318:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007320:	2b28      	cmp	r3, #40	@ 0x28
 8007322:	d107      	bne.n	8007334 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2228      	movs	r2, #40	@ 0x28
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007332:	e015      	b.n	8007360 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800733e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007342:	d00a      	beq.n	800735a <I2C_ITError+0x7a>
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b60      	cmp	r3, #96	@ 0x60
 8007348:	d007      	beq.n	800735a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800736a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800736e:	d162      	bne.n	8007436 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800737e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007384:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d020      	beq.n	80073d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007392:	4a6a      	ldr	r2, [pc, #424]	@ (800753c <I2C_ITError+0x25c>)
 8007394:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd fc66 	bl	8004c6c <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8089 	beq.w	80074ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073ca:	4610      	mov	r0, r2
 80073cc:	4798      	blx	r3
 80073ce:	e074      	b.n	80074ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d4:	4a59      	ldr	r2, [pc, #356]	@ (800753c <I2C_ITError+0x25c>)
 80073d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fd fc45 	bl	8004c6c <HAL_DMA_Abort_IT>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d068      	beq.n	80074ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d10b      	bne.n	800740e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
 8007434:	e041      	b.n	80074ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b60      	cmp	r3, #96	@ 0x60
 8007440:	d125      	bne.n	800748e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745a:	2b40      	cmp	r3, #64	@ 0x40
 800745c:	d10b      	bne.n	8007476 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fe feeb 	bl	8006262 <HAL_I2C_AbortCpltCallback>
 800748c:	e015      	b.n	80074ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007498:	2b40      	cmp	r3, #64	@ 0x40
 800749a:	d10b      	bne.n	80074b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fe fecb 	bl	8006250 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10e      	bne.n	80074e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80074f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b04      	cmp	r3, #4
 800750a:	d113      	bne.n	8007534 <I2C_ITError+0x254>
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b28      	cmp	r3, #40	@ 0x28
 8007510:	d110      	bne.n	8007534 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a0a      	ldr	r2, [pc, #40]	@ (8007540 <I2C_ITError+0x260>)
 8007516:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fe fe73 	bl	800621a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	08007a65 	.word	0x08007a65
 8007540:	ffff0000 	.word	0xffff0000

08007544 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	461a      	mov	r2, r3
 8007552:	4603      	mov	r3, r0
 8007554:	817b      	strh	r3, [r7, #10]
 8007556:	460b      	mov	r3, r1
 8007558:	813b      	strh	r3, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800756c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	2200      	movs	r2, #0
 8007576:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fb1a 	bl	8007bb4 <I2C_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00d      	beq.n	80075a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007594:	d103      	bne.n	800759e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800759c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e05f      	b.n	8007662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075a2:	897b      	ldrh	r3, [r7, #10]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80075b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	6a3a      	ldr	r2, [r7, #32]
 80075b6:	492d      	ldr	r1, [pc, #180]	@ (800766c <I2C_RequestMemoryWrite+0x128>)
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fb75 	bl	8007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e04c      	b.n	8007662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e0:	6a39      	ldr	r1, [r7, #32]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fc00 	bl	8007de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d107      	bne.n	8007606 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e02b      	b.n	8007662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d105      	bne.n	800761c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007610:	893b      	ldrh	r3, [r7, #8]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	611a      	str	r2, [r3, #16]
 800761a:	e021      	b.n	8007660 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800761c:	893b      	ldrh	r3, [r7, #8]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	b29b      	uxth	r3, r3
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800762a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800762c:	6a39      	ldr	r1, [r7, #32]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fbda 	bl	8007de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00d      	beq.n	8007656 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	2b04      	cmp	r3, #4
 8007640:	d107      	bne.n	8007652 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e005      	b.n	8007662 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007656:	893b      	ldrh	r3, [r7, #8]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	00010002 	.word	0x00010002

08007670 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af02      	add	r7, sp, #8
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4603      	mov	r3, r0
 8007680:	817b      	strh	r3, [r7, #10]
 8007682:	460b      	mov	r3, r1
 8007684:	813b      	strh	r3, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007698:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fa7c 	bl	8007bb4 <I2C_WaitOnFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00d      	beq.n	80076de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d0:	d103      	bne.n	80076da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e0aa      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076de:	897b      	ldrh	r3, [r7, #10]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	6a3a      	ldr	r2, [r7, #32]
 80076f2:	4952      	ldr	r1, [pc, #328]	@ (800783c <I2C_RequestMemoryRead+0x1cc>)
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fad7 	bl	8007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e097      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800771c:	6a39      	ldr	r1, [r7, #32]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fb62 	bl	8007de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00d      	beq.n	8007746 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	2b04      	cmp	r3, #4
 8007730:	d107      	bne.n	8007742 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e076      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d105      	bne.n	8007758 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800774c:	893b      	ldrh	r3, [r7, #8]
 800774e:	b2da      	uxtb	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	611a      	str	r2, [r3, #16]
 8007756:	e021      	b.n	800779c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007758:	893b      	ldrh	r3, [r7, #8]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	b29b      	uxth	r3, r3
 800775e:	b2da      	uxtb	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007768:	6a39      	ldr	r1, [r7, #32]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fb3c 	bl	8007de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00d      	beq.n	8007792 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777a:	2b04      	cmp	r3, #4
 800777c:	d107      	bne.n	800778e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800778c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e050      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007792:	893b      	ldrh	r3, [r7, #8]
 8007794:	b2da      	uxtb	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800779c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800779e:	6a39      	ldr	r1, [r7, #32]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fb21 	bl	8007de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00d      	beq.n	80077c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d107      	bne.n	80077c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e035      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	2200      	movs	r2, #0
 80077e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f9e5 	bl	8007bb4 <I2C_WaitOnFlagUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077fe:	d103      	bne.n	8007808 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007806:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e013      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800780c:	897b      	ldrh	r3, [r7, #10]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	b2da      	uxtb	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	6a3a      	ldr	r2, [r7, #32]
 8007820:	4906      	ldr	r1, [pc, #24]	@ (800783c <I2C_RequestMemoryRead+0x1cc>)
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fa40 	bl	8007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	00010002 	.word	0x00010002

08007840 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007854:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800785c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007872:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007880:	2200      	movs	r2, #0
 8007882:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007890:	2200      	movs	r2, #0
 8007892:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800789a:	2b21      	cmp	r3, #33	@ 0x21
 800789c:	d007      	beq.n	80078ae <I2C_DMAXferCplt+0x6e>
 800789e:	7cfb      	ldrb	r3, [r7, #19]
 80078a0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80078a4:	2b22      	cmp	r3, #34	@ 0x22
 80078a6:	d131      	bne.n	800790c <I2C_DMAXferCplt+0xcc>
 80078a8:	7cbb      	ldrb	r3, [r7, #18]
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d12e      	bne.n	800790c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2200      	movs	r2, #0
 80078c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078c4:	7cfb      	ldrb	r3, [r7, #19]
 80078c6:	2b29      	cmp	r3, #41	@ 0x29
 80078c8:	d10a      	bne.n	80078e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2221      	movs	r2, #33	@ 0x21
 80078ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2228      	movs	r2, #40	@ 0x28
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078d8:	6978      	ldr	r0, [r7, #20]
 80078da:	f7fe fc7f 	bl	80061dc <HAL_I2C_SlaveTxCpltCallback>
 80078de:	e00c      	b.n	80078fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078e0:	7cfb      	ldrb	r3, [r7, #19]
 80078e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e4:	d109      	bne.n	80078fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2222      	movs	r2, #34	@ 0x22
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2228      	movs	r2, #40	@ 0x28
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078f4:	6978      	ldr	r0, [r7, #20]
 80078f6:	f7fe fc7a 	bl	80061ee <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007908:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800790a:	e06a      	b.n	80079e2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d064      	beq.n	80079e2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b01      	cmp	r3, #1
 8007920:	d107      	bne.n	8007932 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007930:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007940:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007948:	d009      	beq.n	800795e <I2C_DMAXferCplt+0x11e>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d006      	beq.n	800795e <I2C_DMAXferCplt+0x11e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007956:	d002      	beq.n	800795e <I2C_DMAXferCplt+0x11e>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b20      	cmp	r3, #32
 800795c:	d107      	bne.n	800796e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800796c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800797c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800798c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2200      	movs	r2, #0
 8007992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800799c:	6978      	ldr	r0, [r7, #20]
 800799e:	f7fe fc57 	bl	8006250 <HAL_I2C_ErrorCallback>
}
 80079a2:	e01e      	b.n	80079e2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b40      	cmp	r3, #64	@ 0x40
 80079b6:	d10a      	bne.n	80079ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80079c6:	6978      	ldr	r0, [r7, #20]
 80079c8:	f7fe fc39 	bl	800623e <HAL_I2C_MemRxCpltCallback>
}
 80079cc:	e009      	b.n	80079e2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2212      	movs	r2, #18
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80079dc:	6978      	ldr	r0, [r7, #20]
 80079de:	f7fe fbf4 	bl	80061ca <HAL_I2C_MasterRxCpltCallback>
}
 80079e2:	bf00      	nop
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a04:	2200      	movs	r2, #0
 8007a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	2200      	movs	r2, #0
 8007a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fd fae0 	bl	8004fde <HAL_DMA_GetError>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d01b      	beq.n	8007a5c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a32:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4e:	f043 0210 	orr.w	r2, r3, #16
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7fe fbfa 	bl	8006250 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8007bac <I2C_DMAAbort+0x148>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb0 <I2C_DMAAbort+0x14c>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	0a1a      	lsrs	r2, r3, #8
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	00da      	lsls	r2, r3, #3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007aaa:	e00a      	b.n	8007ac2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac0:	d0ea      	beq.n	8007a98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ace:	2200      	movs	r2, #0
 8007ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ade:	2200      	movs	r2, #0
 8007ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2200      	movs	r2, #0
 8007af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b04:	2200      	movs	r2, #0
 8007b06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b14:	2200      	movs	r2, #0
 8007b16:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0201 	bic.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b60      	cmp	r3, #96	@ 0x60
 8007b32:	d10e      	bne.n	8007b52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b4a:	6978      	ldr	r0, [r7, #20]
 8007b4c:	f7fe fb89 	bl	8006262 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b50:	e027      	b.n	8007ba2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b52:	7cfb      	ldrb	r3, [r7, #19]
 8007b54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b58:	2b28      	cmp	r3, #40	@ 0x28
 8007b5a:	d117      	bne.n	8007b8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2228      	movs	r2, #40	@ 0x28
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007b8a:	e007      	b.n	8007b9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007b9c:	6978      	ldr	r0, [r7, #20]
 8007b9e:	f7fe fb57 	bl	8006250 <HAL_I2C_ErrorCallback>
}
 8007ba2:	bf00      	nop
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000015c 	.word	0x2000015c
 8007bb0:	14f8b589 	.word	0x14f8b589

08007bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bc4:	e048      	b.n	8007c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bcc:	d044      	beq.n	8007c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bce:	f7fb fb43 	bl	8003258 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d302      	bcc.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d139      	bne.n	8007c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10d      	bne.n	8007c0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	43da      	mvns	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bf0c      	ite	eq
 8007c00:	2301      	moveq	r3, #1
 8007c02:	2300      	movne	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	461a      	mov	r2, r3
 8007c08:	e00c      	b.n	8007c24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	43da      	mvns	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4013      	ands	r3, r2
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d116      	bne.n	8007c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e023      	b.n	8007ca0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d10d      	bne.n	8007c7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	43da      	mvns	r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	e00c      	b.n	8007c98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	43da      	mvns	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d093      	beq.n	8007bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cb6:	e071      	b.n	8007d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc6:	d123      	bne.n	8007d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfc:	f043 0204 	orr.w	r2, r3, #4
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e067      	b.n	8007de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d041      	beq.n	8007d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d18:	f7fb fa9e 	bl	8003258 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d302      	bcc.n	8007d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d136      	bne.n	8007d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d10c      	bne.n	8007d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	43da      	mvns	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4013      	ands	r3, r2
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bf14      	ite	ne
 8007d4a:	2301      	movne	r3, #1
 8007d4c:	2300      	moveq	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	e00b      	b.n	8007d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	43da      	mvns	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d016      	beq.n	8007d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d88:	f043 0220 	orr.w	r2, r3, #32
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e021      	b.n	8007de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	0c1b      	lsrs	r3, r3, #16
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d10c      	bne.n	8007dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	43da      	mvns	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4013      	ands	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf14      	ite	ne
 8007db8:	2301      	movne	r3, #1
 8007dba:	2300      	moveq	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	e00b      	b.n	8007dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	43da      	mvns	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bf14      	ite	ne
 8007dd2:	2301      	movne	r3, #1
 8007dd4:	2300      	moveq	r3, #0
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f47f af6d 	bne.w	8007cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007df4:	e034      	b.n	8007e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f870 	bl	8007edc <I2C_IsAcknowledgeFailed>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e034      	b.n	8007e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d028      	beq.n	8007e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0e:	f7fb fa23 	bl	8003258 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d11d      	bne.n	8007e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2e:	2b80      	cmp	r3, #128	@ 0x80
 8007e30:	d016      	beq.n	8007e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4c:	f043 0220 	orr.w	r2, r3, #32
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e007      	b.n	8007e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6a:	2b80      	cmp	r3, #128	@ 0x80
 8007e6c:	d1c3      	bne.n	8007df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e84:	4b13      	ldr	r3, [pc, #76]	@ (8007ed4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	08db      	lsrs	r3, r3, #3
 8007e8a:	4a13      	ldr	r2, [pc, #76]	@ (8007ed8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e90:	0a1a      	lsrs	r2, r3, #8
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d107      	bne.n	8007eb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e008      	b.n	8007ec8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ec4:	d0e9      	beq.n	8007e9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	2000015c 	.word	0x2000015c
 8007ed8:	14f8b589 	.word	0x14f8b589

08007edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ef2:	d11b      	bne.n	8007f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	f043 0204 	orr.w	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007f48:	d103      	bne.n	8007f52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f50:	e007      	b.n	8007f62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f56:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007f5a:	d102      	bne.n	8007f62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2208      	movs	r2, #8
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08a      	sub	sp, #40	@ 0x28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e23b      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d050      	beq.n	800802c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 030c 	and.w	r3, r3, #12
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d00c      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f96:	4b9b      	ldr	r3, [pc, #620]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d112      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fa2:	4b98      	ldr	r3, [pc, #608]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fae:	d10b      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb0:	4b94      	ldr	r3, [pc, #592]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d036      	beq.n	800802a <HAL_RCC_OscConfig+0xbe>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d132      	bne.n	800802a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e216      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	4b8e      	ldr	r3, [pc, #568]	@ (8008208 <HAL_RCC_OscConfig+0x29c>)
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d013      	beq.n	8008002 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fda:	f7fb f93d 	bl	8003258 <HAL_GetTick>
 8007fde:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fe0:	e008      	b.n	8007ff4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fe2:	f7fb f939 	bl	8003258 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b64      	cmp	r3, #100	@ 0x64
 8007fee:	d901      	bls.n	8007ff4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e200      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff4:	4b83      	ldr	r3, [pc, #524]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0f0      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x76>
 8008000:	e014      	b.n	800802c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008002:	f7fb f929 	bl	8003258 <HAL_GetTick>
 8008006:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008008:	e008      	b.n	800801c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800800a:	f7fb f925 	bl	8003258 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b64      	cmp	r3, #100	@ 0x64
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e1ec      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800801c:	4b79      	ldr	r3, [pc, #484]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f0      	bne.n	800800a <HAL_RCC_OscConfig+0x9e>
 8008028:	e000      	b.n	800802c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800802a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d077      	beq.n	8008128 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008038:	4b72      	ldr	r3, [pc, #456]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 030c 	and.w	r3, r3, #12
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008044:	4b6f      	ldr	r3, [pc, #444]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800804c:	2b08      	cmp	r3, #8
 800804e:	d126      	bne.n	800809e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008050:	4b6c      	ldr	r3, [pc, #432]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d120      	bne.n	800809e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800805c:	4b69      	ldr	r3, [pc, #420]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <HAL_RCC_OscConfig+0x108>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d001      	beq.n	8008074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e1c0      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008074:	4b63      	ldr	r3, [pc, #396]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	21f8      	movs	r1, #248	@ 0xf8
 8008082:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008084:	69b9      	ldr	r1, [r7, #24]
 8008086:	fa91 f1a1 	rbit	r1, r1
 800808a:	6179      	str	r1, [r7, #20]
  return result;
 800808c:	6979      	ldr	r1, [r7, #20]
 800808e:	fab1 f181 	clz	r1, r1
 8008092:	b2c9      	uxtb	r1, r1
 8008094:	408b      	lsls	r3, r1
 8008096:	495b      	ldr	r1, [pc, #364]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 8008098:	4313      	orrs	r3, r2
 800809a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800809c:	e044      	b.n	8008128 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02a      	beq.n	80080fc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080a6:	4b59      	ldr	r3, [pc, #356]	@ (800820c <HAL_RCC_OscConfig+0x2a0>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ac:	f7fb f8d4 	bl	8003258 <HAL_GetTick>
 80080b0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080b4:	f7fb f8d0 	bl	8003258 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e197      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d2:	4b4c      	ldr	r3, [pc, #304]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	21f8      	movs	r1, #248	@ 0xf8
 80080e0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e2:	6939      	ldr	r1, [r7, #16]
 80080e4:	fa91 f1a1 	rbit	r1, r1
 80080e8:	60f9      	str	r1, [r7, #12]
  return result;
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	fab1 f181 	clz	r1, r1
 80080f0:	b2c9      	uxtb	r1, r1
 80080f2:	408b      	lsls	r3, r1
 80080f4:	4943      	ldr	r1, [pc, #268]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	600b      	str	r3, [r1, #0]
 80080fa:	e015      	b.n	8008128 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080fc:	4b43      	ldr	r3, [pc, #268]	@ (800820c <HAL_RCC_OscConfig+0x2a0>)
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008102:	f7fb f8a9 	bl	8003258 <HAL_GetTick>
 8008106:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008108:	e008      	b.n	800811c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800810a:	f7fb f8a5 	bl	8003258 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e16c      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800811c:	4b39      	ldr	r3, [pc, #228]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f0      	bne.n	800810a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d030      	beq.n	8008196 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d016      	beq.n	800816a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800813c:	4b34      	ldr	r3, [pc, #208]	@ (8008210 <HAL_RCC_OscConfig+0x2a4>)
 800813e:	2201      	movs	r2, #1
 8008140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008142:	f7fb f889 	bl	8003258 <HAL_GetTick>
 8008146:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800814a:	f7fb f885 	bl	8003258 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e14c      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800815c:	4b29      	ldr	r3, [pc, #164]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 800815e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0f0      	beq.n	800814a <HAL_RCC_OscConfig+0x1de>
 8008168:	e015      	b.n	8008196 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800816a:	4b29      	ldr	r3, [pc, #164]	@ (8008210 <HAL_RCC_OscConfig+0x2a4>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008170:	f7fb f872 	bl	8003258 <HAL_GetTick>
 8008174:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008178:	f7fb f86e 	bl	8003258 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e135      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800818a:	4b1e      	ldr	r3, [pc, #120]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 800818c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f0      	bne.n	8008178 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8087 	beq.w	80082b2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081a4:	2300      	movs	r3, #0
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081aa:	4b16      	ldr	r3, [pc, #88]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80081ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d110      	bne.n	80081d8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80081bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081be:	4a11      	ldr	r2, [pc, #68]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80081c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80081c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <HAL_RCC_OscConfig+0x298>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008214 <HAL_RCC_OscConfig+0x2a8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008214 <HAL_RCC_OscConfig+0x2a8>)
 80081de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008214 <HAL_RCC_OscConfig+0x2a8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d122      	bne.n	8008236 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081f0:	4b08      	ldr	r3, [pc, #32]	@ (8008214 <HAL_RCC_OscConfig+0x2a8>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a07      	ldr	r2, [pc, #28]	@ (8008214 <HAL_RCC_OscConfig+0x2a8>)
 80081f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081fc:	f7fb f82c 	bl	8003258 <HAL_GetTick>
 8008200:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008202:	e012      	b.n	800822a <HAL_RCC_OscConfig+0x2be>
 8008204:	40023800 	.word	0x40023800
 8008208:	40023802 	.word	0x40023802
 800820c:	42470000 	.word	0x42470000
 8008210:	42470e80 	.word	0x42470e80
 8008214:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008218:	f7fb f81e 	bl	8003258 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e0e5      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800822a:	4b75      	ldr	r3, [pc, #468]	@ (8008400 <HAL_RCC_OscConfig+0x494>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f0      	beq.n	8008218 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	4b72      	ldr	r3, [pc, #456]	@ (8008404 <HAL_RCC_OscConfig+0x498>)
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d015      	beq.n	8008274 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008248:	f7fb f806 	bl	8003258 <HAL_GetTick>
 800824c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800824e:	e00a      	b.n	8008266 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008250:	f7fb f802 	bl	8003258 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825e:	4293      	cmp	r3, r2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e0c7      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008266:	4b68      	ldr	r3, [pc, #416]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 8008268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0ee      	beq.n	8008250 <HAL_RCC_OscConfig+0x2e4>
 8008272:	e014      	b.n	800829e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008274:	f7fa fff0 	bl	8003258 <HAL_GetTick>
 8008278:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800827a:	e00a      	b.n	8008292 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800827c:	f7fa ffec 	bl	8003258 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800828a:	4293      	cmp	r3, r2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e0b1      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008292:	4b5d      	ldr	r3, [pc, #372]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1ee      	bne.n	800827c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800829e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d105      	bne.n	80082b2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082a6:	4b58      	ldr	r3, [pc, #352]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082aa:	4a57      	ldr	r2, [pc, #348]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 80082ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 809c 	beq.w	80083f4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082bc:	4b52      	ldr	r3, [pc, #328]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 030c 	and.w	r3, r3, #12
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d061      	beq.n	800838c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d146      	bne.n	800835e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082d0:	4b4e      	ldr	r3, [pc, #312]	@ (800840c <HAL_RCC_OscConfig+0x4a0>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082d6:	f7fa ffbf 	bl	8003258 <HAL_GetTick>
 80082da:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082de:	f7fa ffbb 	bl	8003258 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b64      	cmp	r3, #100	@ 0x64
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e082      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f0:	4b45      	ldr	r3, [pc, #276]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f0      	bne.n	80082de <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082fc:	4b42      	ldr	r3, [pc, #264]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	4b43      	ldr	r3, [pc, #268]	@ (8008410 <HAL_RCC_OscConfig+0x4a4>)
 8008302:	4013      	ands	r3, r2
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	69d1      	ldr	r1, [r2, #28]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6a12      	ldr	r2, [r2, #32]
 800830c:	4311      	orrs	r1, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008312:	0192      	lsls	r2, r2, #6
 8008314:	4311      	orrs	r1, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800831a:	0612      	lsls	r2, r2, #24
 800831c:	4311      	orrs	r1, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008322:	0852      	lsrs	r2, r2, #1
 8008324:	3a01      	subs	r2, #1
 8008326:	0412      	lsls	r2, r2, #16
 8008328:	430a      	orrs	r2, r1
 800832a:	4937      	ldr	r1, [pc, #220]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 800832c:	4313      	orrs	r3, r2
 800832e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008330:	4b36      	ldr	r3, [pc, #216]	@ (800840c <HAL_RCC_OscConfig+0x4a0>)
 8008332:	2201      	movs	r2, #1
 8008334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008336:	f7fa ff8f 	bl	8003258 <HAL_GetTick>
 800833a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800833e:	f7fa ff8b 	bl	8003258 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b64      	cmp	r3, #100	@ 0x64
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e052      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008350:	4b2d      	ldr	r3, [pc, #180]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0f0      	beq.n	800833e <HAL_RCC_OscConfig+0x3d2>
 800835c:	e04a      	b.n	80083f4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835e:	4b2b      	ldr	r3, [pc, #172]	@ (800840c <HAL_RCC_OscConfig+0x4a0>)
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008364:	f7fa ff78 	bl	8003258 <HAL_GetTick>
 8008368:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800836c:	f7fa ff74 	bl	8003258 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b64      	cmp	r3, #100	@ 0x64
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e03b      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800837e:	4b22      	ldr	r3, [pc, #136]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f0      	bne.n	800836c <HAL_RCC_OscConfig+0x400>
 800838a:	e033      	b.n	80083f4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e02e      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8008398:	4b1b      	ldr	r3, [pc, #108]	@ (8008408 <HAL_RCC_OscConfig+0x49c>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d121      	bne.n	80083f0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d11a      	bne.n	80083f0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80083c0:	4013      	ands	r3, r2
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083c6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d111      	bne.n	80083f0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	3b01      	subs	r3, #1
 80083da:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083dc:	429a      	cmp	r2, r3
 80083de:	d107      	bne.n	80083f0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ea:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d001      	beq.n	80083f4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e000      	b.n	80083f6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3728      	adds	r7, #40	@ 0x28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40007000 	.word	0x40007000
 8008404:	40023870 	.word	0x40023870
 8008408:	40023800 	.word	0x40023800
 800840c:	42470060 	.word	0x42470060
 8008410:	f0bc8000 	.word	0xf0bc8000

08008414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e0d2      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008428:	4b6b      	ldr	r3, [pc, #428]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 030f 	and.w	r3, r3, #15
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d90c      	bls.n	8008450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008436:	4b68      	ldr	r3, [pc, #416]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800843e:	4b66      	ldr	r3, [pc, #408]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d001      	beq.n	8008450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e0be      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d020      	beq.n	800849e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008468:	4b5c      	ldr	r3, [pc, #368]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	4a5b      	ldr	r2, [pc, #364]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800846e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008480:	4b56      	ldr	r3, [pc, #344]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4a55      	ldr	r2, [pc, #340]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 8008486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800848a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800848c:	4b53      	ldr	r3, [pc, #332]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	4950      	ldr	r1, [pc, #320]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800849a:	4313      	orrs	r3, r2
 800849c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d040      	beq.n	800852c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d107      	bne.n	80084c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b2:	4b4a      	ldr	r3, [pc, #296]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d115      	bne.n	80084ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e085      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d107      	bne.n	80084da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ca:	4b44      	ldr	r3, [pc, #272]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e079      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084da:	4b40      	ldr	r3, [pc, #256]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e071      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084ea:	4b3c      	ldr	r3, [pc, #240]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f023 0203 	bic.w	r2, r3, #3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	4939      	ldr	r1, [pc, #228]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084fc:	f7fa feac 	bl	8003258 <HAL_GetTick>
 8008500:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008502:	e00a      	b.n	800851a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008504:	f7fa fea8 	bl	8003258 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008512:	4293      	cmp	r3, r2
 8008514:	d901      	bls.n	800851a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e059      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800851a:	4b30      	ldr	r3, [pc, #192]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 020c 	and.w	r2, r3, #12
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	429a      	cmp	r2, r3
 800852a:	d1eb      	bne.n	8008504 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800852c:	4b2a      	ldr	r3, [pc, #168]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d20c      	bcs.n	8008554 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800853a:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c4>)
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008542:	4b25      	ldr	r3, [pc, #148]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d001      	beq.n	8008554 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e03c      	b.n	80085ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d008      	beq.n	8008572 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008560:	4b1e      	ldr	r3, [pc, #120]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	491b      	ldr	r1, [pc, #108]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800856e:	4313      	orrs	r3, r2
 8008570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d009      	beq.n	8008592 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800857e:	4b17      	ldr	r3, [pc, #92]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	4913      	ldr	r1, [pc, #76]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800858e:	4313      	orrs	r3, r2
 8008590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008592:	f000 f82b 	bl	80085ec <HAL_RCC_GetSysClockFreq>
 8008596:	4601      	mov	r1, r0
 8008598:	4b10      	ldr	r3, [pc, #64]	@ (80085dc <HAL_RCC_ClockConfig+0x1c8>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085a0:	22f0      	movs	r2, #240	@ 0xf0
 80085a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	fa92 f2a2 	rbit	r2, r2
 80085aa:	60fa      	str	r2, [r7, #12]
  return result;
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	fab2 f282 	clz	r2, r2
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	40d3      	lsrs	r3, r2
 80085b6:	4a0a      	ldr	r2, [pc, #40]	@ (80085e0 <HAL_RCC_ClockConfig+0x1cc>)
 80085b8:	5cd3      	ldrb	r3, [r2, r3]
 80085ba:	fa21 f303 	lsr.w	r3, r1, r3
 80085be:	4a09      	ldr	r2, [pc, #36]	@ (80085e4 <HAL_RCC_ClockConfig+0x1d0>)
 80085c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085c2:	4b09      	ldr	r3, [pc, #36]	@ (80085e8 <HAL_RCC_ClockConfig+0x1d4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fa fe04 	bl	80031d4 <HAL_InitTick>

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40023c00 	.word	0x40023c00
 80085dc:	40023800 	.word	0x40023800
 80085e0:	0800c3b4 	.word	0x0800c3b4
 80085e4:	2000015c 	.word	0x2000015c
 80085e8:	20000160 	.word	0x20000160

080085ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f0:	b094      	sub	sp, #80	@ 0x50
 80085f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f8:	2300      	movs	r3, #0
 80085fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085fc:	2300      	movs	r3, #0
 80085fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008604:	4b7c      	ldr	r3, [pc, #496]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 030c 	and.w	r3, r3, #12
 800860c:	2b08      	cmp	r3, #8
 800860e:	d00d      	beq.n	800862c <HAL_RCC_GetSysClockFreq+0x40>
 8008610:	2b08      	cmp	r3, #8
 8008612:	f200 80e7 	bhi.w	80087e4 <HAL_RCC_GetSysClockFreq+0x1f8>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_RCC_GetSysClockFreq+0x34>
 800861a:	2b04      	cmp	r3, #4
 800861c:	d003      	beq.n	8008626 <HAL_RCC_GetSysClockFreq+0x3a>
 800861e:	e0e1      	b.n	80087e4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008620:	4b76      	ldr	r3, [pc, #472]	@ (80087fc <HAL_RCC_GetSysClockFreq+0x210>)
 8008622:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008624:	e0e1      	b.n	80087ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008626:	4b76      	ldr	r3, [pc, #472]	@ (8008800 <HAL_RCC_GetSysClockFreq+0x214>)
 8008628:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800862a:	e0de      	b.n	80087ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800862c:	4b72      	ldr	r3, [pc, #456]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008634:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008636:	4b70      	ldr	r3, [pc, #448]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d065      	beq.n	800870e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008642:	4b6d      	ldr	r3, [pc, #436]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	099b      	lsrs	r3, r3, #6
 8008648:	2200      	movs	r2, #0
 800864a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800864c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800864e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	633b      	str	r3, [r7, #48]	@ 0x30
 8008656:	2300      	movs	r3, #0
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
 800865a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800865e:	4622      	mov	r2, r4
 8008660:	462b      	mov	r3, r5
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f04f 0100 	mov.w	r1, #0
 800866a:	0159      	lsls	r1, r3, #5
 800866c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008670:	0150      	lsls	r0, r2, #5
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4621      	mov	r1, r4
 8008678:	1a51      	subs	r1, r2, r1
 800867a:	6139      	str	r1, [r7, #16]
 800867c:	4629      	mov	r1, r5
 800867e:	eb63 0301 	sbc.w	r3, r3, r1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008690:	4659      	mov	r1, fp
 8008692:	018b      	lsls	r3, r1, #6
 8008694:	4651      	mov	r1, sl
 8008696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800869a:	4651      	mov	r1, sl
 800869c:	018a      	lsls	r2, r1, #6
 800869e:	46d4      	mov	ip, sl
 80086a0:	ebb2 080c 	subs.w	r8, r2, ip
 80086a4:	4659      	mov	r1, fp
 80086a6:	eb63 0901 	sbc.w	r9, r3, r1
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086be:	4690      	mov	r8, r2
 80086c0:	4699      	mov	r9, r3
 80086c2:	4623      	mov	r3, r4
 80086c4:	eb18 0303 	adds.w	r3, r8, r3
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	462b      	mov	r3, r5
 80086cc:	eb49 0303 	adc.w	r3, r9, r3
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086de:	4629      	mov	r1, r5
 80086e0:	024b      	lsls	r3, r1, #9
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	4604      	mov	r4, r0
 80086e8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80086ec:	4601      	mov	r1, r0
 80086ee:	024a      	lsls	r2, r1, #9
 80086f0:	4610      	mov	r0, r2
 80086f2:	4619      	mov	r1, r3
 80086f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f6:	2200      	movs	r2, #0
 80086f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008700:	f7f8 fd32 	bl	8001168 <__aeabi_uldivmod>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4613      	mov	r3, r2
 800870a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800870c:	e05c      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800870e:	4b3a      	ldr	r3, [pc, #232]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	099b      	lsrs	r3, r3, #6
 8008714:	2200      	movs	r2, #0
 8008716:	4618      	mov	r0, r3
 8008718:	4611      	mov	r1, r2
 800871a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800871e:	623b      	str	r3, [r7, #32]
 8008720:	2300      	movs	r3, #0
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
 8008724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008728:	4642      	mov	r2, r8
 800872a:	464b      	mov	r3, r9
 800872c:	f04f 0000 	mov.w	r0, #0
 8008730:	f04f 0100 	mov.w	r1, #0
 8008734:	0159      	lsls	r1, r3, #5
 8008736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800873a:	0150      	lsls	r0, r2, #5
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	46c4      	mov	ip, r8
 8008742:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	468c      	mov	ip, r1
 800874c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800875c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008764:	ebb2 040a 	subs.w	r4, r2, sl
 8008768:	eb63 050b 	sbc.w	r5, r3, fp
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	00eb      	lsls	r3, r5, #3
 8008776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800877a:	00e2      	lsls	r2, r4, #3
 800877c:	4614      	mov	r4, r2
 800877e:	461d      	mov	r5, r3
 8008780:	4603      	mov	r3, r0
 8008782:	18e3      	adds	r3, r4, r3
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	460b      	mov	r3, r1
 8008788:	eb45 0303 	adc.w	r3, r5, r3
 800878c:	607b      	str	r3, [r7, #4]
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800879a:	4629      	mov	r1, r5
 800879c:	028b      	lsls	r3, r1, #10
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	4604      	mov	r4, r0
 80087a4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80087a8:	4601      	mov	r1, r0
 80087aa:	028a      	lsls	r2, r1, #10
 80087ac:	4610      	mov	r0, r2
 80087ae:	4619      	mov	r1, r3
 80087b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b2:	2200      	movs	r2, #0
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	61fa      	str	r2, [r7, #28]
 80087b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087bc:	f7f8 fcd4 	bl	8001168 <__aeabi_uldivmod>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4613      	mov	r3, r2
 80087c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087c8:	4b0b      	ldr	r3, [pc, #44]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	0c1b      	lsrs	r3, r3, #16
 80087ce:	f003 0303 	and.w	r3, r3, #3
 80087d2:	3301      	adds	r3, #1
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80087d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087e2:	e002      	b.n	80087ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087e4:	4b05      	ldr	r3, [pc, #20]	@ (80087fc <HAL_RCC_GetSysClockFreq+0x210>)
 80087e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3750      	adds	r7, #80	@ 0x50
 80087f0:	46bd      	mov	sp, r7
 80087f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f6:	bf00      	nop
 80087f8:	40023800 	.word	0x40023800
 80087fc:	00f42400 	.word	0x00f42400
 8008800:	007a1200 	.word	0x007a1200

08008804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008808:	4b02      	ldr	r3, [pc, #8]	@ (8008814 <HAL_RCC_GetHCLKFreq+0x10>)
 800880a:	681b      	ldr	r3, [r3, #0]
}
 800880c:	4618      	mov	r0, r3
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	2000015c 	.word	0x2000015c

08008818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800881e:	f7ff fff1 	bl	8008804 <HAL_RCC_GetHCLKFreq>
 8008822:	4601      	mov	r1, r0
 8008824:	4b0b      	ldr	r3, [pc, #44]	@ (8008854 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800882c:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8008830:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	fa92 f2a2 	rbit	r2, r2
 8008838:	603a      	str	r2, [r7, #0]
  return result;
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	fab2 f282 	clz	r2, r2
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	40d3      	lsrs	r3, r2
 8008844:	4a04      	ldr	r2, [pc, #16]	@ (8008858 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008846:	5cd3      	ldrb	r3, [r2, r3]
 8008848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40023800 	.word	0x40023800
 8008858:	0800c3c4 	.word	0x0800c3c4

0800885c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e07b      	b.n	8008966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d108      	bne.n	8008888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800887e:	d009      	beq.n	8008894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	61da      	str	r2, [r3, #28]
 8008886:	e005      	b.n	8008894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7f9 ffd2 	bl	8002858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	431a      	orrs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008918:	ea42 0103 	orr.w	r1, r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	0c1b      	lsrs	r3, r3, #16
 8008932:	f003 0104 	and.w	r1, r3, #4
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893a:	f003 0210 	and.w	r2, r3, #16
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69da      	ldr	r2, [r3, #28]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e041      	b.n	8008a04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d106      	bne.n	800899a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7fa fae3 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2202      	movs	r2, #2
 800899e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f000 fea7 	bl	8009700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d001      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e04e      	b.n	8008ac2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0201 	orr.w	r2, r2, #1
 8008a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a22      	ldr	r2, [pc, #136]	@ (8008acc <HAL_TIM_Base_Start_IT+0xc0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d022      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4e:	d01d      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1e      	ldr	r2, [pc, #120]	@ (8008ad0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00e      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1a      	ldr	r2, [pc, #104]	@ (8008adc <HAL_TIM_Base_Start_IT+0xd0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ae0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a17      	ldr	r2, [pc, #92]	@ (8008ae4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d111      	bne.n	8008ab0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d010      	beq.n	8008ac0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0201 	orr.w	r2, r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	e007      	b.n	8008ac0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	40000c00 	.word	0x40000c00
 8008adc:	40010400 	.word	0x40010400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40001800 	.word	0x40001800

08008ae8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10f      	bne.n	8008b30 <HAL_TIM_Base_Stop_IT+0x48>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	f240 4344 	movw	r3, #1092	@ 0x444
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d107      	bne.n	8008b30 <HAL_TIM_Base_Stop_IT+0x48>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0201 	bic.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e041      	b.n	8008bda <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f839 	bl	8008be2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f000 fdbc 	bl	8009700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e041      	b.n	8008c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f839 	bl	8008c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f000 fd64 	bl	8009700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <HAL_TIM_PWM_Start+0x24>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	bf14      	ite	ne
 8008cc0:	2301      	movne	r3, #1
 8008cc2:	2300      	moveq	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	e022      	b.n	8008d0e <HAL_TIM_PWM_Start+0x6a>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d109      	bne.n	8008ce2 <HAL_TIM_PWM_Start+0x3e>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	bf14      	ite	ne
 8008cda:	2301      	movne	r3, #1
 8008cdc:	2300      	moveq	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	e015      	b.n	8008d0e <HAL_TIM_PWM_Start+0x6a>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d109      	bne.n	8008cfc <HAL_TIM_PWM_Start+0x58>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	bf14      	ite	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	2300      	moveq	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	e008      	b.n	8008d0e <HAL_TIM_PWM_Start+0x6a>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	bf14      	ite	ne
 8008d08:	2301      	movne	r3, #1
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e07c      	b.n	8008e10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0x82>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d24:	e013      	b.n	8008d4e <HAL_TIM_PWM_Start+0xaa>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_PWM_Start+0x92>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d34:	e00b      	b.n	8008d4e <HAL_TIM_PWM_Start+0xaa>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xa2>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d44:	e003      	b.n	8008d4e <HAL_TIM_PWM_Start+0xaa>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2201      	movs	r2, #1
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 ffb2 	bl	8009cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2d      	ldr	r2, [pc, #180]	@ (8008e18 <HAL_TIM_PWM_Start+0x174>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d004      	beq.n	8008d70 <HAL_TIM_PWM_Start+0xcc>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008e1c <HAL_TIM_PWM_Start+0x178>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d101      	bne.n	8008d74 <HAL_TIM_PWM_Start+0xd0>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <HAL_TIM_PWM_Start+0xd2>
 8008d74:	2300      	movs	r3, #0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a22      	ldr	r2, [pc, #136]	@ (8008e18 <HAL_TIM_PWM_Start+0x174>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d022      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d9c:	d01d      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e20 <HAL_TIM_PWM_Start+0x17c>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d018      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a1d      	ldr	r2, [pc, #116]	@ (8008e24 <HAL_TIM_PWM_Start+0x180>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d013      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e28 <HAL_TIM_PWM_Start+0x184>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00e      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a16      	ldr	r2, [pc, #88]	@ (8008e1c <HAL_TIM_PWM_Start+0x178>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d009      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <HAL_TIM_PWM_Start+0x188>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d004      	beq.n	8008dda <HAL_TIM_PWM_Start+0x136>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a16      	ldr	r2, [pc, #88]	@ (8008e30 <HAL_TIM_PWM_Start+0x18c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d111      	bne.n	8008dfe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b06      	cmp	r3, #6
 8008dea:	d010      	beq.n	8008e0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfc:	e007      	b.n	8008e0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	40010000 	.word	0x40010000
 8008e1c:	40010400 	.word	0x40010400
 8008e20:	40000400 	.word	0x40000400
 8008e24:	40000800 	.word	0x40000800
 8008e28:	40000c00 	.word	0x40000c00
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	40001800 	.word	0x40001800

08008e34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2200      	movs	r2, #0
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 ff3a 	bl	8009cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a2e      	ldr	r2, [pc, #184]	@ (8008f0c <HAL_TIM_PWM_Stop+0xd8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d004      	beq.n	8008e60 <HAL_TIM_PWM_Stop+0x2c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8008f10 <HAL_TIM_PWM_Stop+0xdc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d101      	bne.n	8008e64 <HAL_TIM_PWM_Stop+0x30>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <HAL_TIM_PWM_Stop+0x32>
 8008e64:	2300      	movs	r3, #0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d017      	beq.n	8008e9a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6a1a      	ldr	r2, [r3, #32]
 8008e70:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10f      	bne.n	8008e9a <HAL_TIM_PWM_Stop+0x66>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	f240 4344 	movw	r3, #1092	@ 0x444
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <HAL_TIM_PWM_Stop+0x66>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6a1a      	ldr	r2, [r3, #32]
 8008ea0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10f      	bne.n	8008eca <HAL_TIM_PWM_Stop+0x96>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	f240 4344 	movw	r3, #1092	@ 0x444
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d107      	bne.n	8008eca <HAL_TIM_PWM_Stop+0x96>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <HAL_TIM_PWM_Stop+0xa6>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ed8:	e013      	b.n	8008f02 <HAL_TIM_PWM_Stop+0xce>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d104      	bne.n	8008eea <HAL_TIM_PWM_Stop+0xb6>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ee8:	e00b      	b.n	8008f02 <HAL_TIM_PWM_Stop+0xce>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d104      	bne.n	8008efa <HAL_TIM_PWM_Stop+0xc6>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ef8:	e003      	b.n	8008f02 <HAL_TIM_PWM_Stop+0xce>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40010400 	.word	0x40010400

08008f14 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <HAL_TIM_IC_Start+0x1a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	e013      	b.n	8008f56 <HAL_TIM_IC_Start+0x42>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d104      	bne.n	8008f3e <HAL_TIM_IC_Start+0x2a>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	e00b      	b.n	8008f56 <HAL_TIM_IC_Start+0x42>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d104      	bne.n	8008f4e <HAL_TIM_IC_Start+0x3a>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	e003      	b.n	8008f56 <HAL_TIM_IC_Start+0x42>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d104      	bne.n	8008f68 <HAL_TIM_IC_Start+0x54>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	e013      	b.n	8008f90 <HAL_TIM_IC_Start+0x7c>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d104      	bne.n	8008f78 <HAL_TIM_IC_Start+0x64>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	e00b      	b.n	8008f90 <HAL_TIM_IC_Start+0x7c>
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d104      	bne.n	8008f88 <HAL_TIM_IC_Start+0x74>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	e003      	b.n	8008f90 <HAL_TIM_IC_Start+0x7c>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d102      	bne.n	8008f9e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d001      	beq.n	8008fa2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e081      	b.n	80090a6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <HAL_TIM_IC_Start+0x9e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fb0:	e013      	b.n	8008fda <HAL_TIM_IC_Start+0xc6>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d104      	bne.n	8008fc2 <HAL_TIM_IC_Start+0xae>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fc0:	e00b      	b.n	8008fda <HAL_TIM_IC_Start+0xc6>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d104      	bne.n	8008fd2 <HAL_TIM_IC_Start+0xbe>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fd0:	e003      	b.n	8008fda <HAL_TIM_IC_Start+0xc6>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <HAL_TIM_IC_Start+0xd6>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fe8:	e013      	b.n	8009012 <HAL_TIM_IC_Start+0xfe>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d104      	bne.n	8008ffa <HAL_TIM_IC_Start+0xe6>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ff8:	e00b      	b.n	8009012 <HAL_TIM_IC_Start+0xfe>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d104      	bne.n	800900a <HAL_TIM_IC_Start+0xf6>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009008:	e003      	b.n	8009012 <HAL_TIM_IC_Start+0xfe>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2202      	movs	r2, #2
 800900e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2201      	movs	r2, #1
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fe50 	bl	8009cc0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a22      	ldr	r2, [pc, #136]	@ (80090b0 <HAL_TIM_IC_Start+0x19c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a1e      	ldr	r2, [pc, #120]	@ (80090b4 <HAL_TIM_IC_Start+0x1a0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a1d      	ldr	r2, [pc, #116]	@ (80090b8 <HAL_TIM_IC_Start+0x1a4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1b      	ldr	r2, [pc, #108]	@ (80090bc <HAL_TIM_IC_Start+0x1a8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1a      	ldr	r2, [pc, #104]	@ (80090c0 <HAL_TIM_IC_Start+0x1ac>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a18      	ldr	r2, [pc, #96]	@ (80090c4 <HAL_TIM_IC_Start+0x1b0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIM_IC_Start+0x15c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a17      	ldr	r2, [pc, #92]	@ (80090c8 <HAL_TIM_IC_Start+0x1b4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d111      	bne.n	8009094 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d010      	beq.n	80090a4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0201 	orr.w	r2, r2, #1
 8009090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009092:	e007      	b.n	80090a4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0201 	orr.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40010000 	.word	0x40010000
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40010400 	.word	0x40010400
 80090c4:	40014000 	.word	0x40014000
 80090c8:	40001800 	.word	0x40001800

080090cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d122      	bne.n	8009128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d11b      	bne.n	8009128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0202 	mvn.w	r2, #2
 80090f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fadb 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 8009114:	e005      	b.n	8009122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 face 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fadd 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b04      	cmp	r3, #4
 8009134:	d122      	bne.n	800917c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b04      	cmp	r3, #4
 8009142:	d11b      	bne.n	800917c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0204 	mvn.w	r2, #4
 800914c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fab1 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 faa4 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fab3 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b08      	cmp	r3, #8
 8009188:	d122      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b08      	cmp	r3, #8
 8009196:	d11b      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0208 	mvn.w	r2, #8
 80091a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2204      	movs	r2, #4
 80091a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa87 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 80091bc:	e005      	b.n	80091ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fa7a 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa89 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b10      	cmp	r3, #16
 80091dc:	d122      	bne.n	8009224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b10      	cmp	r3, #16
 80091ea:	d11b      	bne.n	8009224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f06f 0210 	mvn.w	r2, #16
 80091f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2208      	movs	r2, #8
 80091fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa5d 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 8009210:	e005      	b.n	800921e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa50 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fa5f 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b01      	cmp	r3, #1
 8009230:	d10e      	bne.n	8009250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b01      	cmp	r3, #1
 800923e:	d107      	bne.n	8009250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f06f 0201 	mvn.w	r2, #1
 8009248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa2b 	bl	80096a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925a:	2b80      	cmp	r3, #128	@ 0x80
 800925c:	d10e      	bne.n	800927c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009268:	2b80      	cmp	r3, #128	@ 0x80
 800926a:	d107      	bne.n	800927c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fe1a 	bl	8009eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d10e      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009294:	2b40      	cmp	r3, #64	@ 0x40
 8009296:	d107      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fa23 	bl	80096ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d10e      	bne.n	80092d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	d107      	bne.n	80092d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f06f 0220 	mvn.w	r2, #32
 80092cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fde5 	bl	8009e9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d101      	bne.n	80092fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80092f6:	2302      	movs	r3, #2
 80092f8:	e048      	b.n	800938c <HAL_TIM_OC_ConfigChannel+0xb0>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b0c      	cmp	r3, #12
 8009306:	d839      	bhi.n	800937c <HAL_TIM_OC_ConfigChannel+0xa0>
 8009308:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <HAL_TIM_OC_ConfigChannel+0x34>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009345 	.word	0x08009345
 8009314:	0800937d 	.word	0x0800937d
 8009318:	0800937d 	.word	0x0800937d
 800931c:	0800937d 	.word	0x0800937d
 8009320:	08009353 	.word	0x08009353
 8009324:	0800937d 	.word	0x0800937d
 8009328:	0800937d 	.word	0x0800937d
 800932c:	0800937d 	.word	0x0800937d
 8009330:	08009361 	.word	0x08009361
 8009334:	0800937d 	.word	0x0800937d
 8009338:	0800937d 	.word	0x0800937d
 800933c:	0800937d 	.word	0x0800937d
 8009340:	0800936f 	.word	0x0800936f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68b9      	ldr	r1, [r7, #8]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fa76 	bl	800983c <TIM_OC1_SetConfig>
      break;
 8009350:	e017      	b.n	8009382 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fadf 	bl	800991c <TIM_OC2_SetConfig>
      break;
 800935e:	e010      	b.n	8009382 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68b9      	ldr	r1, [r7, #8]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fb4c 	bl	8009a04 <TIM_OC3_SetConfig>
      break;
 800936c:	e009      	b.n	8009382 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fbb9 	bl	8009aec <TIM_OC4_SetConfig>
      break;
 800937a:	e002      	b.n	8009382 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]
      break;
 8009380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d101      	bne.n	80093b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093ae:	2302      	movs	r3, #2
 80093b0:	e0ae      	b.n	8009510 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b0c      	cmp	r3, #12
 80093be:	f200 809f 	bhi.w	8009500 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80093c2:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093fd 	.word	0x080093fd
 80093cc:	08009501 	.word	0x08009501
 80093d0:	08009501 	.word	0x08009501
 80093d4:	08009501 	.word	0x08009501
 80093d8:	0800943d 	.word	0x0800943d
 80093dc:	08009501 	.word	0x08009501
 80093e0:	08009501 	.word	0x08009501
 80093e4:	08009501 	.word	0x08009501
 80093e8:	0800947f 	.word	0x0800947f
 80093ec:	08009501 	.word	0x08009501
 80093f0:	08009501 	.word	0x08009501
 80093f4:	08009501 	.word	0x08009501
 80093f8:	080094bf 	.word	0x080094bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68b9      	ldr	r1, [r7, #8]
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fa1a 	bl	800983c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699a      	ldr	r2, [r3, #24]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0208 	orr.w	r2, r2, #8
 8009416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0204 	bic.w	r2, r2, #4
 8009426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6999      	ldr	r1, [r3, #24]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691a      	ldr	r2, [r3, #16]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	619a      	str	r2, [r3, #24]
      break;
 800943a:	e064      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fa6a 	bl	800991c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6999      	ldr	r1, [r3, #24]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	021a      	lsls	r2, r3, #8
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	619a      	str	r2, [r3, #24]
      break;
 800947c:	e043      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 fabd 	bl	8009a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 0208 	orr.w	r2, r2, #8
 8009498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0204 	bic.w	r2, r2, #4
 80094a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69d9      	ldr	r1, [r3, #28]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	61da      	str	r2, [r3, #28]
      break;
 80094bc:	e023      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fb11 	bl	8009aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69da      	ldr	r2, [r3, #28]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69da      	ldr	r2, [r3, #28]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69d9      	ldr	r1, [r3, #28]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	021a      	lsls	r2, r3, #8
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	61da      	str	r2, [r3, #28]
      break;
 80094fe:	e002      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_TIM_ConfigClockSource+0x1c>
 8009530:	2302      	movs	r3, #2
 8009532:	e0b4      	b.n	800969e <HAL_TIM_ConfigClockSource+0x186>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800955a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800956c:	d03e      	beq.n	80095ec <HAL_TIM_ConfigClockSource+0xd4>
 800956e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009572:	f200 8087 	bhi.w	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 8009576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957a:	f000 8086 	beq.w	800968a <HAL_TIM_ConfigClockSource+0x172>
 800957e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009582:	d87f      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 8009584:	2b70      	cmp	r3, #112	@ 0x70
 8009586:	d01a      	beq.n	80095be <HAL_TIM_ConfigClockSource+0xa6>
 8009588:	2b70      	cmp	r3, #112	@ 0x70
 800958a:	d87b      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 800958c:	2b60      	cmp	r3, #96	@ 0x60
 800958e:	d050      	beq.n	8009632 <HAL_TIM_ConfigClockSource+0x11a>
 8009590:	2b60      	cmp	r3, #96	@ 0x60
 8009592:	d877      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 8009594:	2b50      	cmp	r3, #80	@ 0x50
 8009596:	d03c      	beq.n	8009612 <HAL_TIM_ConfigClockSource+0xfa>
 8009598:	2b50      	cmp	r3, #80	@ 0x50
 800959a:	d873      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 800959c:	2b40      	cmp	r3, #64	@ 0x40
 800959e:	d058      	beq.n	8009652 <HAL_TIM_ConfigClockSource+0x13a>
 80095a0:	2b40      	cmp	r3, #64	@ 0x40
 80095a2:	d86f      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 80095a4:	2b30      	cmp	r3, #48	@ 0x30
 80095a6:	d064      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x15a>
 80095a8:	2b30      	cmp	r3, #48	@ 0x30
 80095aa:	d86b      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d060      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x15a>
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d867      	bhi.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d05c      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x15a>
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d05a      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x15a>
 80095bc:	e062      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095ce:	f000 fb58 	bl	8009c82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	609a      	str	r2, [r3, #8]
      break;
 80095ea:	e04f      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095fc:	f000 fb41 	bl	8009c82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689a      	ldr	r2, [r3, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800960e:	609a      	str	r2, [r3, #8]
      break;
 8009610:	e03c      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800961e:	461a      	mov	r2, r3
 8009620:	f000 fab8 	bl	8009b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2150      	movs	r1, #80	@ 0x50
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fb0f 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009630:	e02c      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800963e:	461a      	mov	r2, r3
 8009640:	f000 fad6 	bl	8009bf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2160      	movs	r1, #96	@ 0x60
 800964a:	4618      	mov	r0, r3
 800964c:	f000 faff 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009650:	e01c      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800965e:	461a      	mov	r2, r3
 8009660:	f000 fa98 	bl	8009b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2140      	movs	r1, #64	@ 0x40
 800966a:	4618      	mov	r0, r3
 800966c:	f000 faef 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009670:	e00c      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f000 fae6 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009682:	e003      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	73fb      	strb	r3, [r7, #15]
      break;
 8009688:	e000      	b.n	800968c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800968a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bc80      	pop	{r7}
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bc80      	pop	{r7}
 80096c8:	4770      	bx	lr

080096ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr

080096dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr

080096ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr

08009700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a3f      	ldr	r2, [pc, #252]	@ (8009810 <TIM_Base_SetConfig+0x110>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d013      	beq.n	8009740 <TIM_Base_SetConfig+0x40>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971e:	d00f      	beq.n	8009740 <TIM_Base_SetConfig+0x40>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a3c      	ldr	r2, [pc, #240]	@ (8009814 <TIM_Base_SetConfig+0x114>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00b      	beq.n	8009740 <TIM_Base_SetConfig+0x40>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a3b      	ldr	r2, [pc, #236]	@ (8009818 <TIM_Base_SetConfig+0x118>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d007      	beq.n	8009740 <TIM_Base_SetConfig+0x40>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a3a      	ldr	r2, [pc, #232]	@ (800981c <TIM_Base_SetConfig+0x11c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d003      	beq.n	8009740 <TIM_Base_SetConfig+0x40>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a39      	ldr	r2, [pc, #228]	@ (8009820 <TIM_Base_SetConfig+0x120>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d108      	bne.n	8009752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2e      	ldr	r2, [pc, #184]	@ (8009810 <TIM_Base_SetConfig+0x110>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d02b      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009760:	d027      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a2b      	ldr	r2, [pc, #172]	@ (8009814 <TIM_Base_SetConfig+0x114>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d023      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a2a      	ldr	r2, [pc, #168]	@ (8009818 <TIM_Base_SetConfig+0x118>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d01f      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a29      	ldr	r2, [pc, #164]	@ (800981c <TIM_Base_SetConfig+0x11c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d01b      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a28      	ldr	r2, [pc, #160]	@ (8009820 <TIM_Base_SetConfig+0x120>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d017      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a27      	ldr	r2, [pc, #156]	@ (8009824 <TIM_Base_SetConfig+0x124>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d013      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a26      	ldr	r2, [pc, #152]	@ (8009828 <TIM_Base_SetConfig+0x128>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00f      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a25      	ldr	r2, [pc, #148]	@ (800982c <TIM_Base_SetConfig+0x12c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00b      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a24      	ldr	r2, [pc, #144]	@ (8009830 <TIM_Base_SetConfig+0x130>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d007      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a23      	ldr	r2, [pc, #140]	@ (8009834 <TIM_Base_SetConfig+0x134>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d003      	beq.n	80097b2 <TIM_Base_SetConfig+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a22      	ldr	r2, [pc, #136]	@ (8009838 <TIM_Base_SetConfig+0x138>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d108      	bne.n	80097c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	689a      	ldr	r2, [r3, #8]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a09      	ldr	r2, [pc, #36]	@ (8009810 <TIM_Base_SetConfig+0x110>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d003      	beq.n	80097f8 <TIM_Base_SetConfig+0xf8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a0b      	ldr	r2, [pc, #44]	@ (8009820 <TIM_Base_SetConfig+0x120>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d103      	bne.n	8009800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	691a      	ldr	r2, [r3, #16]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	615a      	str	r2, [r3, #20]
}
 8009806:	bf00      	nop
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr
 8009810:	40010000 	.word	0x40010000
 8009814:	40000400 	.word	0x40000400
 8009818:	40000800 	.word	0x40000800
 800981c:	40000c00 	.word	0x40000c00
 8009820:	40010400 	.word	0x40010400
 8009824:	40014000 	.word	0x40014000
 8009828:	40014400 	.word	0x40014400
 800982c:	40014800 	.word	0x40014800
 8009830:	40001800 	.word	0x40001800
 8009834:	40001c00 	.word	0x40001c00
 8009838:	40002000 	.word	0x40002000

0800983c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	f023 0201 	bic.w	r2, r3, #1
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0303 	bic.w	r3, r3, #3
 8009872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f023 0302 	bic.w	r3, r3, #2
 8009884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a20      	ldr	r2, [pc, #128]	@ (8009914 <TIM_OC1_SetConfig+0xd8>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_OC1_SetConfig+0x64>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a1f      	ldr	r2, [pc, #124]	@ (8009918 <TIM_OC1_SetConfig+0xdc>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10c      	bne.n	80098ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f023 0308 	bic.w	r3, r3, #8
 80098a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f023 0304 	bic.w	r3, r3, #4
 80098b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a15      	ldr	r2, [pc, #84]	@ (8009914 <TIM_OC1_SetConfig+0xd8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_OC1_SetConfig+0x8e>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a14      	ldr	r2, [pc, #80]	@ (8009918 <TIM_OC1_SetConfig+0xdc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d111      	bne.n	80098ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	621a      	str	r2, [r3, #32]
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	40010000 	.word	0x40010000
 8009918:	40010400 	.word	0x40010400

0800991c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	f023 0210 	bic.w	r2, r3, #16
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800994a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4313      	orrs	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f023 0320 	bic.w	r3, r3, #32
 8009966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4313      	orrs	r3, r2
 8009972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a21      	ldr	r2, [pc, #132]	@ (80099fc <TIM_OC2_SetConfig+0xe0>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d003      	beq.n	8009984 <TIM_OC2_SetConfig+0x68>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a20      	ldr	r2, [pc, #128]	@ (8009a00 <TIM_OC2_SetConfig+0xe4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d10d      	bne.n	80099a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800998a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800999e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a16      	ldr	r2, [pc, #88]	@ (80099fc <TIM_OC2_SetConfig+0xe0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_OC2_SetConfig+0x94>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a15      	ldr	r2, [pc, #84]	@ (8009a00 <TIM_OC2_SetConfig+0xe4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d113      	bne.n	80099d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	621a      	str	r2, [r3, #32]
}
 80099f2:	bf00      	nop
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr
 80099fc:	40010000 	.word	0x40010000
 8009a00:	40010400 	.word	0x40010400

08009a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0303 	bic.w	r3, r3, #3
 8009a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a21      	ldr	r2, [pc, #132]	@ (8009ae4 <TIM_OC3_SetConfig+0xe0>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d003      	beq.n	8009a6a <TIM_OC3_SetConfig+0x66>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a20      	ldr	r2, [pc, #128]	@ (8009ae8 <TIM_OC3_SetConfig+0xe4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d10d      	bne.n	8009a86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a16      	ldr	r2, [pc, #88]	@ (8009ae4 <TIM_OC3_SetConfig+0xe0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d003      	beq.n	8009a96 <TIM_OC3_SetConfig+0x92>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a15      	ldr	r2, [pc, #84]	@ (8009ae8 <TIM_OC3_SetConfig+0xe4>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d113      	bne.n	8009abe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	621a      	str	r2, [r3, #32]
}
 8009ad8:	bf00      	nop
 8009ada:	371c      	adds	r7, #28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bc80      	pop	{r7}
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40010400 	.word	0x40010400

08009aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	031b      	lsls	r3, r3, #12
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a11      	ldr	r2, [pc, #68]	@ (8009b8c <TIM_OC4_SetConfig+0xa0>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d003      	beq.n	8009b54 <TIM_OC4_SetConfig+0x68>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a10      	ldr	r2, [pc, #64]	@ (8009b90 <TIM_OC4_SetConfig+0xa4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d109      	bne.n	8009b68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	019b      	lsls	r3, r3, #6
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	621a      	str	r2, [r3, #32]
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr
 8009b8c:	40010000 	.word	0x40010000
 8009b90:	40010400 	.word	0x40010400

08009b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6a1b      	ldr	r3, [r3, #32]
 8009ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	f023 0201 	bic.w	r2, r3, #1
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	011b      	lsls	r3, r3, #4
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f023 030a 	bic.w	r3, r3, #10
 8009bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	621a      	str	r2, [r3, #32]
}
 8009be6:	bf00      	nop
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc80      	pop	{r7}
 8009bee:	4770      	bx	lr

08009bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	f023 0210 	bic.w	r2, r3, #16
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	031b      	lsls	r3, r3, #12
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	011b      	lsls	r3, r3, #4
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	621a      	str	r2, [r3, #32]
}
 8009c44:	bf00      	nop
 8009c46:	371c      	adds	r7, #28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bc80      	pop	{r7}
 8009c4c:	4770      	bx	lr

08009c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f043 0307 	orr.w	r3, r3, #7
 8009c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	609a      	str	r2, [r3, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bc80      	pop	{r7}
 8009c80:	4770      	bx	lr

08009c82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b087      	sub	sp, #28
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	021a      	lsls	r2, r3, #8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	609a      	str	r2, [r3, #8]
}
 8009cb6:	bf00      	nop
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bc80      	pop	{r7}
 8009cbe:	4770      	bx	lr

08009cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a1a      	ldr	r2, [r3, #32]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a1a      	ldr	r2, [r3, #32]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f003 031f 	and.w	r3, r3, #31
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	621a      	str	r2, [r3, #32]
}
 8009cfe:	bf00      	nop
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e05a      	b.n	8009dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a20      	ldr	r2, [pc, #128]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d022      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d6c:	d01d      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1c      	ldr	r2, [pc, #112]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d018      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d013      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a19      	ldr	r2, [pc, #100]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00e      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a17      	ldr	r2, [pc, #92]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d009      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a16      	ldr	r2, [pc, #88]	@ (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a14      	ldr	r2, [pc, #80]	@ (8009df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d10c      	bne.n	8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40000400 	.word	0x40000400
 8009de8:	40000800 	.word	0x40000800
 8009dec:	40000c00 	.word	0x40000c00
 8009df0:	40010400 	.word	0x40010400
 8009df4:	40014000 	.word	0x40014000
 8009df8:	40001800 	.word	0x40001800

08009dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d101      	bne.n	8009e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e14:	2302      	movs	r3, #2
 8009e16:	e03d      	b.n	8009e94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr
	...

08009ec4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009ec8:	4904      	ldr	r1, [pc, #16]	@ (8009edc <MX_FATFS_Init+0x18>)
 8009eca:	4805      	ldr	r0, [pc, #20]	@ (8009ee0 <MX_FATFS_Init+0x1c>)
 8009ecc:	f002 f91c 	bl	800c108 <FATFS_LinkDriver>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	4b03      	ldr	r3, [pc, #12]	@ (8009ee4 <MX_FATFS_Init+0x20>)
 8009ed6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ed8:	bf00      	nop
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20000a34 	.word	0x20000a34
 8009ee0:	20000168 	.word	0x20000168
 8009ee4:	20000a30 	.word	0x20000a30

08009ee8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009ef2:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <USER_initialize+0x20>)
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009ef8:	4b03      	ldr	r3, [pc, #12]	@ (8009f08 <USER_initialize+0x20>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc80      	pop	{r7}
 8009f06:	4770      	bx	lr
 8009f08:	20000165 	.word	0x20000165

08009f0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009f16:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <USER_status+0x20>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	@ (8009f2c <USER_status+0x20>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr
 8009f2c:	20000165 	.word	0x20000165

08009f30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009f40:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr

08009f4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	607a      	str	r2, [r7, #4]
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8009f5c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bc80      	pop	{r7}
 8009f66:	4770      	bx	lr

08009f68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	603a      	str	r2, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
 8009f74:	460b      	mov	r3, r1
 8009f76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	73fb      	strb	r3, [r7, #15]
    return res;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bc80      	pop	{r7}
 8009f86:	4770      	bx	lr

08009f88 <get_error_quantity>:
	1,		//	bool hci_fault_lo_temp,
	16,		//	bool hci_fault_hi_dpf_p,
	7		//	bool hci_fault_dv
};

uint8_t get_error_quantity(uint8_t * first_error){
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	static uint8_t i, j, errors_byte, supressed_byte, counter;
	counter = 0;
 8009f90:	4b3f      	ldr	r3, [pc, #252]	@ (800a090 <get_error_quantity+0x108>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]

	for (i=0; i<8; i++){
 8009f96:	4b3f      	ldr	r3, [pc, #252]	@ (800a094 <get_error_quantity+0x10c>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	e06d      	b.n	800a07a <get_error_quantity+0xf2>
		errors_byte = errors_vector[i];
 8009f9e:	4b3d      	ldr	r3, [pc, #244]	@ (800a094 <get_error_quantity+0x10c>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4b3c      	ldr	r3, [pc, #240]	@ (800a098 <get_error_quantity+0x110>)
 8009fa6:	5c9a      	ldrb	r2, [r3, r2]
 8009fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800a09c <get_error_quantity+0x114>)
 8009faa:	701a      	strb	r2, [r3, #0]
		supressed_byte = errors_supressed[i];
 8009fac:	4b39      	ldr	r3, [pc, #228]	@ (800a094 <get_error_quantity+0x10c>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a0 <get_error_quantity+0x118>)
 8009fb4:	5c9a      	ldrb	r2, [r3, r2]
 8009fb6:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a4 <get_error_quantity+0x11c>)
 8009fb8:	701a      	strb	r2, [r3, #0]
		for (j=0; j<8; j++) {
 8009fba:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a8 <get_error_quantity+0x120>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e051      	b.n	800a066 <get_error_quantity+0xde>
			if ((errors_byte & 1U) && !(supressed_byte & 1U)){
 8009fc2:	4b36      	ldr	r3, [pc, #216]	@ (800a09c <get_error_quantity+0x114>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d039      	beq.n	800a042 <get_error_quantity+0xba>
 8009fce:	4b35      	ldr	r3, [pc, #212]	@ (800a0a4 <get_error_quantity+0x11c>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d133      	bne.n	800a042 <get_error_quantity+0xba>
				if (counter == 0) {
 8009fda:	4b2d      	ldr	r3, [pc, #180]	@ (800a090 <get_error_quantity+0x108>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d129      	bne.n	800a036 <get_error_quantity+0xae>
					first_error[0] = error_spn_vector[(i << 3) + j] & 0xFF;
 8009fe2:	4b2c      	ldr	r3, [pc, #176]	@ (800a094 <get_error_quantity+0x10c>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	00db      	lsls	r3, r3, #3
 8009fe8:	4a2f      	ldr	r2, [pc, #188]	@ (800a0a8 <get_error_quantity+0x120>)
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	4413      	add	r3, r2
 8009fee:	4a2f      	ldr	r2, [pc, #188]	@ (800a0ac <get_error_quantity+0x124>)
 8009ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	701a      	strb	r2, [r3, #0]
					first_error[1] = (error_spn_vector[(i << 3) + j] & 0xFF00) >> 8;
 8009ffa:	4b26      	ldr	r3, [pc, #152]	@ (800a094 <get_error_quantity+0x10c>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	4a29      	ldr	r2, [pc, #164]	@ (800a0a8 <get_error_quantity+0x120>)
 800a002:	7812      	ldrb	r2, [r2, #0]
 800a004:	4413      	add	r3, r2
 800a006:	4a29      	ldr	r2, [pc, #164]	@ (800a0ac <get_error_quantity+0x124>)
 800a008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	b29a      	uxth	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3301      	adds	r3, #1
 800a014:	b2d2      	uxtb	r2, r2
 800a016:	701a      	strb	r2, [r3, #0]
					first_error[2] = (((error_spn_vector[(i << 3) + j] & 0x70000) >> 16) << 5) + error_fmi_vector[(i << 3) + j];
 800a018:	4b1e      	ldr	r3, [pc, #120]	@ (800a094 <get_error_quantity+0x10c>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	4a22      	ldr	r2, [pc, #136]	@ (800a0a8 <get_error_quantity+0x120>)
 800a020:	7812      	ldrb	r2, [r2, #0]
 800a022:	441a      	add	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3302      	adds	r3, #2
 800a028:	4921      	ldr	r1, [pc, #132]	@ (800a0b0 <get_error_quantity+0x128>)
 800a02a:	5c8a      	ldrb	r2, [r1, r2]
 800a02c:	701a      	strb	r2, [r3, #0]
					first_error[3] = 1;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3303      	adds	r3, #3
 800a032:	2201      	movs	r2, #1
 800a034:	701a      	strb	r2, [r3, #0]
				}
				counter++;
 800a036:	4b16      	ldr	r3, [pc, #88]	@ (800a090 <get_error_quantity+0x108>)
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4b14      	ldr	r3, [pc, #80]	@ (800a090 <get_error_quantity+0x108>)
 800a040:	701a      	strb	r2, [r3, #0]
			}
			errors_byte >>= 1;
 800a042:	4b16      	ldr	r3, [pc, #88]	@ (800a09c <get_error_quantity+0x114>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	4b14      	ldr	r3, [pc, #80]	@ (800a09c <get_error_quantity+0x114>)
 800a04c:	701a      	strb	r2, [r3, #0]
			supressed_byte >>= 1;
 800a04e:	4b15      	ldr	r3, [pc, #84]	@ (800a0a4 <get_error_quantity+0x11c>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	b2da      	uxtb	r2, r3
 800a056:	4b13      	ldr	r3, [pc, #76]	@ (800a0a4 <get_error_quantity+0x11c>)
 800a058:	701a      	strb	r2, [r3, #0]
		for (j=0; j<8; j++) {
 800a05a:	4b13      	ldr	r3, [pc, #76]	@ (800a0a8 <get_error_quantity+0x120>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	3301      	adds	r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	4b11      	ldr	r3, [pc, #68]	@ (800a0a8 <get_error_quantity+0x120>)
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	4b10      	ldr	r3, [pc, #64]	@ (800a0a8 <get_error_quantity+0x120>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2b07      	cmp	r3, #7
 800a06c:	d9a9      	bls.n	8009fc2 <get_error_quantity+0x3a>
	for (i=0; i<8; i++){
 800a06e:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <get_error_quantity+0x10c>)
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	3301      	adds	r3, #1
 800a074:	b2da      	uxtb	r2, r3
 800a076:	4b07      	ldr	r3, [pc, #28]	@ (800a094 <get_error_quantity+0x10c>)
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	4b06      	ldr	r3, [pc, #24]	@ (800a094 <get_error_quantity+0x10c>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b07      	cmp	r3, #7
 800a080:	d98d      	bls.n	8009f9e <get_error_quantity+0x16>
		}
	}
	return counter;
 800a082:	4b03      	ldr	r3, [pc, #12]	@ (800a090 <get_error_quantity+0x108>)
 800a084:	781b      	ldrb	r3, [r3, #0]
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bc80      	pop	{r7}
 800a08e:	4770      	bx	lr
 800a090:	20000a48 	.word	0x20000a48
 800a094:	20000a49 	.word	0x20000a49
 800a098:	20000a38 	.word	0x20000a38
 800a09c:	20000a4a 	.word	0x20000a4a
 800a0a0:	20000a40 	.word	0x20000a40
 800a0a4:	20000a4b 	.word	0x20000a4b
 800a0a8:	20000a4c 	.word	0x20000a4c
 800a0ac:	2000017c 	.word	0x2000017c
 800a0b0:	200001b8 	.word	0x200001b8
 800a0b4:	00000000 	.word	0x00000000

0800a0b8 <fuel_mass_calculation>:
//float tenm_diesel_oxidation_eff_y[6] = { 0.0, 100.0, 200.0, 300.0, 400.0, 500.0 };
//float tenm_diesel_oxidation_eff_z[24] = { 1.0, 1.0, 1.0, 0.8, 0.95, 0.95,    0.95, 0.75, 0.9, 0.9, 0.9, 0.7,     0.85, 0.85, 0.85, 0.65, 0.8, 0.8,      0.8, 0.6, 0.8, 0.8, 0.8, 0.6 };
float tenm_exhaust_gas_cp_kjpkgk_x[8] = { 77.0, 127.0, 227.0, 327.0, 427.0, 527.0, 627.0, 727.0 };
float tenm_exhaust_gas_cp_kjpkgk_z[8] = { 1.009, 1.015, 1.031, 1.052, 1.075, 1.098, 1.12, 1.141 };

void fuel_mass_calculation(float temperature_reference, float temperature_out){
 800a0b8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]

	_weighted_filter_max_temp_degc = TENC_DOC_TEMP_WEIGHT_FACTOR * sns_eng_out_degc + (1 - TENC_DOC_TEMP_WEIGHT_FACTOR) * temperature_out;
 800a0c2:	4b3d      	ldr	r3, [pc, #244]	@ (800a1b8 <fuel_mass_calculation+0x100>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7f6 f9e2 	bl	8000490 <__aeabi_f2d>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	6838      	ldr	r0, [r7, #0]
 800a0d2:	f7f6 f9dd 	bl	8000490 <__aeabi_f2d>
 800a0d6:	f04f 0200 	mov.w	r2, #0
 800a0da:	f04f 0300 	mov.w	r3, #0
 800a0de:	f7f6 fa2f 	bl	8000540 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 f873 	bl	80001d4 <__adddf3>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f7f6 fcf3 	bl	8000ae0 <__aeabi_d2f>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a1bc <fuel_mass_calculation+0x104>)
 800a0fe:	6013      	str	r3, [r2, #0]

	exhaust_gas_cp_kjpkgk = rt_Lookup(tenm_exhaust_gas_cp_kjpkgk_x, 8, _weighted_filter_max_temp_degc, tenm_exhaust_gas_cp_kjpkgk_z);
 800a100:	4b2e      	ldr	r3, [pc, #184]	@ (800a1bc <fuel_mass_calculation+0x104>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b2e      	ldr	r3, [pc, #184]	@ (800a1c0 <fuel_mass_calculation+0x108>)
 800a106:	2108      	movs	r1, #8
 800a108:	482e      	ldr	r0, [pc, #184]	@ (800a1c4 <fuel_mass_calculation+0x10c>)
 800a10a:	f001 fd0d 	bl	800bb28 <rt_Lookup>
 800a10e:	4603      	mov	r3, r0
 800a110:	4a2d      	ldr	r2, [pc, #180]	@ (800a1c8 <fuel_mass_calculation+0x110>)
 800a112:	6013      	str	r3, [r2, #0]

	//diesel_oxidation_eff = rt_Lookup2D_Normal(tenm_diesel_oxidation_eff_x, 4, tenm_diesel_oxidation_eff_y, 6,
	//		tenm_diesel_oxidation_eff_z, _weighted_filter_max_temp_degc, regen_counter);

	ref_fuel_mass_flow_gps = (1000 * TENC_REF_FUEL_MASS_FLOW_FACTOR * exh_mass_flowrate_kgph * (temperature_reference - sns_eng_out_degc) * exhaust_gas_cp_kjpkgk )/
 800a114:	4b2d      	ldr	r3, [pc, #180]	@ (800a1cc <fuel_mass_calculation+0x114>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	f7f6 f9b9 	bl	8000490 <__aeabi_f2d>
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	4b2b      	ldr	r3, [pc, #172]	@ (800a1d0 <fuel_mass_calculation+0x118>)
 800a124:	f7f6 fa0c 	bl	8000540 <__aeabi_dmul>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	461d      	mov	r5, r3
 800a130:	4b21      	ldr	r3, [pc, #132]	@ (800a1b8 <fuel_mass_calculation+0x100>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7f6 fd26 	bl	8000b88 <__aeabi_fsub>
 800a13c:	4603      	mov	r3, r0
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f6 f9a6 	bl	8000490 <__aeabi_f2d>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f9f8 	bl	8000540 <__aeabi_dmul>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4614      	mov	r4, r2
 800a156:	461d      	mov	r5, r3
 800a158:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c8 <fuel_mass_calculation+0x110>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 f997 	bl	8000490 <__aeabi_f2d>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4620      	mov	r0, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	f7f6 f9e9 	bl	8000540 <__aeabi_dmul>
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	4614      	mov	r4, r2
 800a174:	461d      	mov	r5, r3
			(3600 * TENC_DIESEL_ENERGY_KJPKG /* diesel_oxidation_eff */ * correction_gain);
 800a176:	4b17      	ldr	r3, [pc, #92]	@ (800a1d4 <fuel_mass_calculation+0x11c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f6 f988 	bl	8000490 <__aeabi_f2d>
 800a180:	a30b      	add	r3, pc, #44	@ (adr r3, 800a1b0 <fuel_mass_calculation+0xf8>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 f9db 	bl	8000540 <__aeabi_dmul>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
	ref_fuel_mass_flow_gps = (1000 * TENC_REF_FUEL_MASS_FLOW_FACTOR * exh_mass_flowrate_kgph * (temperature_reference - sns_eng_out_degc) * exhaust_gas_cp_kjpkgk )/
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 faff 	bl	8000794 <__aeabi_ddiv>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4610      	mov	r0, r2
 800a19c:	4619      	mov	r1, r3
 800a19e:	f7f6 fc9f 	bl	8000ae0 <__aeabi_d2f>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d8 <fuel_mass_calculation+0x120>)
 800a1a6:	6013      	str	r3, [r2, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	41a3a7bd 	.word	0x41a3a7bd
 800a1b8:	20000a78 	.word	0x20000a78
 800a1bc:	20000a54 	.word	0x20000a54
 800a1c0:	200001f8 	.word	0x200001f8
 800a1c4:	200001d8 	.word	0x200001d8
 800a1c8:	20000a50 	.word	0x20000a50
 800a1cc:	20000abc 	.word	0x20000abc
 800a1d0:	408f4000 	.word	0x408f4000
 800a1d4:	20000218 	.word	0x20000218
 800a1d8:	20000ac8 	.word	0x20000ac8

0800a1dc <correction_gain_initial_calculation>:
//	if (correction_gain < 0.0001) {
//		correction_gain = 0.0001;
//	}
//}

void correction_gain_initial_calculation(void) {
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
	correction_gain = CORRECTION_GAIN_LONG_THERM;
 800a1e0:	4b03      	ldr	r3, [pc, #12]	@ (800a1f0 <correction_gain_initial_calculation+0x14>)
 800a1e2:	4a04      	ldr	r2, [pc, #16]	@ (800a1f4 <correction_gain_initial_calculation+0x18>)
 800a1e4:	601a      	str	r2, [r3, #0]
}
 800a1e6:	bf00      	nop
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20000218 	.word	0x20000218
 800a1f4:	3f59999a 	.word	0x3f59999a

0800a1f8 <correction_gain_recalculation>:


void correction_gain_recalculation(float temperature_reference, float temperature_out) {
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	correction_gain *= (temperature_out - sns_eng_out_degc)/(temperature_reference - sns_eng_out_degc);
 800a202:	4b1d      	ldr	r3, [pc, #116]	@ (800a278 <correction_gain_recalculation+0x80>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	6838      	ldr	r0, [r7, #0]
 800a20a:	f7f6 fcbd 	bl	8000b88 <__aeabi_fsub>
 800a20e:	4603      	mov	r3, r0
 800a210:	461c      	mov	r4, r3
 800a212:	4b19      	ldr	r3, [pc, #100]	@ (800a278 <correction_gain_recalculation+0x80>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7f6 fcb5 	bl	8000b88 <__aeabi_fsub>
 800a21e:	4603      	mov	r3, r0
 800a220:	4619      	mov	r1, r3
 800a222:	4620      	mov	r0, r4
 800a224:	f7f6 fe6e 	bl	8000f04 <__aeabi_fdiv>
 800a228:	4603      	mov	r3, r0
 800a22a:	461a      	mov	r2, r3
 800a22c:	4b13      	ldr	r3, [pc, #76]	@ (800a27c <correction_gain_recalculation+0x84>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4619      	mov	r1, r3
 800a232:	4610      	mov	r0, r2
 800a234:	f7f6 fdb2 	bl	8000d9c <__aeabi_fmul>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <correction_gain_recalculation+0x84>)
 800a23e:	601a      	str	r2, [r3, #0]

	if (correction_gain < 0.0001) {
 800a240:	4b0e      	ldr	r3, [pc, #56]	@ (800a27c <correction_gain_recalculation+0x84>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f7f6 f923 	bl	8000490 <__aeabi_f2d>
 800a24a:	a309      	add	r3, pc, #36	@ (adr r3, 800a270 <correction_gain_recalculation+0x78>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f6 fbe8 	bl	8000a24 <__aeabi_dcmplt>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d100      	bne.n	800a25c <correction_gain_recalculation+0x64>
		correction_gain = 0.0001;
	}
}
 800a25a:	e002      	b.n	800a262 <correction_gain_recalculation+0x6a>
		correction_gain = 0.0001;
 800a25c:	4b07      	ldr	r3, [pc, #28]	@ (800a27c <correction_gain_recalculation+0x84>)
 800a25e:	4a08      	ldr	r2, [pc, #32]	@ (800a280 <correction_gain_recalculation+0x88>)
 800a260:	601a      	str	r2, [r3, #0]
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	bd90      	pop	{r4, r7, pc}
 800a26a:	bf00      	nop
 800a26c:	f3af 8000 	nop.w
 800a270:	eb1c432d 	.word	0xeb1c432d
 800a274:	3f1a36e2 	.word	0x3f1a36e2
 800a278:	20000a78 	.word	0x20000a78
 800a27c:	20000218 	.word	0x20000218
 800a280:	38d1b717 	.word	0x38d1b717
 800a284:	00000000 	.word	0x00000000

0800a288 <hci_ctrl>:
float dpf_unstable_timer_s = 0;

void dpf_out_trand_calculation(void);
void pwm_calculation(float fuel_mass_flow_gps, bool soft_changes);

void hci_ctrl(void){
 800a288:	b5b0      	push	{r4, r5, r7, lr}
 800a28a:	af00      	add	r7, sp, #0

	// Inputs - Processed
	get_sensors_value();
 800a28c:	f001 fcbc 	bl	800bc08 <get_sensors_value>

	//soot_loading_calculation();

	//CAN_FFBA = can_receive_1(0xFFBA, CAN_FFBA);
	if (can_receive_1(0xFFBA, CAN_FFBA, 150)) {
 800a290:	2296      	movs	r2, #150	@ 0x96
 800a292:	49ad      	ldr	r1, [pc, #692]	@ (800a548 <hci_ctrl+0x2c0>)
 800a294:	f64f 70ba 	movw	r0, #65466	@ 0xffba
 800a298:	f7f7 fa82 	bl	80017a0 <can_receive_1>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d06c      	beq.n	800a37c <hci_ctrl+0xf4>
		tenc_regen_on_flag_ovd_on = CAN_FFBA[0] & 0x01;
 800a2a2:	4ba9      	ldr	r3, [pc, #676]	@ (800a548 <hci_ctrl+0x2c0>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bf14      	ite	ne
 800a2ae:	2301      	movne	r3, #1
 800a2b0:	2300      	moveq	r3, #0
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	4ba5      	ldr	r3, [pc, #660]	@ (800a54c <hci_ctrl+0x2c4>)
 800a2b6:	701a      	strb	r2, [r3, #0]
		tenc_hci_inj_pwm_ovd_on = (CAN_FFBA[0] & 0x02) >> 1;
 800a2b8:	4ba3      	ldr	r3, [pc, #652]	@ (800a548 <hci_ctrl+0x2c0>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	105b      	asrs	r3, r3, #1
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	4ba0      	ldr	r3, [pc, #640]	@ (800a550 <hci_ctrl+0x2c8>)
 800a2ce:	701a      	strb	r2, [r3, #0]
		tenc_ref_fuel_flow_gps_ovd_on = (CAN_FFBA[0] & 0x04) >> 2;
 800a2d0:	4b9d      	ldr	r3, [pc, #628]	@ (800a548 <hci_ctrl+0x2c0>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	109b      	asrs	r3, r3, #2
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bf14      	ite	ne
 800a2de:	2301      	movne	r3, #1
 800a2e0:	2300      	moveq	r3, #0
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	4b9b      	ldr	r3, [pc, #620]	@ (800a554 <hci_ctrl+0x2cc>)
 800a2e6:	701a      	strb	r2, [r3, #0]
		tenc_fuel_flow_correction_factor_ovd_on = (CAN_FFBA[0] & 0x08) >> 3;
 800a2e8:	4b97      	ldr	r3, [pc, #604]	@ (800a548 <hci_ctrl+0x2c0>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	10db      	asrs	r3, r3, #3
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bf14      	ite	ne
 800a2f6:	2301      	movne	r3, #1
 800a2f8:	2300      	moveq	r3, #0
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	4b96      	ldr	r3, [pc, #600]	@ (800a558 <hci_ctrl+0x2d0>)
 800a2fe:	701a      	strb	r2, [r3, #0]
		tenc_hci_inj_pwm_ovd_val = ((CAN_FFBA[3]<<8) + CAN_FFBA[2])*0.05; //     (CAN_FFBA[1]*0.05) ; // gain 0.5	offset +5
 800a300:	4b91      	ldr	r3, [pc, #580]	@ (800a548 <hci_ctrl+0x2c0>)
 800a302:	78db      	ldrb	r3, [r3, #3]
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	4a90      	ldr	r2, [pc, #576]	@ (800a548 <hci_ctrl+0x2c0>)
 800a308:	7892      	ldrb	r2, [r2, #2]
 800a30a:	4413      	add	r3, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f6 f8ad 	bl	800046c <__aeabi_i2d>
 800a312:	a37f      	add	r3, pc, #508	@ (adr r3, 800a510 <hci_ctrl+0x288>)
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f7f6 f912 	bl	8000540 <__aeabi_dmul>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4610      	mov	r0, r2
 800a322:	4619      	mov	r1, r3
 800a324:	f7f6 fbdc 	bl	8000ae0 <__aeabi_d2f>
 800a328:	4603      	mov	r3, r0
 800a32a:	4a8c      	ldr	r2, [pc, #560]	@ (800a55c <hci_ctrl+0x2d4>)
 800a32c:	6013      	str	r3, [r2, #0]
		tenc_ref_fuel_flow_gps_ovd_val = CAN_FFBA[1]*0.05; // gain 0.05	offset 0
 800a32e:	4b86      	ldr	r3, [pc, #536]	@ (800a548 <hci_ctrl+0x2c0>)
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 f89a 	bl	800046c <__aeabi_i2d>
 800a338:	a375      	add	r3, pc, #468	@ (adr r3, 800a510 <hci_ctrl+0x288>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f6 f8ff 	bl	8000540 <__aeabi_dmul>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4610      	mov	r0, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	f7f6 fbc9 	bl	8000ae0 <__aeabi_d2f>
 800a34e:	4603      	mov	r3, r0
 800a350:	4a83      	ldr	r2, [pc, #524]	@ (800a560 <hci_ctrl+0x2d8>)
 800a352:	6013      	str	r3, [r2, #0]
		tenc_fuel_flow_correction_factor_ovd_val = CAN_FFBA[3]*0.05; // gain 0.05	offset 0
 800a354:	4b7c      	ldr	r3, [pc, #496]	@ (800a548 <hci_ctrl+0x2c0>)
 800a356:	78db      	ldrb	r3, [r3, #3]
 800a358:	4618      	mov	r0, r3
 800a35a:	f7f6 f887 	bl	800046c <__aeabi_i2d>
 800a35e:	a36c      	add	r3, pc, #432	@ (adr r3, 800a510 <hci_ctrl+0x288>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f8ec 	bl	8000540 <__aeabi_dmul>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4610      	mov	r0, r2
 800a36e:	4619      	mov	r1, r3
 800a370:	f7f6 fbb6 	bl	8000ae0 <__aeabi_d2f>
 800a374:	4603      	mov	r3, r0
 800a376:	4a7b      	ldr	r2, [pc, #492]	@ (800a564 <hci_ctrl+0x2dc>)
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	e00b      	b.n	800a394 <hci_ctrl+0x10c>
	}
	else {
		tenc_hci_inj_pwm_ovd_on = false;
 800a37c:	4b74      	ldr	r3, [pc, #464]	@ (800a550 <hci_ctrl+0x2c8>)
 800a37e:	2200      	movs	r2, #0
 800a380:	701a      	strb	r2, [r3, #0]
		tenc_regen_on_flag_ovd_on = false;
 800a382:	4b72      	ldr	r3, [pc, #456]	@ (800a54c <hci_ctrl+0x2c4>)
 800a384:	2200      	movs	r2, #0
 800a386:	701a      	strb	r2, [r3, #0]
		tenc_ref_fuel_flow_gps_ovd_on = false;
 800a388:	4b72      	ldr	r3, [pc, #456]	@ (800a554 <hci_ctrl+0x2cc>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
		tenc_fuel_flow_correction_factor_ovd_on = false;
 800a38e:	4b72      	ldr	r3, [pc, #456]	@ (800a558 <hci_ctrl+0x2d0>)
 800a390:	2200      	movs	r2, #0
 800a392:	701a      	strb	r2, [r3, #0]
	}

// mass flow rate calculation

	air_density_kgpm3 = 1.225 * 298/(sns_temp_amb_degc+273.0)*sns_manifold_p_kpa/101.325;
 800a394:	4b74      	ldr	r3, [pc, #464]	@ (800a568 <hci_ctrl+0x2e0>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f6 f879 	bl	8000490 <__aeabi_f2d>
 800a39e:	a35e      	add	r3, pc, #376	@ (adr r3, 800a518 <hci_ctrl+0x290>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f5 ff16 	bl	80001d4 <__adddf3>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	a15c      	add	r1, pc, #368	@ (adr r1, 800a520 <hci_ctrl+0x298>)
 800a3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b2:	f7f6 f9ef 	bl	8000794 <__aeabi_ddiv>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	461d      	mov	r5, r3
 800a3be:	4b6b      	ldr	r3, [pc, #428]	@ (800a56c <hci_ctrl+0x2e4>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f6 f864 	bl	8000490 <__aeabi_f2d>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f6 f8b6 	bl	8000540 <__aeabi_dmul>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4619      	mov	r1, r3
 800a3dc:	a352      	add	r3, pc, #328	@ (adr r3, 800a528 <hci_ctrl+0x2a0>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f6 f9d7 	bl	8000794 <__aeabi_ddiv>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f7f6 fb77 	bl	8000ae0 <__aeabi_d2f>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a570 <hci_ctrl+0x2e8>)
 800a3f6:	6013      	str	r3, [r2, #0]
	exh_mass_flowrate_kgph = air_density_kgpm3 * sns_eng_speed_rpm * TENC_ENG_VD_LITER * 0.001 / 120 * 3600;
 800a3f8:	4b5d      	ldr	r3, [pc, #372]	@ (800a570 <hci_ctrl+0x2e8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a5d      	ldr	r2, [pc, #372]	@ (800a574 <hci_ctrl+0x2ec>)
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7f6 fcca 	bl	8000d9c <__aeabi_fmul>
 800a408:	4603      	mov	r3, r0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f6 f840 	bl	8000490 <__aeabi_f2d>
 800a410:	a347      	add	r3, pc, #284	@ (adr r3, 800a530 <hci_ctrl+0x2a8>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f7f6 f893 	bl	8000540 <__aeabi_dmul>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4610      	mov	r0, r2
 800a420:	4619      	mov	r1, r3
 800a422:	a345      	add	r3, pc, #276	@ (adr r3, 800a538 <hci_ctrl+0x2b0>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f6 f88a 	bl	8000540 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4610      	mov	r0, r2
 800a432:	4619      	mov	r1, r3
 800a434:	f04f 0200 	mov.w	r2, #0
 800a438:	4b4f      	ldr	r3, [pc, #316]	@ (800a578 <hci_ctrl+0x2f0>)
 800a43a:	f7f6 f9ab 	bl	8000794 <__aeabi_ddiv>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4610      	mov	r0, r2
 800a444:	4619      	mov	r1, r3
 800a446:	a33e      	add	r3, pc, #248	@ (adr r3, 800a540 <hci_ctrl+0x2b8>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f6 f878 	bl	8000540 <__aeabi_dmul>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4610      	mov	r0, r2
 800a456:	4619      	mov	r1, r3
 800a458:	f7f6 fb42 	bl	8000ae0 <__aeabi_d2f>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4a47      	ldr	r2, [pc, #284]	@ (800a57c <hci_ctrl+0x2f4>)
 800a460:	6013      	str	r3, [r2, #0]

	if ( sns_doc_out_degc > sns_dpf_out_degc ) {
 800a462:	4b47      	ldr	r3, [pc, #284]	@ (800a580 <hci_ctrl+0x2f8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a47      	ldr	r2, [pc, #284]	@ (800a584 <hci_ctrl+0x2fc>)
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f6 fe51 	bl	8001114 <__aeabi_fcmpgt>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <hci_ctrl+0x1fa>
		exhaust_temp_max_degc = sns_doc_out_degc;
 800a478:	4b41      	ldr	r3, [pc, #260]	@ (800a580 <hci_ctrl+0x2f8>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a42      	ldr	r2, [pc, #264]	@ (800a588 <hci_ctrl+0x300>)
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	e003      	b.n	800a48a <hci_ctrl+0x202>
	}
	else {
		exhaust_temp_max_degc = sns_dpf_out_degc;
 800a482:	4b40      	ldr	r3, [pc, #256]	@ (800a584 <hci_ctrl+0x2fc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a40      	ldr	r2, [pc, #256]	@ (800a588 <hci_ctrl+0x300>)
 800a488:	6013      	str	r3, [r2, #0]
	}

	if ( tenc_fuel_flow_correction_factor_ovd_on ) {
 800a48a:	4b33      	ldr	r3, [pc, #204]	@ (800a558 <hci_ctrl+0x2d0>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <hci_ctrl+0x212>
		correction_gain = tenc_fuel_flow_correction_factor_ovd_val;
 800a492:	4b34      	ldr	r3, [pc, #208]	@ (800a564 <hci_ctrl+0x2dc>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a3d      	ldr	r2, [pc, #244]	@ (800a58c <hci_ctrl+0x304>)
 800a498:	6013      	str	r3, [r2, #0]
	}

	weighted_filter_max_temp_degc = TENC_DOC_TEMP_WEIGHT_FACTOR * sns_eng_out_degc + (1 - TENC_DOC_TEMP_WEIGHT_FACTOR) * exhaust_temp_max_degc;
 800a49a:	4b3d      	ldr	r3, [pc, #244]	@ (800a590 <hci_ctrl+0x308>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7f5 fff6 	bl	8000490 <__aeabi_f2d>
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	4b37      	ldr	r3, [pc, #220]	@ (800a588 <hci_ctrl+0x300>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7f5 ffef 	bl	8000490 <__aeabi_f2d>
 800a4b2:	f04f 0200 	mov.w	r2, #0
 800a4b6:	f04f 0300 	mov.w	r3, #0
 800a4ba:	f7f6 f841 	bl	8000540 <__aeabi_dmul>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	f7f5 fe85 	bl	80001d4 <__adddf3>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	f7f6 fb05 	bl	8000ae0 <__aeabi_d2f>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4a2e      	ldr	r2, [pc, #184]	@ (800a594 <hci_ctrl+0x30c>)
 800a4da:	6013      	str	r3, [r2, #0]
// ------------------------------------------

	switch (state){
 800a4dc:	4b2e      	ldr	r3, [pc, #184]	@ (800a598 <hci_ctrl+0x310>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b08      	cmp	r3, #8
 800a4e2:	f200 853e 	bhi.w	800af62 <hci_ctrl+0xcda>
 800a4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <hci_ctrl+0x264>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a59d 	.word	0x0800a59d
 800a4f0:	0800a8b7 	.word	0x0800a8b7
 800a4f4:	0800a9d1 	.word	0x0800a9d1
 800a4f8:	0800aa63 	.word	0x0800aa63
 800a4fc:	0800ab51 	.word	0x0800ab51
 800a500:	0800ac1f 	.word	0x0800ac1f
 800a504:	0800adcd 	.word	0x0800adcd
 800a508:	0800ae1f 	.word	0x0800ae1f
 800a50c:	0800ae9d 	.word	0x0800ae9d
 800a510:	9999999a 	.word	0x9999999a
 800a514:	3fa99999 	.word	0x3fa99999
 800a518:	00000000 	.word	0x00000000
 800a51c:	40711000 	.word	0x40711000
 800a520:	cccccccd 	.word	0xcccccccd
 800a524:	4076d0cc 	.word	0x4076d0cc
 800a528:	cccccccd 	.word	0xcccccccd
 800a52c:	405954cc 	.word	0x405954cc
 800a530:	36113405 	.word	0x36113405
 800a534:	3fecbd3c 	.word	0x3fecbd3c
 800a538:	d2f1a9fc 	.word	0xd2f1a9fc
 800a53c:	3f50624d 	.word	0x3f50624d
 800a540:	00000000 	.word	0x00000000
 800a544:	40ac2000 	.word	0x40ac2000
 800a548:	20000a94 	.word	0x20000a94
 800a54c:	20000aa4 	.word	0x20000aa4
 800a550:	20000aa5 	.word	0x20000aa5
 800a554:	20000aac 	.word	0x20000aac
 800a558:	20000ab4 	.word	0x20000ab4
 800a55c:	20000aa8 	.word	0x20000aa8
 800a560:	20000ab0 	.word	0x20000ab0
 800a564:	20000ab8 	.word	0x20000ab8
 800a568:	20000a5c 	.word	0x20000a5c
 800a56c:	20000a60 	.word	0x20000a60
 800a570:	20000b00 	.word	0x20000b00
 800a574:	20000a68 	.word	0x20000a68
 800a578:	405e0000 	.word	0x405e0000
 800a57c:	20000abc 	.word	0x20000abc
 800a580:	20000a7c 	.word	0x20000a7c
 800a584:	20000a84 	.word	0x20000a84
 800a588:	20000a90 	.word	0x20000a90
 800a58c:	20000218 	.word	0x20000218
 800a590:	20000a78 	.word	0x20000a78
 800a594:	20000ac0 	.word	0x20000ac0
 800a598:	20000a58 	.word	0x20000a58
	case (REGENERATION_OFF):
			regen_off_timer_s += TS;
 800a59c:	4b50      	ldr	r3, [pc, #320]	@ (800a6e0 <hci_ctrl+0x458>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7f5 ff75 	bl	8000490 <__aeabi_f2d>
 800a5a6:	a34a      	add	r3, pc, #296	@ (adr r3, 800a6d0 <hci_ctrl+0x448>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f7f5 fe12 	bl	80001d4 <__adddf3>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	f7f6 fa92 	bl	8000ae0 <__aeabi_d2f>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	4a48      	ldr	r2, [pc, #288]	@ (800a6e0 <hci_ctrl+0x458>)
 800a5c0:	6013      	str	r3, [r2, #0]

	// DPF Delta Pressure Regeneration Triggering
			avg_temp_dpf_out_degc = (sns_doc_out_degc+sns_dpf_out_degc+sns_eng_out_degc)/3;
 800a5c2:	4b48      	ldr	r3, [pc, #288]	@ (800a6e4 <hci_ctrl+0x45c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a48      	ldr	r2, [pc, #288]	@ (800a6e8 <hci_ctrl+0x460>)
 800a5c8:	6812      	ldr	r2, [r2, #0]
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f6 fadd 	bl	8000b8c <__addsf3>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b45      	ldr	r3, [pc, #276]	@ (800a6ec <hci_ctrl+0x464>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4610      	mov	r0, r2
 800a5de:	f7f6 fad5 	bl	8000b8c <__addsf3>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4942      	ldr	r1, [pc, #264]	@ (800a6f0 <hci_ctrl+0x468>)
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7f6 fc8c 	bl	8000f04 <__aeabi_fdiv>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4b40      	ldr	r3, [pc, #256]	@ (800a6f4 <hci_ctrl+0x46c>)
 800a5f2:	601a      	str	r2, [r3, #0]
			corrected_flow_dpf_p_map_in = sqrt((avg_temp_dpf_out_degc + 273.0) / (TENC_NOM_AVG_DPF_TEMP_DEGC + 273.0)) * (sns_maf_flow_kgph/TENC_NOM_EXH_MASS_FLOW_KGPH);
 800a5f4:	4b3f      	ldr	r3, [pc, #252]	@ (800a6f4 <hci_ctrl+0x46c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f5 ff49 	bl	8000490 <__aeabi_f2d>
 800a5fe:	a336      	add	r3, pc, #216	@ (adr r3, 800a6d8 <hci_ctrl+0x450>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f5 fde6 	bl	80001d4 <__adddf3>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4610      	mov	r0, r2
 800a60e:	4619      	mov	r1, r3
 800a610:	f04f 0200 	mov.w	r2, #0
 800a614:	4b38      	ldr	r3, [pc, #224]	@ (800a6f8 <hci_ctrl+0x470>)
 800a616:	f7f6 f8bd 	bl	8000794 <__aeabi_ddiv>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4610      	mov	r0, r2
 800a620:	4619      	mov	r1, r3
 800a622:	f001 fdc1 	bl	800c1a8 <sqrt>
 800a626:	4604      	mov	r4, r0
 800a628:	460d      	mov	r5, r1
 800a62a:	4b34      	ldr	r3, [pc, #208]	@ (800a6fc <hci_ctrl+0x474>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7f5 ff2e 	bl	8000490 <__aeabi_f2d>
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	4b31      	ldr	r3, [pc, #196]	@ (800a700 <hci_ctrl+0x478>)
 800a63a:	f7f6 f8ab 	bl	8000794 <__aeabi_ddiv>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f5 ff7b 	bl	8000540 <__aeabi_dmul>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4610      	mov	r0, r2
 800a650:	4619      	mov	r1, r3
 800a652:	f7f6 fa45 	bl	8000ae0 <__aeabi_d2f>
 800a656:	4603      	mov	r3, r0
 800a658:	4a2a      	ldr	r2, [pc, #168]	@ (800a704 <hci_ctrl+0x47c>)
 800a65a:	6013      	str	r3, [r2, #0]
			corrected_flow_dpf_p_map_out = rt_Lookup(tenm_corrected_flow_deltap_x, 11, corrected_flow_dpf_p_map_in , tenm_corrected_flow_deltap_z);
 800a65c:	4b29      	ldr	r3, [pc, #164]	@ (800a704 <hci_ctrl+0x47c>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	4b29      	ldr	r3, [pc, #164]	@ (800a708 <hci_ctrl+0x480>)
 800a662:	210b      	movs	r1, #11
 800a664:	4829      	ldr	r0, [pc, #164]	@ (800a70c <hci_ctrl+0x484>)
 800a666:	f001 fa5f 	bl	800bb28 <rt_Lookup>
 800a66a:	4603      	mov	r3, r0
 800a66c:	4a28      	ldr	r2, [pc, #160]	@ (800a710 <hci_ctrl+0x488>)
 800a66e:	6013      	str	r3, [r2, #0]
			p_diff_regen_dpf_inchw = corrected_flow_dpf_p_map_out*TENC_REGEN_P_MAP_MULT;
 800a670:	4b27      	ldr	r3, [pc, #156]	@ (800a710 <hci_ctrl+0x488>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a27      	ldr	r2, [pc, #156]	@ (800a714 <hci_ctrl+0x48c>)
 800a676:	6013      	str	r3, [r2, #0]

			if ( sns_p_diff_dpf_inchw >= p_diff_regen_dpf_inchw ){
 800a678:	4b27      	ldr	r3, [pc, #156]	@ (800a718 <hci_ctrl+0x490>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a25      	ldr	r2, [pc, #148]	@ (800a714 <hci_ctrl+0x48c>)
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	4611      	mov	r1, r2
 800a682:	4618      	mov	r0, r3
 800a684:	f7f6 fd3c 	bl	8001100 <__aeabi_fcmpge>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d04a      	beq.n	800a724 <hci_ctrl+0x49c>
				regen_p_trigger_press_exceeded_timer += TS;
 800a68e:	4b23      	ldr	r3, [pc, #140]	@ (800a71c <hci_ctrl+0x494>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	f7f5 fefc 	bl	8000490 <__aeabi_f2d>
 800a698:	a30d      	add	r3, pc, #52	@ (adr r3, 800a6d0 <hci_ctrl+0x448>)
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f7f5 fd99 	bl	80001d4 <__adddf3>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	f7f6 fa19 	bl	8000ae0 <__aeabi_d2f>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a71c <hci_ctrl+0x494>)
 800a6b2:	6013      	str	r3, [r2, #0]

				if (regen_p_trigger_press_exceeded_timer > (2*TENC_REGEN_P_TRIGGER_TIME_THRES_S)){
 800a6b4:	4b19      	ldr	r3, [pc, #100]	@ (800a71c <hci_ctrl+0x494>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4919      	ldr	r1, [pc, #100]	@ (800a720 <hci_ctrl+0x498>)
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7f6 fd2a 	bl	8001114 <__aeabi_fcmpgt>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d04f      	beq.n	800a766 <hci_ctrl+0x4de>
					regen_p_trigger_press_exceeded_timer = 2*TENC_REGEN_P_TRIGGER_TIME_THRES_S;
 800a6c6:	4b15      	ldr	r3, [pc, #84]	@ (800a71c <hci_ctrl+0x494>)
 800a6c8:	4a15      	ldr	r2, [pc, #84]	@ (800a720 <hci_ctrl+0x498>)
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	e04b      	b.n	800a766 <hci_ctrl+0x4de>
 800a6ce:	bf00      	nop
 800a6d0:	9999999a 	.word	0x9999999a
 800a6d4:	3fb99999 	.word	0x3fb99999
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	40711000 	.word	0x40711000
 800a6e0:	20000ad4 	.word	0x20000ad4
 800a6e4:	20000a7c 	.word	0x20000a7c
 800a6e8:	20000a84 	.word	0x20000a84
 800a6ec:	20000a78 	.word	0x20000a78
 800a6f0:	40400000 	.word	0x40400000
 800a6f4:	20000ae0 	.word	0x20000ae0
 800a6f8:	4081e800 	.word	0x4081e800
 800a6fc:	20000a70 	.word	0x20000a70
 800a700:	409f4000 	.word	0x409f4000
 800a704:	20000ae4 	.word	0x20000ae4
 800a708:	2000024c 	.word	0x2000024c
 800a70c:	20000220 	.word	0x20000220
 800a710:	20000ae8 	.word	0x20000ae8
 800a714:	20000aec 	.word	0x20000aec
 800a718:	20000a64 	.word	0x20000a64
 800a71c:	20000b08 	.word	0x20000b08
 800a720:	44340000 	.word	0x44340000
				}
			}
			else
			{
				regen_p_trigger_press_exceeded_timer -= TS;
 800a724:	4b8c      	ldr	r3, [pc, #560]	@ (800a958 <hci_ctrl+0x6d0>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7f5 feb1 	bl	8000490 <__aeabi_f2d>
 800a72e:	a386      	add	r3, pc, #536	@ (adr r3, 800a948 <hci_ctrl+0x6c0>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f7f5 fd4c 	bl	80001d0 <__aeabi_dsub>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	4610      	mov	r0, r2
 800a73e:	4619      	mov	r1, r3
 800a740:	f7f6 f9ce 	bl	8000ae0 <__aeabi_d2f>
 800a744:	4603      	mov	r3, r0
 800a746:	4a84      	ldr	r2, [pc, #528]	@ (800a958 <hci_ctrl+0x6d0>)
 800a748:	6013      	str	r3, [r2, #0]
				if (regen_p_trigger_press_exceeded_timer < 0){
 800a74a:	4b83      	ldr	r3, [pc, #524]	@ (800a958 <hci_ctrl+0x6d0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f04f 0100 	mov.w	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f7f6 fcc0 	bl	80010d8 <__aeabi_fcmplt>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <hci_ctrl+0x4de>
					regen_p_trigger_press_exceeded_timer = 0;
 800a75e:	4b7e      	ldr	r3, [pc, #504]	@ (800a958 <hci_ctrl+0x6d0>)
 800a760:	f04f 0200 	mov.w	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
				}
			}

			if ( regen_p_trigger_press_exceeded_timer >= TENC_REGEN_P_TRIGGER_TIME_THRES_S ){
 800a766:	4b7c      	ldr	r3, [pc, #496]	@ (800a958 <hci_ctrl+0x6d0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	497c      	ldr	r1, [pc, #496]	@ (800a95c <hci_ctrl+0x6d4>)
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7f6 fcc7 	bl	8001100 <__aeabi_fcmpge>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <hci_ctrl+0x4f6>
				flag_regen_p_trigger_time_exceeded = 1;
 800a778:	4b79      	ldr	r3, [pc, #484]	@ (800a960 <hci_ctrl+0x6d8>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	701a      	strb	r2, [r3, #0]
			}

			if ( flag_regen_p_trigger_time_exceeded && ( regen_off_timer_s >= TENC_REGEN_TRIGGER_MIN_TIME )){
 800a77e:	4b78      	ldr	r3, [pc, #480]	@ (800a960 <hci_ctrl+0x6d8>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00b      	beq.n	800a79e <hci_ctrl+0x516>
 800a786:	4b77      	ldr	r3, [pc, #476]	@ (800a964 <hci_ctrl+0x6dc>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4977      	ldr	r1, [pc, #476]	@ (800a968 <hci_ctrl+0x6e0>)
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f6 fcb7 	bl	8001100 <__aeabi_fcmpge>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <hci_ctrl+0x516>
				flag_regen_p_trigger_status = 1;
 800a798:	4b74      	ldr	r3, [pc, #464]	@ (800a96c <hci_ctrl+0x6e4>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	701a      	strb	r2, [r3, #0]
			}

	// Time Regeneration Triggering
			regen_trigger_max_time_updated = (avg_temp_dpf_out_degc - TENC_REGEN_TRIG_MIN_TIME_TEMP)*(TENC_REGEN_TRIGGER_MAX_TIME -
 800a79e:	4b74      	ldr	r3, [pc, #464]	@ (800a970 <hci_ctrl+0x6e8>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7f5 fe74 	bl	8000490 <__aeabi_f2d>
 800a7a8:	f04f 0200 	mov.w	r2, #0
 800a7ac:	4b71      	ldr	r3, [pc, #452]	@ (800a974 <hci_ctrl+0x6ec>)
 800a7ae:	f7f5 fd0f 	bl	80001d0 <__aeabi_dsub>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f04f 0200 	mov.w	r2, #0
 800a7be:	4b6e      	ldr	r3, [pc, #440]	@ (800a978 <hci_ctrl+0x6f0>)
 800a7c0:	f7f5 febe 	bl	8000540 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4619      	mov	r1, r3
					TENC_REGEN_TRIGGER_MIN_TIME)/(TENC_REGEN_TRIG_MAX_TIME_TEMP - TENC_REGEN_TRIG_MIN_TIME_TEMP) + TENC_REGEN_TRIGGER_MIN_TIME;
 800a7cc:	a360      	add	r3, pc, #384	@ (adr r3, 800a950 <hci_ctrl+0x6c8>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 ffdf 	bl	8000794 <__aeabi_ddiv>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4610      	mov	r0, r2
 800a7dc:	4619      	mov	r1, r3
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	4b65      	ldr	r3, [pc, #404]	@ (800a978 <hci_ctrl+0x6f0>)
 800a7e4:	f7f5 fcf6 	bl	80001d4 <__adddf3>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	f7f6 f976 	bl	8000ae0 <__aeabi_d2f>
 800a7f4:	4603      	mov	r3, r0
			regen_trigger_max_time_updated = (avg_temp_dpf_out_degc - TENC_REGEN_TRIG_MIN_TIME_TEMP)*(TENC_REGEN_TRIGGER_MAX_TIME -
 800a7f6:	4a61      	ldr	r2, [pc, #388]	@ (800a97c <hci_ctrl+0x6f4>)
 800a7f8:	6013      	str	r3, [r2, #0]

			if (regen_trigger_max_time_updated > TENC_REGEN_TRIGGER_MAX_TIME){  // Check condition
 800a7fa:	4b60      	ldr	r3, [pc, #384]	@ (800a97c <hci_ctrl+0x6f4>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4960      	ldr	r1, [pc, #384]	@ (800a980 <hci_ctrl+0x6f8>)
 800a800:	4618      	mov	r0, r3
 800a802:	f7f6 fc87 	bl	8001114 <__aeabi_fcmpgt>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <hci_ctrl+0x58a>
				regen_trigger_max_time_updated = TENC_REGEN_TRIGGER_MAX_TIME;
 800a80c:	4b5b      	ldr	r3, [pc, #364]	@ (800a97c <hci_ctrl+0x6f4>)
 800a80e:	4a5c      	ldr	r2, [pc, #368]	@ (800a980 <hci_ctrl+0x6f8>)
 800a810:	601a      	str	r2, [r3, #0]
			}

			if (regen_trigger_max_time_updated < TENC_REGEN_TRIGGER_MIN_TIME) {
 800a812:	4b5a      	ldr	r3, [pc, #360]	@ (800a97c <hci_ctrl+0x6f4>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4954      	ldr	r1, [pc, #336]	@ (800a968 <hci_ctrl+0x6e0>)
 800a818:	4618      	mov	r0, r3
 800a81a:	f7f6 fc5d 	bl	80010d8 <__aeabi_fcmplt>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <hci_ctrl+0x5a2>
				regen_trigger_max_time_updated = TENC_REGEN_TRIGGER_MIN_TIME;
 800a824:	4b55      	ldr	r3, [pc, #340]	@ (800a97c <hci_ctrl+0x6f4>)
 800a826:	4a50      	ldr	r2, [pc, #320]	@ (800a968 <hci_ctrl+0x6e0>)
 800a828:	601a      	str	r2, [r3, #0]
			}

			regen_time_trig_time_step_sec = TENC_REGEN_TRIGGER_MAX_TIME / regen_trigger_max_time_updated;
 800a82a:	4b54      	ldr	r3, [pc, #336]	@ (800a97c <hci_ctrl+0x6f4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4619      	mov	r1, r3
 800a830:	4853      	ldr	r0, [pc, #332]	@ (800a980 <hci_ctrl+0x6f8>)
 800a832:	f7f6 fb67 	bl	8000f04 <__aeabi_fdiv>
 800a836:	4603      	mov	r3, r0
 800a838:	461a      	mov	r2, r3
 800a83a:	4b52      	ldr	r3, [pc, #328]	@ (800a984 <hci_ctrl+0x6fc>)
 800a83c:	601a      	str	r2, [r3, #0]
			corrected_time_last_regen_s += TS * regen_time_trig_time_step_sec;
 800a83e:	4b52      	ldr	r3, [pc, #328]	@ (800a988 <hci_ctrl+0x700>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f7f5 fe24 	bl	8000490 <__aeabi_f2d>
 800a848:	4604      	mov	r4, r0
 800a84a:	460d      	mov	r5, r1
 800a84c:	4b4d      	ldr	r3, [pc, #308]	@ (800a984 <hci_ctrl+0x6fc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4618      	mov	r0, r3
 800a852:	f7f5 fe1d 	bl	8000490 <__aeabi_f2d>
 800a856:	a33c      	add	r3, pc, #240	@ (adr r3, 800a948 <hci_ctrl+0x6c0>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fe70 	bl	8000540 <__aeabi_dmul>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4620      	mov	r0, r4
 800a866:	4629      	mov	r1, r5
 800a868:	f7f5 fcb4 	bl	80001d4 <__adddf3>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4610      	mov	r0, r2
 800a872:	4619      	mov	r1, r3
 800a874:	f7f6 f934 	bl	8000ae0 <__aeabi_d2f>
 800a878:	4603      	mov	r3, r0
 800a87a:	4a43      	ldr	r2, [pc, #268]	@ (800a988 <hci_ctrl+0x700>)
 800a87c:	6013      	str	r3, [r2, #0]

			if (corrected_time_last_regen_s > TENC_REGEN_TRIGGER_MAX_TIME) {
 800a87e:	4b42      	ldr	r3, [pc, #264]	@ (800a988 <hci_ctrl+0x700>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	493f      	ldr	r1, [pc, #252]	@ (800a980 <hci_ctrl+0x6f8>)
 800a884:	4618      	mov	r0, r3
 800a886:	f7f6 fc45 	bl	8001114 <__aeabi_fcmpgt>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <hci_ctrl+0x60e>
				flag_regen_time_trigger_status = 1;
 800a890:	4b3e      	ldr	r3, [pc, #248]	@ (800a98c <hci_ctrl+0x704>)
 800a892:	2201      	movs	r2, #1
 800a894:	701a      	strb	r2, [r3, #0]
			}

			if ( flag_regen_p_trigger_status || flag_regen_time_trigger_status ) {
 800a896:	4b35      	ldr	r3, [pc, #212]	@ (800a96c <hci_ctrl+0x6e4>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d104      	bne.n	800a8a8 <hci_ctrl+0x620>
 800a89e:	4b3b      	ldr	r3, [pc, #236]	@ (800a98c <hci_ctrl+0x704>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 8311 	beq.w	800aeca <hci_ctrl+0xc42>
				flag_regen_required = true;
 800a8a8:	4b39      	ldr	r3, [pc, #228]	@ (800a990 <hci_ctrl+0x708>)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	701a      	strb	r2, [r3, #0]
				state = REGENERATION_REQUIRED;
 800a8ae:	4b39      	ldr	r3, [pc, #228]	@ (800a994 <hci_ctrl+0x70c>)
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	701a      	strb	r2, [r3, #0]
			}

			break;
 800a8b4:	e309      	b.n	800aeca <hci_ctrl+0xc42>
	case (REGENERATION_REQUIRED):

			pwm_out_2 (0);
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f7f7 fdf4 	bl	80024a4 <pwm_out_2>

			if (weighted_filter_max_temp_degc > TENC_FUEL_LIGHTOFF_T_HI_DEGC){
 800a8bc:	4b36      	ldr	r3, [pc, #216]	@ (800a998 <hci_ctrl+0x710>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4936      	ldr	r1, [pc, #216]	@ (800a99c <hci_ctrl+0x714>)
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7f6 fc26 	bl	8001114 <__aeabi_fcmpgt>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <hci_ctrl+0x64c>
				flag_fuel_light_off_temp_reached = 1;
 800a8ce:	4b34      	ldr	r3, [pc, #208]	@ (800a9a0 <hci_ctrl+0x718>)
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]
			}

			if (weighted_filter_max_temp_degc < TENC_FUEL_LIGHTOFF_T_LO_DEGC){
 800a8d4:	4b30      	ldr	r3, [pc, #192]	@ (800a998 <hci_ctrl+0x710>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4932      	ldr	r1, [pc, #200]	@ (800a9a4 <hci_ctrl+0x71c>)
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f6 fbfc 	bl	80010d8 <__aeabi_fcmplt>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <hci_ctrl+0x664>
				flag_fuel_light_off_temp_reached = 0;
 800a8e6:	4b2e      	ldr	r3, [pc, #184]	@ (800a9a0 <hci_ctrl+0x718>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]
			}

			regen_reference_temp_degc = sns_eng_out_degc;
 800a8ec:	4b2e      	ldr	r3, [pc, #184]	@ (800a9a8 <hci_ctrl+0x720>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a2e      	ldr	r2, [pc, #184]	@ (800a9ac <hci_ctrl+0x724>)
 800a8f2:	6013      	str	r3, [r2, #0]

			if ( tenc_regen_on_flag_ovd_on || (flag_fuel_light_off_temp_reached &&
 800a8f4:	4b2e      	ldr	r3, [pc, #184]	@ (800a9b0 <hci_ctrl+0x728>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d118      	bne.n	800a92e <hci_ctrl+0x6a6>
 800a8fc:	4b28      	ldr	r3, [pc, #160]	@ (800a9a0 <hci_ctrl+0x718>)
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 82e4 	beq.w	800aece <hci_ctrl+0xc46>
					sns_maf_flow_kgph >= TENC_HCI_REGEN_MIN_MAF_KGPH && sns_eng_speed_rpm >= TENC_HCI_REGEN_MIN_SPEED_RPM)){
 800a906:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b4 <hci_ctrl+0x72c>)
 800a908:	681b      	ldr	r3, [r3, #0]
			if ( tenc_regen_on_flag_ovd_on || (flag_fuel_light_off_temp_reached &&
 800a90a:	492b      	ldr	r1, [pc, #172]	@ (800a9b8 <hci_ctrl+0x730>)
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f6 fbf7 	bl	8001100 <__aeabi_fcmpge>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d100      	bne.n	800a91a <hci_ctrl+0x692>
				state = PREHEATING;

				flag_regeneration_on = true;
			}

			break;
 800a918:	e2d9      	b.n	800aece <hci_ctrl+0xc46>
					sns_maf_flow_kgph >= TENC_HCI_REGEN_MIN_MAF_KGPH && sns_eng_speed_rpm >= TENC_HCI_REGEN_MIN_SPEED_RPM)){
 800a91a:	4b28      	ldr	r3, [pc, #160]	@ (800a9bc <hci_ctrl+0x734>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4928      	ldr	r1, [pc, #160]	@ (800a9c0 <hci_ctrl+0x738>)
 800a920:	4618      	mov	r0, r3
 800a922:	f7f6 fbed 	bl	8001100 <__aeabi_fcmpge>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d100      	bne.n	800a92e <hci_ctrl+0x6a6>
			break;
 800a92c:	e2cf      	b.n	800aece <hci_ctrl+0xc46>
				ref_fuel_mass_flow_gps = TENC_MIN_FUEL_MASS_FLOW_GPS;
 800a92e:	4b25      	ldr	r3, [pc, #148]	@ (800a9c4 <hci_ctrl+0x73c>)
 800a930:	4a25      	ldr	r2, [pc, #148]	@ (800a9c8 <hci_ctrl+0x740>)
 800a932:	601a      	str	r2, [r3, #0]
				state = PREHEATING;
 800a934:	4b17      	ldr	r3, [pc, #92]	@ (800a994 <hci_ctrl+0x70c>)
 800a936:	2202      	movs	r2, #2
 800a938:	701a      	strb	r2, [r3, #0]
				flag_regeneration_on = true;
 800a93a:	4b24      	ldr	r3, [pc, #144]	@ (800a9cc <hci_ctrl+0x744>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	701a      	strb	r2, [r3, #0]
			break;
 800a940:	e2c5      	b.n	800aece <hci_ctrl+0xc46>
 800a942:	bf00      	nop
 800a944:	f3af 8000 	nop.w
 800a948:	9999999a 	.word	0x9999999a
 800a94c:	3fb99999 	.word	0x3fb99999
 800a950:	00000000 	.word	0x00000000
 800a954:	c06f4000 	.word	0xc06f4000
 800a958:	20000b08 	.word	0x20000b08
 800a95c:	43b40000 	.word	0x43b40000
 800a960:	20000af8 	.word	0x20000af8
 800a964:	20000ad4 	.word	0x20000ad4
 800a968:	41f00000 	.word	0x41f00000
 800a96c:	20000af9 	.word	0x20000af9
 800a970:	20000ae0 	.word	0x20000ae0
 800a974:	40790000 	.word	0x40790000
 800a978:	403e0000 	.word	0x403e0000
 800a97c:	20000b04 	.word	0x20000b04
 800a980:	42700000 	.word	0x42700000
 800a984:	20000af0 	.word	0x20000af0
 800a988:	20000adc 	.word	0x20000adc
 800a98c:	20000afa 	.word	0x20000afa
 800a990:	20000ac5 	.word	0x20000ac5
 800a994:	20000a58 	.word	0x20000a58
 800a998:	20000ac0 	.word	0x20000ac0
 800a99c:	43700000 	.word	0x43700000
 800a9a0:	20000ac4 	.word	0x20000ac4
 800a9a4:	435c0000 	.word	0x435c0000
 800a9a8:	20000a78 	.word	0x20000a78
 800a9ac:	20000af4 	.word	0x20000af4
 800a9b0:	20000aa4 	.word	0x20000aa4
 800a9b4:	20000a70 	.word	0x20000a70
 800a9b8:	41200000 	.word	0x41200000
 800a9bc:	20000a68 	.word	0x20000a68
 800a9c0:	43fa0000 	.word	0x43fa0000
 800a9c4:	20000ac8 	.word	0x20000ac8
 800a9c8:	3d1374bc 	.word	0x3d1374bc
 800a9cc:	20000ac6 	.word	0x20000ac6
	case (PREHEATING):

			preheating_timer_s += TS;
 800a9d0:	4b9f      	ldr	r3, [pc, #636]	@ (800ac50 <hci_ctrl+0x9c8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f5 fd5b 	bl	8000490 <__aeabi_f2d>
 800a9da:	a39b      	add	r3, pc, #620	@ (adr r3, 800ac48 <hci_ctrl+0x9c0>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fbf8 	bl	80001d4 <__adddf3>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	f7f6 f878 	bl	8000ae0 <__aeabi_d2f>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	4a97      	ldr	r2, [pc, #604]	@ (800ac50 <hci_ctrl+0x9c8>)
 800a9f4:	6013      	str	r3, [r2, #0]

			pwm_calculation(TENC_MIN_FUEL_MASS_FLOW_GPS, false);
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4896      	ldr	r0, [pc, #600]	@ (800ac54 <hci_ctrl+0x9cc>)
 800a9fa:	f000 feed 	bl	800b7d8 <pwm_calculation>

			if ( preheating_timer_s > TENC_PREHEATING_MIN_TIME_S && flag_doc_out_stable && flag_dpf_out_stable ) {
 800a9fe:	4b94      	ldr	r3, [pc, #592]	@ (800ac50 <hci_ctrl+0x9c8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4995      	ldr	r1, [pc, #596]	@ (800ac58 <hci_ctrl+0x9d0>)
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7f6 fb85 	bl	8001114 <__aeabi_fcmpgt>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d017      	beq.n	800aa40 <hci_ctrl+0x7b8>
 800aa10:	4b92      	ldr	r3, [pc, #584]	@ (800ac5c <hci_ctrl+0x9d4>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d013      	beq.n	800aa40 <hci_ctrl+0x7b8>
 800aa18:	4b91      	ldr	r3, [pc, #580]	@ (800ac60 <hci_ctrl+0x9d8>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00f      	beq.n	800aa40 <hci_ctrl+0x7b8>
				regen_reference_temp_degc = exhaust_temp_max_degc;
 800aa20:	4b90      	ldr	r3, [pc, #576]	@ (800ac64 <hci_ctrl+0x9dc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a90      	ldr	r2, [pc, #576]	@ (800ac68 <hci_ctrl+0x9e0>)
 800aa26:	6013      	str	r3, [r2, #0]
				preheating_timer_s = 0;
 800aa28:	4b89      	ldr	r3, [pc, #548]	@ (800ac50 <hci_ctrl+0x9c8>)
 800aa2a:	f04f 0200 	mov.w	r2, #0
 800aa2e:	601a      	str	r2, [r3, #0]

				correction_gain_initial_calculation();
 800aa30:	f7ff fbd4 	bl	800a1dc <correction_gain_initial_calculation>
				//correction_gain_initial_calculation(exhaust_temp_max_degc, TENC_MIN_FUEL_MASS_FLOW_GPS);
				ramp_index = 0;
 800aa34:	4b8d      	ldr	r3, [pc, #564]	@ (800ac6c <hci_ctrl+0x9e4>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]

				state = RUMPING;
 800aa3a:	4b8d      	ldr	r3, [pc, #564]	@ (800ac70 <hci_ctrl+0x9e8>)
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	701a      	strb	r2, [r3, #0]
			}

			if (weighted_filter_max_temp_degc < TENC_FUEL_LIGHTOFF_T_LO_DEGC){
 800aa40:	4b8c      	ldr	r3, [pc, #560]	@ (800ac74 <hci_ctrl+0x9ec>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	498c      	ldr	r1, [pc, #560]	@ (800ac78 <hci_ctrl+0x9f0>)
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7f6 fb46 	bl	80010d8 <__aeabi_fcmplt>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d100      	bne.n	800aa54 <hci_ctrl+0x7cc>
				flag_fuel_light_off_temp_reached = 0;
				state = REGENERATION_REQUIRED;
			}

			break;
 800aa52:	e286      	b.n	800af62 <hci_ctrl+0xcda>
				flag_fuel_light_off_temp_reached = 0;
 800aa54:	4b89      	ldr	r3, [pc, #548]	@ (800ac7c <hci_ctrl+0x9f4>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]
				state = REGENERATION_REQUIRED;
 800aa5a:	4b85      	ldr	r3, [pc, #532]	@ (800ac70 <hci_ctrl+0x9e8>)
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	701a      	strb	r2, [r3, #0]
			break;
 800aa60:	e27f      	b.n	800af62 <hci_ctrl+0xcda>

	case (RUMPING):
			if ( sns_dpf_out_trand > TENC_DPF_MAX_RATE_DEGPS ){
 800aa62:	4b87      	ldr	r3, [pc, #540]	@ (800ac80 <hci_ctrl+0x9f8>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7f6 fb52 	bl	8001114 <__aeabi_fcmpgt>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d007      	beq.n	800aa86 <hci_ctrl+0x7fe>
				state = DPF_NOT_STABLE;
 800aa76:	4b7e      	ldr	r3, [pc, #504]	@ (800ac70 <hci_ctrl+0x9e8>)
 800aa78:	2207      	movs	r2, #7
 800aa7a:	701a      	strb	r2, [r3, #0]
				dpf_unstable_timer_s = 0;
 800aa7c:	4b81      	ldr	r3, [pc, #516]	@ (800ac84 <hci_ctrl+0x9fc>)
 800aa7e:	f04f 0200 	mov.w	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]
				break;
 800aa84:	e26d      	b.n	800af62 <hci_ctrl+0xcda>
			}

			if (regen_reference_temp_degc < ramp_steps_temperature_degc[ramp_index] &&
 800aa86:	4b79      	ldr	r3, [pc, #484]	@ (800ac6c <hci_ctrl+0x9e4>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac88 <hci_ctrl+0xa00>)
 800aa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa92:	4a75      	ldr	r2, [pc, #468]	@ (800ac68 <hci_ctrl+0x9e0>)
 800aa94:	6812      	ldr	r2, [r2, #0]
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f6 fb3b 	bl	8001114 <__aeabi_fcmpgt>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d030      	beq.n	800ab06 <hci_ctrl+0x87e>
					(exhaust_temp_max_degc - regen_reference_temp_degc) <= TENC_STABLE_TEMPERATURE_THRES_DEGC) {
 800aaa4:	4b6f      	ldr	r3, [pc, #444]	@ (800ac64 <hci_ctrl+0x9dc>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a6f      	ldr	r2, [pc, #444]	@ (800ac68 <hci_ctrl+0x9e0>)
 800aaaa:	6812      	ldr	r2, [r2, #0]
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7f6 f86a 	bl	8000b88 <__aeabi_fsub>
 800aab4:	4603      	mov	r3, r0
			if (regen_reference_temp_degc < ramp_steps_temperature_degc[ramp_index] &&
 800aab6:	4975      	ldr	r1, [pc, #468]	@ (800ac8c <hci_ctrl+0xa04>)
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f6 fb17 	bl	80010ec <__aeabi_fcmple>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d020      	beq.n	800ab06 <hci_ctrl+0x87e>
				regen_reference_temp_degc += regen_ramp_up_rate_degps * TS;
 800aac4:	4b68      	ldr	r3, [pc, #416]	@ (800ac68 <hci_ctrl+0x9e0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7f5 fce1 	bl	8000490 <__aeabi_f2d>
 800aace:	4604      	mov	r4, r0
 800aad0:	460d      	mov	r5, r1
 800aad2:	4b6f      	ldr	r3, [pc, #444]	@ (800ac90 <hci_ctrl+0xa08>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f5 fcda 	bl	8000490 <__aeabi_f2d>
 800aadc:	a35a      	add	r3, pc, #360	@ (adr r3, 800ac48 <hci_ctrl+0x9c0>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fd2d 	bl	8000540 <__aeabi_dmul>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4620      	mov	r0, r4
 800aaec:	4629      	mov	r1, r5
 800aaee:	f7f5 fb71 	bl	80001d4 <__adddf3>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f7f5 fff1 	bl	8000ae0 <__aeabi_d2f>
 800aafe:	4603      	mov	r3, r0
 800ab00:	4a59      	ldr	r2, [pc, #356]	@ (800ac68 <hci_ctrl+0x9e0>)
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	e005      	b.n	800ab12 <hci_ctrl+0x88a>
			}
			else {
				flag_doc_out_0_1 = false;
 800ab06:	4b63      	ldr	r3, [pc, #396]	@ (800ac94 <hci_ctrl+0xa0c>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
				state = STABILIZATION;
 800ab0c:	4b58      	ldr	r3, [pc, #352]	@ (800ac70 <hci_ctrl+0x9e8>)
 800ab0e:	2204      	movs	r2, #4
 800ab10:	701a      	strb	r2, [r3, #0]
			}

			fuel_mass_calculation(regen_reference_temp_degc, exhaust_temp_max_degc);
 800ab12:	4b55      	ldr	r3, [pc, #340]	@ (800ac68 <hci_ctrl+0x9e0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a53      	ldr	r2, [pc, #332]	@ (800ac64 <hci_ctrl+0x9dc>)
 800ab18:	6812      	ldr	r2, [r2, #0]
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff facb 	bl	800a0b8 <fuel_mass_calculation>
			pwm_calculation(ref_fuel_mass_flow_gps, false);
 800ab22:	4b5d      	ldr	r3, [pc, #372]	@ (800ac98 <hci_ctrl+0xa10>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2100      	movs	r1, #0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fe55 	bl	800b7d8 <pwm_calculation>

			if (weighted_filter_max_temp_degc < TENC_FUEL_LIGHTOFF_T_LO_DEGC){
 800ab2e:	4b51      	ldr	r3, [pc, #324]	@ (800ac74 <hci_ctrl+0x9ec>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4951      	ldr	r1, [pc, #324]	@ (800ac78 <hci_ctrl+0x9f0>)
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7f6 facf 	bl	80010d8 <__aeabi_fcmplt>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d100      	bne.n	800ab42 <hci_ctrl+0x8ba>
				flag_fuel_light_off_temp_reached = 0;
				state = REGENERATION_REQUIRED;
			}

			break;
 800ab40:	e20f      	b.n	800af62 <hci_ctrl+0xcda>
				flag_fuel_light_off_temp_reached = 0;
 800ab42:	4b4e      	ldr	r3, [pc, #312]	@ (800ac7c <hci_ctrl+0x9f4>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
				state = REGENERATION_REQUIRED;
 800ab48:	4b49      	ldr	r3, [pc, #292]	@ (800ac70 <hci_ctrl+0x9e8>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	701a      	strb	r2, [r3, #0]
			break;
 800ab4e:	e208      	b.n	800af62 <hci_ctrl+0xcda>
	case (STABILIZATION):
			if ( sns_dpf_out_trand > TENC_DPF_MAX_RATE_DEGPS ){
 800ab50:	4b4b      	ldr	r3, [pc, #300]	@ (800ac80 <hci_ctrl+0x9f8>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7f6 fadb 	bl	8001114 <__aeabi_fcmpgt>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d007      	beq.n	800ab74 <hci_ctrl+0x8ec>
				state = DPF_NOT_STABLE;
 800ab64:	4b42      	ldr	r3, [pc, #264]	@ (800ac70 <hci_ctrl+0x9e8>)
 800ab66:	2207      	movs	r2, #7
 800ab68:	701a      	strb	r2, [r3, #0]
				dpf_unstable_timer_s = 0;
 800ab6a:	4b46      	ldr	r3, [pc, #280]	@ (800ac84 <hci_ctrl+0x9fc>)
 800ab6c:	f04f 0200 	mov.w	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]
				break;
 800ab72:	e1f6      	b.n	800af62 <hci_ctrl+0xcda>
			}

			if (weighted_filter_max_temp_degc < TENC_FUEL_LIGHTOFF_T_LO_DEGC){
 800ab74:	4b3f      	ldr	r3, [pc, #252]	@ (800ac74 <hci_ctrl+0x9ec>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	493f      	ldr	r1, [pc, #252]	@ (800ac78 <hci_ctrl+0x9f0>)
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7f6 faac 	bl	80010d8 <__aeabi_fcmplt>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d006      	beq.n	800ab94 <hci_ctrl+0x90c>
				flag_fuel_light_off_temp_reached = 0;
 800ab86:	4b3d      	ldr	r3, [pc, #244]	@ (800ac7c <hci_ctrl+0x9f4>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
				state = REGENERATION_REQUIRED;
 800ab8c:	4b38      	ldr	r3, [pc, #224]	@ (800ac70 <hci_ctrl+0x9e8>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	701a      	strb	r2, [r3, #0]
				break;
 800ab92:	e1e6      	b.n	800af62 <hci_ctrl+0xcda>
			}


			if (flag_doc_out_0_1) {
 800ab94:	4b3f      	ldr	r3, [pc, #252]	@ (800ac94 <hci_ctrl+0xa0c>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d031      	beq.n	800ac00 <hci_ctrl+0x978>
				if ( (ramp_steps_temperature_degc[ramp_index] - exhaust_temp_max_degc) <= TENC_STABLE_TEMPERATURE_THRES_DEGC ){
 800ab9c:	4b33      	ldr	r3, [pc, #204]	@ (800ac6c <hci_ctrl+0x9e4>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	461a      	mov	r2, r3
 800aba2:	4b39      	ldr	r3, [pc, #228]	@ (800ac88 <hci_ctrl+0xa00>)
 800aba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba8:	4a2e      	ldr	r2, [pc, #184]	@ (800ac64 <hci_ctrl+0x9dc>)
 800abaa:	6812      	ldr	r2, [r2, #0]
 800abac:	4611      	mov	r1, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f5 ffea 	bl	8000b88 <__aeabi_fsub>
 800abb4:	4603      	mov	r3, r0
 800abb6:	4935      	ldr	r1, [pc, #212]	@ (800ac8c <hci_ctrl+0xa04>)
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f6 fa97 	bl	80010ec <__aeabi_fcmple>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00b      	beq.n	800abdc <hci_ctrl+0x954>
					regen_reference_temp_degc = ramp_steps_temperature_degc[ramp_index];
 800abc4:	4b29      	ldr	r3, [pc, #164]	@ (800ac6c <hci_ctrl+0x9e4>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	461a      	mov	r2, r3
 800abca:	4b2f      	ldr	r3, [pc, #188]	@ (800ac88 <hci_ctrl+0xa00>)
 800abcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd0:	4a25      	ldr	r2, [pc, #148]	@ (800ac68 <hci_ctrl+0x9e0>)
 800abd2:	6013      	str	r3, [r2, #0]
					state = REGENERATION;
 800abd4:	4b26      	ldr	r3, [pc, #152]	@ (800ac70 <hci_ctrl+0x9e8>)
 800abd6:	2205      	movs	r2, #5
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e011      	b.n	800ac00 <hci_ctrl+0x978>
				}
				else{
					flag_doc_out_0_1 = false;
 800abdc:	4b2d      	ldr	r3, [pc, #180]	@ (800ac94 <hci_ctrl+0xa0c>)
 800abde:	2200      	movs	r2, #0
 800abe0:	701a      	strb	r2, [r3, #0]
					correction_gain_recalculation(regen_reference_temp_degc, exhaust_temp_max_degc);
 800abe2:	4b21      	ldr	r3, [pc, #132]	@ (800ac68 <hci_ctrl+0x9e0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a1f      	ldr	r2, [pc, #124]	@ (800ac64 <hci_ctrl+0x9dc>)
 800abe8:	6812      	ldr	r2, [r2, #0]
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fb03 	bl	800a1f8 <correction_gain_recalculation>
					regen_reference_temp_degc = exhaust_temp_max_degc;
 800abf2:	4b1c      	ldr	r3, [pc, #112]	@ (800ac64 <hci_ctrl+0x9dc>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ac68 <hci_ctrl+0x9e0>)
 800abf8:	6013      	str	r3, [r2, #0]
					state = RUMPING;
 800abfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ac70 <hci_ctrl+0x9e8>)
 800abfc:	2203      	movs	r2, #3
 800abfe:	701a      	strb	r2, [r3, #0]
				}
			}

			fuel_mass_calculation(regen_reference_temp_degc, exhaust_temp_max_degc);
 800ac00:	4b19      	ldr	r3, [pc, #100]	@ (800ac68 <hci_ctrl+0x9e0>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a17      	ldr	r2, [pc, #92]	@ (800ac64 <hci_ctrl+0x9dc>)
 800ac06:	6812      	ldr	r2, [r2, #0]
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fa54 	bl	800a0b8 <fuel_mass_calculation>
			pwm_calculation(ref_fuel_mass_flow_gps, false);
 800ac10:	4b21      	ldr	r3, [pc, #132]	@ (800ac98 <hci_ctrl+0xa10>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fdde 	bl	800b7d8 <pwm_calculation>
			break;
 800ac1c:	e1a1      	b.n	800af62 <hci_ctrl+0xcda>

	case (REGENERATION):

	// DPF non stable condition checking
			if ( sns_dpf_out_trand > TENC_DPF_MAX_RATE_DEGPS ){
 800ac1e:	4b18      	ldr	r3, [pc, #96]	@ (800ac80 <hci_ctrl+0x9f8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f6 fa74 	bl	8001114 <__aeabi_fcmpgt>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d034      	beq.n	800ac9c <hci_ctrl+0xa14>
				state = DPF_NOT_STABLE;
 800ac32:	4b0f      	ldr	r3, [pc, #60]	@ (800ac70 <hci_ctrl+0x9e8>)
 800ac34:	2207      	movs	r2, #7
 800ac36:	701a      	strb	r2, [r3, #0]
				dpf_unstable_timer_s = 0;
 800ac38:	4b12      	ldr	r3, [pc, #72]	@ (800ac84 <hci_ctrl+0x9fc>)
 800ac3a:	f04f 0200 	mov.w	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
				break;
 800ac40:	e18f      	b.n	800af62 <hci_ctrl+0xcda>
 800ac42:	bf00      	nop
 800ac44:	f3af 8000 	nop.w
 800ac48:	9999999a 	.word	0x9999999a
 800ac4c:	3fb99999 	.word	0x3fb99999
 800ac50:	20000ad8 	.word	0x20000ad8
 800ac54:	3d1374bc 	.word	0x3d1374bc
 800ac58:	41a00000 	.word	0x41a00000
 800ac5c:	20000b96 	.word	0x20000b96
 800ac60:	20000b99 	.word	0x20000b99
 800ac64:	20000a90 	.word	0x20000a90
 800ac68:	20000af4 	.word	0x20000af4
 800ac6c:	20000b9c 	.word	0x20000b9c
 800ac70:	20000a58 	.word	0x20000a58
 800ac74:	20000ac0 	.word	0x20000ac0
 800ac78:	435c0000 	.word	0x435c0000
 800ac7c:	20000ac4 	.word	0x20000ac4
 800ac80:	20000a8c 	.word	0x20000a8c
 800ac84:	20000ba4 	.word	0x20000ba4
 800ac88:	20000278 	.word	0x20000278
 800ac8c:	40e00000 	.word	0x40e00000
 800ac90:	2000028c 	.word	0x2000028c
 800ac94:	20000b98 	.word	0x20000b98
 800ac98:	20000ac8 	.word	0x20000ac8
			}

			if (weighted_filter_max_temp_degc < TENC_FUEL_LIGHTOFF_T_LO_DEGC){
 800ac9c:	4b90      	ldr	r3, [pc, #576]	@ (800aee0 <hci_ctrl+0xc58>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4990      	ldr	r1, [pc, #576]	@ (800aee4 <hci_ctrl+0xc5c>)
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f6 fa18 	bl	80010d8 <__aeabi_fcmplt>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d006      	beq.n	800acbc <hci_ctrl+0xa34>
				flag_fuel_light_off_temp_reached = 0;
 800acae:	4b8e      	ldr	r3, [pc, #568]	@ (800aee8 <hci_ctrl+0xc60>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	701a      	strb	r2, [r3, #0]
				state = REGENERATION_REQUIRED;
 800acb4:	4b8d      	ldr	r3, [pc, #564]	@ (800aeec <hci_ctrl+0xc64>)
 800acb6:	2201      	movs	r2, #1
 800acb8:	701a      	strb	r2, [r3, #0]
				break;
 800acba:	e152      	b.n	800af62 <hci_ctrl+0xcda>
			}

			fuel_mass_calculation(regen_reference_temp_degc, exhaust_temp_max_degc);
 800acbc:	4b8c      	ldr	r3, [pc, #560]	@ (800aef0 <hci_ctrl+0xc68>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a8c      	ldr	r2, [pc, #560]	@ (800aef4 <hci_ctrl+0xc6c>)
 800acc2:	6812      	ldr	r2, [r2, #0]
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff f9f6 	bl	800a0b8 <fuel_mass_calculation>
			pwm_calculation(ref_fuel_mass_flow_gps, false);
 800accc:	4b8a      	ldr	r3, [pc, #552]	@ (800aef8 <hci_ctrl+0xc70>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2100      	movs	r1, #0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fd80 	bl	800b7d8 <pwm_calculation>

			if (flag_doc_out_0_1 && flag_dpf_out_0_1 ) {
 800acd8:	4b88      	ldr	r3, [pc, #544]	@ (800aefc <hci_ctrl+0xc74>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d011      	beq.n	800ad04 <hci_ctrl+0xa7c>
 800ace0:	4b87      	ldr	r3, [pc, #540]	@ (800af00 <hci_ctrl+0xc78>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00d      	beq.n	800ad04 <hci_ctrl+0xa7c>
				flag_doc_out_0_1 = false;
 800ace8:	4b84      	ldr	r3, [pc, #528]	@ (800aefc <hci_ctrl+0xc74>)
 800acea:	2200      	movs	r2, #0
 800acec:	701a      	strb	r2, [r3, #0]
				flag_dpf_out_0_1 = false;
 800acee:	4b84      	ldr	r3, [pc, #528]	@ (800af00 <hci_ctrl+0xc78>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	701a      	strb	r2, [r3, #0]
				correction_gain_recalculation(regen_reference_temp_degc, exhaust_temp_max_degc);
 800acf4:	4b7e      	ldr	r3, [pc, #504]	@ (800aef0 <hci_ctrl+0xc68>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a7e      	ldr	r2, [pc, #504]	@ (800aef4 <hci_ctrl+0xc6c>)
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fa7a 	bl	800a1f8 <correction_gain_recalculation>
			}

			regen_on_timer_s += TS;
 800ad04:	4b7f      	ldr	r3, [pc, #508]	@ (800af04 <hci_ctrl+0xc7c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f5 fbc1 	bl	8000490 <__aeabi_f2d>
 800ad0e:	a372      	add	r3, pc, #456	@ (adr r3, 800aed8 <hci_ctrl+0xc50>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fa5e 	bl	80001d4 <__adddf3>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f7f5 fede 	bl	8000ae0 <__aeabi_d2f>
 800ad24:	4603      	mov	r3, r0
 800ad26:	4a77      	ldr	r2, [pc, #476]	@ (800af04 <hci_ctrl+0xc7c>)
 800ad28:	6013      	str	r3, [r2, #0]

			if (ramp_index < TENC_RAMP_STEPS - 1){
 800ad2a:	4b77      	ldr	r3, [pc, #476]	@ (800af08 <hci_ctrl+0xc80>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d83e      	bhi.n	800adb0 <hci_ctrl+0xb28>
				if ((regen_reference_temp_degc - exhaust_temp_max_degc) <= TENC_HCI_REGENERATION_THRES_DEGC) {
 800ad32:	4b6f      	ldr	r3, [pc, #444]	@ (800aef0 <hci_ctrl+0xc68>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a6f      	ldr	r2, [pc, #444]	@ (800aef4 <hci_ctrl+0xc6c>)
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7f5 ff23 	bl	8000b88 <__aeabi_fsub>
 800ad42:	4603      	mov	r3, r0
 800ad44:	4971      	ldr	r1, [pc, #452]	@ (800af0c <hci_ctrl+0xc84>)
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f6 f9d0 	bl	80010ec <__aeabi_fcmple>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d012      	beq.n	800ad78 <hci_ctrl+0xaf0>
					ramp_step_timer_s += TS;
 800ad52:	4b6f      	ldr	r3, [pc, #444]	@ (800af10 <hci_ctrl+0xc88>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7f5 fb9a 	bl	8000490 <__aeabi_f2d>
 800ad5c:	a35e      	add	r3, pc, #376	@ (adr r3, 800aed8 <hci_ctrl+0xc50>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fa37 	bl	80001d4 <__adddf3>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	f7f5 feb7 	bl	8000ae0 <__aeabi_d2f>
 800ad72:	4603      	mov	r3, r0
 800ad74:	4a66      	ldr	r2, [pc, #408]	@ (800af10 <hci_ctrl+0xc88>)
 800ad76:	6013      	str	r3, [r2, #0]
				}
				if (ramp_step_timer_s > ramp_steps_duration_s[ramp_index]){
 800ad78:	4b63      	ldr	r3, [pc, #396]	@ (800af08 <hci_ctrl+0xc80>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b65      	ldr	r3, [pc, #404]	@ (800af14 <hci_ctrl+0xc8c>)
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	4a62      	ldr	r2, [pc, #392]	@ (800af10 <hci_ctrl+0xc88>)
 800ad86:	6812      	ldr	r2, [r2, #0]
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f6 f9a4 	bl	80010d8 <__aeabi_fcmplt>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00c      	beq.n	800adb0 <hci_ctrl+0xb28>
					ramp_index++;
 800ad96:	4b5c      	ldr	r3, [pc, #368]	@ (800af08 <hci_ctrl+0xc80>)
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	4b5a      	ldr	r3, [pc, #360]	@ (800af08 <hci_ctrl+0xc80>)
 800ada0:	701a      	strb	r2, [r3, #0]
					ramp_step_timer_s = 0;
 800ada2:	4b5b      	ldr	r3, [pc, #364]	@ (800af10 <hci_ctrl+0xc88>)
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
					state = RUMPING;
 800adaa:	4b50      	ldr	r3, [pc, #320]	@ (800aeec <hci_ctrl+0xc64>)
 800adac:	2203      	movs	r2, #3
 800adae:	701a      	strb	r2, [r3, #0]
				}
			}

			if ( regen_on_timer_s > TENC_MAX_REGEN_ON_DURATION_S ) {
 800adb0:	4b54      	ldr	r3, [pc, #336]	@ (800af04 <hci_ctrl+0xc7c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4958      	ldr	r1, [pc, #352]	@ (800af18 <hci_ctrl+0xc90>)
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f6 f9ac 	bl	8001114 <__aeabi_fcmpgt>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d100      	bne.n	800adc4 <hci_ctrl+0xb3c>
				state = REGENERATION_COMPLEATED;
			}

			break;
 800adc2:	e0ce      	b.n	800af62 <hci_ctrl+0xcda>
				state = REGENERATION_COMPLEATED;
 800adc4:	4b49      	ldr	r3, [pc, #292]	@ (800aeec <hci_ctrl+0xc64>)
 800adc6:	2206      	movs	r2, #6
 800adc8:	701a      	strb	r2, [r3, #0]
			break;
 800adca:	e0ca      	b.n	800af62 <hci_ctrl+0xcda>

	case (REGENERATION_COMPLEATED):
			flag_regen_p_trigger_status = false;
 800adcc:	4b53      	ldr	r3, [pc, #332]	@ (800af1c <hci_ctrl+0xc94>)
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
			flag_regeneration_on = false;
 800add2:	4b53      	ldr	r3, [pc, #332]	@ (800af20 <hci_ctrl+0xc98>)
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
			flag_regen_p_trigger_time_exceeded = false;
 800add8:	4b52      	ldr	r3, [pc, #328]	@ (800af24 <hci_ctrl+0xc9c>)
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
			corrected_time_last_regen_s = 0;
 800adde:	4b52      	ldr	r3, [pc, #328]	@ (800af28 <hci_ctrl+0xca0>)
 800ade0:	f04f 0200 	mov.w	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
			flag_regen_time_trigger_status = false;
 800ade6:	4b51      	ldr	r3, [pc, #324]	@ (800af2c <hci_ctrl+0xca4>)
 800ade8:	2200      	movs	r2, #0
 800adea:	701a      	strb	r2, [r3, #0]
			flag_regen_required = false;
 800adec:	4b50      	ldr	r3, [pc, #320]	@ (800af30 <hci_ctrl+0xca8>)
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]

			regen_on_timer_s = 0;
 800adf2:	4b44      	ldr	r3, [pc, #272]	@ (800af04 <hci_ctrl+0xc7c>)
 800adf4:	f04f 0200 	mov.w	r2, #0
 800adf8:	601a      	str	r2, [r3, #0]
			regen_off_timer_s = 0;
 800adfa:	4b4e      	ldr	r3, [pc, #312]	@ (800af34 <hci_ctrl+0xcac>)
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
			preheating_timer_s = 0;
 800ae02:	4b4d      	ldr	r3, [pc, #308]	@ (800af38 <hci_ctrl+0xcb0>)
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]

			regen_counter ++;
 800ae0a:	4b4c      	ldr	r3, [pc, #304]	@ (800af3c <hci_ctrl+0xcb4>)
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	4b4a      	ldr	r3, [pc, #296]	@ (800af3c <hci_ctrl+0xcb4>)
 800ae14:	801a      	strh	r2, [r3, #0]

			state = REGENERATION_OFF;
 800ae16:	4b35      	ldr	r3, [pc, #212]	@ (800aeec <hci_ctrl+0xc64>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
			break;
 800ae1c:	e0a1      	b.n	800af62 <hci_ctrl+0xcda>

	case (DPF_NOT_STABLE):
			if (dpf_unstable_timer_s * TS > TENC_DPF_UNSTABLE_ANALYZE_TIME_S) {
 800ae1e:	4b48      	ldr	r3, [pc, #288]	@ (800af40 <hci_ctrl+0xcb8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7f5 fb34 	bl	8000490 <__aeabi_f2d>
 800ae28:	a32b      	add	r3, pc, #172	@ (adr r3, 800aed8 <hci_ctrl+0xc50>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f7f5 fb87 	bl	8000540 <__aeabi_dmul>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	4610      	mov	r0, r2
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	4b41      	ldr	r3, [pc, #260]	@ (800af44 <hci_ctrl+0xcbc>)
 800ae40:	f7f5 fe0e 	bl	8000a60 <__aeabi_dcmpgt>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01c      	beq.n	800ae84 <hci_ctrl+0xbfc>
				if ( sns_dpf_out_trand > TENC_DPF_MAX_RATE_DEGPS ){
 800ae4a:	4b3f      	ldr	r3, [pc, #252]	@ (800af48 <hci_ctrl+0xcc0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7f6 f95e 	bl	8001114 <__aeabi_fcmpgt>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00e      	beq.n	800ae7c <hci_ctrl+0xbf4>
					ref_fuel_mass_flow_gps_corrected = 0;
 800ae5e:	4b3b      	ldr	r3, [pc, #236]	@ (800af4c <hci_ctrl+0xcc4>)
 800ae60:	f04f 0200 	mov.w	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
					pump_period = 0;
 800ae66:	4b3a      	ldr	r3, [pc, #232]	@ (800af50 <hci_ctrl+0xcc8>)
 800ae68:	f04f 0200 	mov.w	r2, #0
 800ae6c:	601a      	str	r2, [r3, #0]
					pwm_out_2 (0);
 800ae6e:	2000      	movs	r0, #0
 800ae70:	f7f7 fb18 	bl	80024a4 <pwm_out_2>
					state = OVERHEATING;
 800ae74:	4b1d      	ldr	r3, [pc, #116]	@ (800aeec <hci_ctrl+0xc64>)
 800ae76:	2208      	movs	r2, #8
 800ae78:	701a      	strb	r2, [r3, #0]
				}
				else {
					state = RUMPING;
				}
				break;
 800ae7a:	e072      	b.n	800af62 <hci_ctrl+0xcda>
					state = RUMPING;
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	@ (800aeec <hci_ctrl+0xc64>)
 800ae7e:	2203      	movs	r2, #3
 800ae80:	701a      	strb	r2, [r3, #0]
				break;
 800ae82:	e06e      	b.n	800af62 <hci_ctrl+0xcda>
			}
			dpf_unstable_timer_s++;
 800ae84:	4b2e      	ldr	r3, [pc, #184]	@ (800af40 <hci_ctrl+0xcb8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f5 fe7d 	bl	8000b8c <__addsf3>
 800ae92:	4603      	mov	r3, r0
 800ae94:	461a      	mov	r2, r3
 800ae96:	4b2a      	ldr	r3, [pc, #168]	@ (800af40 <hci_ctrl+0xcb8>)
 800ae98:	601a      	str	r2, [r3, #0]
			break;
 800ae9a:	e062      	b.n	800af62 <hci_ctrl+0xcda>

	case (OVERHEATING):
			if (flag_doc_out_stable && flag_dpf_out_stable) {
 800ae9c:	4b2d      	ldr	r3, [pc, #180]	@ (800af54 <hci_ctrl+0xccc>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d05d      	beq.n	800af60 <hci_ctrl+0xcd8>
 800aea4:	4b2c      	ldr	r3, [pc, #176]	@ (800af58 <hci_ctrl+0xcd0>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d059      	beq.n	800af60 <hci_ctrl+0xcd8>
				regen_ramp_up_rate_degps *= 0.75;
 800aeac:	4b2b      	ldr	r3, [pc, #172]	@ (800af5c <hci_ctrl+0xcd4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7f5 ff71 	bl	8000d9c <__aeabi_fmul>
 800aeba:	4603      	mov	r3, r0
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b27      	ldr	r3, [pc, #156]	@ (800af5c <hci_ctrl+0xcd4>)
 800aec0:	601a      	str	r2, [r3, #0]
				state = REGENERATION_REQUIRED;
 800aec2:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <hci_ctrl+0xc64>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	701a      	strb	r2, [r3, #0]
			}
			break;
 800aec8:	e04a      	b.n	800af60 <hci_ctrl+0xcd8>
			break;
 800aeca:	bf00      	nop
 800aecc:	e049      	b.n	800af62 <hci_ctrl+0xcda>
			break;
 800aece:	bf00      	nop
 800aed0:	e047      	b.n	800af62 <hci_ctrl+0xcda>
 800aed2:	bf00      	nop
 800aed4:	f3af 8000 	nop.w
 800aed8:	9999999a 	.word	0x9999999a
 800aedc:	3fb99999 	.word	0x3fb99999
 800aee0:	20000ac0 	.word	0x20000ac0
 800aee4:	435c0000 	.word	0x435c0000
 800aee8:	20000ac4 	.word	0x20000ac4
 800aeec:	20000a58 	.word	0x20000a58
 800aef0:	20000af4 	.word	0x20000af4
 800aef4:	20000a90 	.word	0x20000a90
 800aef8:	20000ac8 	.word	0x20000ac8
 800aefc:	20000b98 	.word	0x20000b98
 800af00:	20000b9b 	.word	0x20000b9b
 800af04:	20000ad0 	.word	0x20000ad0
 800af08:	20000b9c 	.word	0x20000b9c
 800af0c:	41700000 	.word	0x41700000
 800af10:	20000ba0 	.word	0x20000ba0
 800af14:	20000284 	.word	0x20000284
 800af18:	44e10000 	.word	0x44e10000
 800af1c:	20000af9 	.word	0x20000af9
 800af20:	20000ac6 	.word	0x20000ac6
 800af24:	20000af8 	.word	0x20000af8
 800af28:	20000adc 	.word	0x20000adc
 800af2c:	20000afa 	.word	0x20000afa
 800af30:	20000ac5 	.word	0x20000ac5
 800af34:	20000ad4 	.word	0x20000ad4
 800af38:	20000ad8 	.word	0x20000ad8
 800af3c:	2000021c 	.word	0x2000021c
 800af40:	20000ba4 	.word	0x20000ba4
 800af44:	40080000 	.word	0x40080000
 800af48:	20000a8c 	.word	0x20000a8c
 800af4c:	20000afc 	.word	0x20000afc
 800af50:	20000acc 	.word	0x20000acc
 800af54:	20000b96 	.word	0x20000b96
 800af58:	20000b99 	.word	0x20000b99
 800af5c:	2000028c 	.word	0x2000028c
			break;
 800af60:	bf00      	nop

	case (ERROR):

	}

	Transmit_Data[0] = ((uint16_t)((sns_manifold_p_kpa+100)/0.05))&0xFF;  // gain 0.05   offset -100
 800af62:	4bb1      	ldr	r3, [pc, #708]	@ (800b228 <hci_ctrl+0xfa0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	49b1      	ldr	r1, [pc, #708]	@ (800b22c <hci_ctrl+0xfa4>)
 800af68:	4618      	mov	r0, r3
 800af6a:	f7f5 fe0f 	bl	8000b8c <__addsf3>
 800af6e:	4603      	mov	r3, r0
 800af70:	4618      	mov	r0, r3
 800af72:	f7f5 fa8d 	bl	8000490 <__aeabi_f2d>
 800af76:	a3aa      	add	r3, pc, #680	@ (adr r3, 800b220 <hci_ctrl+0xf98>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f7f5 fc0a 	bl	8000794 <__aeabi_ddiv>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4610      	mov	r0, r2
 800af86:	4619      	mov	r1, r3
 800af88:	f7f5 fd8a 	bl	8000aa0 <__aeabi_d2uiz>
 800af8c:	4603      	mov	r3, r0
 800af8e:	b29b      	uxth	r3, r3
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4ba7      	ldr	r3, [pc, #668]	@ (800b230 <hci_ctrl+0xfa8>)
 800af94:	701a      	strb	r2, [r3, #0]
	Transmit_Data[1] = ((uint16_t)((sns_manifold_p_kpa+100)/0.05))>>8;
 800af96:	4ba4      	ldr	r3, [pc, #656]	@ (800b228 <hci_ctrl+0xfa0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	49a4      	ldr	r1, [pc, #656]	@ (800b22c <hci_ctrl+0xfa4>)
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7f5 fdf5 	bl	8000b8c <__addsf3>
 800afa2:	4603      	mov	r3, r0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7f5 fa73 	bl	8000490 <__aeabi_f2d>
 800afaa:	a39d      	add	r3, pc, #628	@ (adr r3, 800b220 <hci_ctrl+0xf98>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	f7f5 fbf0 	bl	8000794 <__aeabi_ddiv>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4610      	mov	r0, r2
 800afba:	4619      	mov	r1, r3
 800afbc:	f7f5 fd70 	bl	8000aa0 <__aeabi_d2uiz>
 800afc0:	4603      	mov	r3, r0
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	0a1b      	lsrs	r3, r3, #8
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b99      	ldr	r3, [pc, #612]	@ (800b230 <hci_ctrl+0xfa8>)
 800afcc:	705a      	strb	r2, [r3, #1]
	Transmit_Data[2] = ((uint8_t)((sns_p_diff_dpf_inchw+20)/0.5)); // gain 0.5  offset -20
 800afce:	4b99      	ldr	r3, [pc, #612]	@ (800b234 <hci_ctrl+0xfac>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4999      	ldr	r1, [pc, #612]	@ (800b238 <hci_ctrl+0xfb0>)
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7f5 fdd9 	bl	8000b8c <__addsf3>
 800afda:	4603      	mov	r3, r0
 800afdc:	4618      	mov	r0, r3
 800afde:	f7f5 fa57 	bl	8000490 <__aeabi_f2d>
 800afe2:	f04f 0200 	mov.w	r2, #0
 800afe6:	4b95      	ldr	r3, [pc, #596]	@ (800b23c <hci_ctrl+0xfb4>)
 800afe8:	f7f5 fbd4 	bl	8000794 <__aeabi_ddiv>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4610      	mov	r0, r2
 800aff2:	4619      	mov	r1, r3
 800aff4:	f7f5 fd54 	bl	8000aa0 <__aeabi_d2uiz>
 800aff8:	4603      	mov	r3, r0
 800affa:	b2da      	uxtb	r2, r3
 800affc:	4b8c      	ldr	r3, [pc, #560]	@ (800b230 <hci_ctrl+0xfa8>)
 800affe:	709a      	strb	r2, [r3, #2]
	Transmit_Data[3] = ((uint8_t)(sns_temp_amb_degc+40)); // gain 1  offset -40
 800b000:	4b8f      	ldr	r3, [pc, #572]	@ (800b240 <hci_ctrl+0xfb8>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	498f      	ldr	r1, [pc, #572]	@ (800b244 <hci_ctrl+0xfbc>)
 800b006:	4618      	mov	r0, r3
 800b008:	f7f5 fdc0 	bl	8000b8c <__addsf3>
 800b00c:	4603      	mov	r3, r0
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f6 f88a 	bl	8001128 <__aeabi_f2uiz>
 800b014:	4603      	mov	r3, r0
 800b016:	b2da      	uxtb	r2, r3
 800b018:	4b85      	ldr	r3, [pc, #532]	@ (800b230 <hci_ctrl+0xfa8>)
 800b01a:	70da      	strb	r2, [r3, #3]
	Transmit_Data[4] = ((uint16_t)((sns_maf_flow_kgph+100)/0.05))&0xFF;  // gain 0.05   offset -100
 800b01c:	4b8a      	ldr	r3, [pc, #552]	@ (800b248 <hci_ctrl+0xfc0>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4982      	ldr	r1, [pc, #520]	@ (800b22c <hci_ctrl+0xfa4>)
 800b022:	4618      	mov	r0, r3
 800b024:	f7f5 fdb2 	bl	8000b8c <__addsf3>
 800b028:	4603      	mov	r3, r0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f5 fa30 	bl	8000490 <__aeabi_f2d>
 800b030:	a37b      	add	r3, pc, #492	@ (adr r3, 800b220 <hci_ctrl+0xf98>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 fbad 	bl	8000794 <__aeabi_ddiv>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4610      	mov	r0, r2
 800b040:	4619      	mov	r1, r3
 800b042:	f7f5 fd2d 	bl	8000aa0 <__aeabi_d2uiz>
 800b046:	4603      	mov	r3, r0
 800b048:	b29b      	uxth	r3, r3
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	4b78      	ldr	r3, [pc, #480]	@ (800b230 <hci_ctrl+0xfa8>)
 800b04e:	711a      	strb	r2, [r3, #4]
	Transmit_Data[5] = ((uint16_t)((sns_maf_flow_kgph+100)/0.05))>>8;
 800b050:	4b7d      	ldr	r3, [pc, #500]	@ (800b248 <hci_ctrl+0xfc0>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4975      	ldr	r1, [pc, #468]	@ (800b22c <hci_ctrl+0xfa4>)
 800b056:	4618      	mov	r0, r3
 800b058:	f7f5 fd98 	bl	8000b8c <__addsf3>
 800b05c:	4603      	mov	r3, r0
 800b05e:	4618      	mov	r0, r3
 800b060:	f7f5 fa16 	bl	8000490 <__aeabi_f2d>
 800b064:	a36e      	add	r3, pc, #440	@ (adr r3, 800b220 <hci_ctrl+0xf98>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	f7f5 fb93 	bl	8000794 <__aeabi_ddiv>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4610      	mov	r0, r2
 800b074:	4619      	mov	r1, r3
 800b076:	f7f5 fd13 	bl	8000aa0 <__aeabi_d2uiz>
 800b07a:	4603      	mov	r3, r0
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	b29b      	uxth	r3, r3
 800b082:	b2da      	uxtb	r2, r3
 800b084:	4b6a      	ldr	r3, [pc, #424]	@ (800b230 <hci_ctrl+0xfa8>)
 800b086:	715a      	strb	r2, [r3, #5]
	Transmit_Data[6] = ((uint16_t)((sns_eng_speed_rpm)/0.25))&0xFF;  // gain 0.25   offset 0
 800b088:	4b70      	ldr	r3, [pc, #448]	@ (800b24c <hci_ctrl+0xfc4>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f5 f9ff 	bl	8000490 <__aeabi_f2d>
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	4b6e      	ldr	r3, [pc, #440]	@ (800b250 <hci_ctrl+0xfc8>)
 800b098:	f7f5 fb7c 	bl	8000794 <__aeabi_ddiv>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f7f5 fcfc 	bl	8000aa0 <__aeabi_d2uiz>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	4b60      	ldr	r3, [pc, #384]	@ (800b230 <hci_ctrl+0xfa8>)
 800b0b0:	719a      	strb	r2, [r3, #6]
	Transmit_Data[7] = ((uint16_t)((sns_eng_speed_rpm)/0.25))>>8;
 800b0b2:	4b66      	ldr	r3, [pc, #408]	@ (800b24c <hci_ctrl+0xfc4>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7f5 f9ea 	bl	8000490 <__aeabi_f2d>
 800b0bc:	f04f 0200 	mov.w	r2, #0
 800b0c0:	4b63      	ldr	r3, [pc, #396]	@ (800b250 <hci_ctrl+0xfc8>)
 800b0c2:	f7f5 fb67 	bl	8000794 <__aeabi_ddiv>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f7f5 fce7 	bl	8000aa0 <__aeabi_d2uiz>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	0a1b      	lsrs	r3, r3, #8
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	4b54      	ldr	r3, [pc, #336]	@ (800b230 <hci_ctrl+0xfa8>)
 800b0de:	71da      	strb	r2, [r3, #7]

	can_transmit_1(0x3F, 0xFFA9, 0x18, Transmit_Data);
 800b0e0:	4b53      	ldr	r3, [pc, #332]	@ (800b230 <hci_ctrl+0xfa8>)
 800b0e2:	2218      	movs	r2, #24
 800b0e4:	f64f 71a9 	movw	r1, #65449	@ 0xffa9
 800b0e8:	203f      	movs	r0, #63	@ 0x3f
 800b0ea:	f7f6 f9b3 	bl	8001454 <can_transmit_1>

	Transmit_Data[0] = ((uint16_t)((exh_mass_flowrate_kgph)/0.125))&0xFF;  // gain 0.05   offset -100
 800b0ee:	4b59      	ldr	r3, [pc, #356]	@ (800b254 <hci_ctrl+0xfcc>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7f5 f9cc 	bl	8000490 <__aeabi_f2d>
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b100:	f7f5 fb48 	bl	8000794 <__aeabi_ddiv>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4610      	mov	r0, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f7f5 fcc8 	bl	8000aa0 <__aeabi_d2uiz>
 800b110:	4603      	mov	r3, r0
 800b112:	b29b      	uxth	r3, r3
 800b114:	b2da      	uxtb	r2, r3
 800b116:	4b46      	ldr	r3, [pc, #280]	@ (800b230 <hci_ctrl+0xfa8>)
 800b118:	701a      	strb	r2, [r3, #0]
	Transmit_Data[1] = ((uint16_t)((exh_mass_flowrate_kgph)/0.125))>>8;
 800b11a:	4b4e      	ldr	r3, [pc, #312]	@ (800b254 <hci_ctrl+0xfcc>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f5 f9b6 	bl	8000490 <__aeabi_f2d>
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b12c:	f7f5 fb32 	bl	8000794 <__aeabi_ddiv>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4610      	mov	r0, r2
 800b136:	4619      	mov	r1, r3
 800b138:	f7f5 fcb2 	bl	8000aa0 <__aeabi_d2uiz>
 800b13c:	4603      	mov	r3, r0
 800b13e:	b29b      	uxth	r3, r3
 800b140:	0a1b      	lsrs	r3, r3, #8
 800b142:	b29b      	uxth	r3, r3
 800b144:	b2da      	uxtb	r2, r3
 800b146:	4b3a      	ldr	r3, [pc, #232]	@ (800b230 <hci_ctrl+0xfa8>)
 800b148:	705a      	strb	r2, [r3, #1]
	Transmit_Data[2] = 0;
 800b14a:	4b39      	ldr	r3, [pc, #228]	@ (800b230 <hci_ctrl+0xfa8>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	709a      	strb	r2, [r3, #2]
	Transmit_Data[2] = (flag_regen_p_trigger_status)|(flag_regen_required<<2)|(flag_fuel_light_off_temp_reached<<3)|(flag_regeneration_on<<4)|
 800b150:	4b41      	ldr	r3, [pc, #260]	@ (800b258 <hci_ctrl+0xfd0>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	b25a      	sxtb	r2, r3
 800b156:	4b41      	ldr	r3, [pc, #260]	@ (800b25c <hci_ctrl+0xfd4>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	b25b      	sxtb	r3, r3
 800b15e:	4313      	orrs	r3, r2
 800b160:	b25a      	sxtb	r2, r3
 800b162:	4b3f      	ldr	r3, [pc, #252]	@ (800b260 <hci_ctrl+0xfd8>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	00db      	lsls	r3, r3, #3
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	4313      	orrs	r3, r2
 800b16c:	b25a      	sxtb	r2, r3
 800b16e:	4b3d      	ldr	r3, [pc, #244]	@ (800b264 <hci_ctrl+0xfdc>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	b25b      	sxtb	r3, r3
 800b176:	4313      	orrs	r3, r2
 800b178:	b25a      	sxtb	r2, r3
			(flag_doc_out_stable<<5)|(flag_dpf_out_stable<<6);
 800b17a:	4b3b      	ldr	r3, [pc, #236]	@ (800b268 <hci_ctrl+0xfe0>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	015b      	lsls	r3, r3, #5
	Transmit_Data[2] = (flag_regen_p_trigger_status)|(flag_regen_required<<2)|(flag_fuel_light_off_temp_reached<<3)|(flag_regeneration_on<<4)|
 800b180:	b25b      	sxtb	r3, r3
 800b182:	4313      	orrs	r3, r2
 800b184:	b25a      	sxtb	r2, r3
			(flag_doc_out_stable<<5)|(flag_dpf_out_stable<<6);
 800b186:	4b39      	ldr	r3, [pc, #228]	@ (800b26c <hci_ctrl+0xfe4>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	019b      	lsls	r3, r3, #6
 800b18c:	b25b      	sxtb	r3, r3
 800b18e:	4313      	orrs	r3, r2
 800b190:	b25b      	sxtb	r3, r3
 800b192:	b2da      	uxtb	r2, r3
	Transmit_Data[2] = (flag_regen_p_trigger_status)|(flag_regen_required<<2)|(flag_fuel_light_off_temp_reached<<3)|(flag_regeneration_on<<4)|
 800b194:	4b26      	ldr	r3, [pc, #152]	@ (800b230 <hci_ctrl+0xfa8>)
 800b196:	709a      	strb	r2, [r3, #2]
	Transmit_Data[3] = state;
 800b198:	4b35      	ldr	r3, [pc, #212]	@ (800b270 <hci_ctrl+0xfe8>)
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	4b24      	ldr	r3, [pc, #144]	@ (800b230 <hci_ctrl+0xfa8>)
 800b19e:	70da      	strb	r2, [r3, #3]
	Transmit_Data[4] = ((uint16_t)(regen_off_timer_s))&0xFF;  // gain 1   offset 1
 800b1a0:	4b34      	ldr	r3, [pc, #208]	@ (800b274 <hci_ctrl+0xfec>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7f5 ffbf 	bl	8001128 <__aeabi_f2uiz>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	4b1f      	ldr	r3, [pc, #124]	@ (800b230 <hci_ctrl+0xfa8>)
 800b1b2:	711a      	strb	r2, [r3, #4]
	Transmit_Data[5] = ((uint16_t)(regen_off_timer_s))>>8;
 800b1b4:	4b2f      	ldr	r3, [pc, #188]	@ (800b274 <hci_ctrl+0xfec>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7f5 ffb5 	bl	8001128 <__aeabi_f2uiz>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	4b19      	ldr	r3, [pc, #100]	@ (800b230 <hci_ctrl+0xfa8>)
 800b1ca:	715a      	strb	r2, [r3, #5]
	Transmit_Data[6] = ((uint16_t)(regen_on_timer_s))&0xFF;  // gain 1   offset 1
 800b1cc:	4b2a      	ldr	r3, [pc, #168]	@ (800b278 <hci_ctrl+0xff0>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f5 ffa9 	bl	8001128 <__aeabi_f2uiz>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	4b14      	ldr	r3, [pc, #80]	@ (800b230 <hci_ctrl+0xfa8>)
 800b1de:	719a      	strb	r2, [r3, #6]
	Transmit_Data[7] = ((uint16_t)(regen_on_timer_s))>>8;
 800b1e0:	4b25      	ldr	r3, [pc, #148]	@ (800b278 <hci_ctrl+0xff0>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7f5 ff9f 	bl	8001128 <__aeabi_f2uiz>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	0a1b      	lsrs	r3, r3, #8
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <hci_ctrl+0xfa8>)
 800b1f6:	71da      	strb	r2, [r3, #7]

	can_transmit_1(0x3F, 0xFFAB, 0x18, Transmit_Data);
 800b1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b230 <hci_ctrl+0xfa8>)
 800b1fa:	2218      	movs	r2, #24
 800b1fc:	f64f 71ab 	movw	r1, #65451	@ 0xffab
 800b200:	203f      	movs	r0, #63	@ 0x3f
 800b202:	f7f6 f927 	bl	8001454 <can_transmit_1>

	Transmit_Data[0] = ((uint16_t)((regen_reference_temp_degc+273)/0.25))&0xFF;  // gain 0.05   offset -100
 800b206:	4b1d      	ldr	r3, [pc, #116]	@ (800b27c <hci_ctrl+0xff4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	491d      	ldr	r1, [pc, #116]	@ (800b280 <hci_ctrl+0xff8>)
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7f5 fcbd 	bl	8000b8c <__addsf3>
 800b212:	4603      	mov	r3, r0
 800b214:	4618      	mov	r0, r3
 800b216:	f7f5 f93b 	bl	8000490 <__aeabi_f2d>
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	e031      	b.n	800b284 <hci_ctrl+0xffc>
 800b220:	9999999a 	.word	0x9999999a
 800b224:	3fa99999 	.word	0x3fa99999
 800b228:	20000a60 	.word	0x20000a60
 800b22c:	42c80000 	.word	0x42c80000
 800b230:	20000a9c 	.word	0x20000a9c
 800b234:	20000a64 	.word	0x20000a64
 800b238:	41a00000 	.word	0x41a00000
 800b23c:	3fe00000 	.word	0x3fe00000
 800b240:	20000a5c 	.word	0x20000a5c
 800b244:	42200000 	.word	0x42200000
 800b248:	20000a70 	.word	0x20000a70
 800b24c:	20000a68 	.word	0x20000a68
 800b250:	3fd00000 	.word	0x3fd00000
 800b254:	20000abc 	.word	0x20000abc
 800b258:	20000af9 	.word	0x20000af9
 800b25c:	20000ac5 	.word	0x20000ac5
 800b260:	20000ac4 	.word	0x20000ac4
 800b264:	20000ac6 	.word	0x20000ac6
 800b268:	20000b96 	.word	0x20000b96
 800b26c:	20000b99 	.word	0x20000b99
 800b270:	20000a58 	.word	0x20000a58
 800b274:	20000ad4 	.word	0x20000ad4
 800b278:	20000ad0 	.word	0x20000ad0
 800b27c:	20000af4 	.word	0x20000af4
 800b280:	43888000 	.word	0x43888000
 800b284:	4b68      	ldr	r3, [pc, #416]	@ (800b428 <hci_ctrl+0x11a0>)
 800b286:	f7f5 fa85 	bl	8000794 <__aeabi_ddiv>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4610      	mov	r0, r2
 800b290:	4619      	mov	r1, r3
 800b292:	f7f5 fc05 	bl	8000aa0 <__aeabi_d2uiz>
 800b296:	4603      	mov	r3, r0
 800b298:	b29b      	uxth	r3, r3
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	4b63      	ldr	r3, [pc, #396]	@ (800b42c <hci_ctrl+0x11a4>)
 800b29e:	701a      	strb	r2, [r3, #0]
	Transmit_Data[1] = ((uint16_t)((regen_reference_temp_degc+273)/0.25))>>8;
 800b2a0:	4b63      	ldr	r3, [pc, #396]	@ (800b430 <hci_ctrl+0x11a8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4963      	ldr	r1, [pc, #396]	@ (800b434 <hci_ctrl+0x11ac>)
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f5 fc70 	bl	8000b8c <__addsf3>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f5 f8ee 	bl	8000490 <__aeabi_f2d>
 800b2b4:	f04f 0200 	mov.w	r2, #0
 800b2b8:	4b5b      	ldr	r3, [pc, #364]	@ (800b428 <hci_ctrl+0x11a0>)
 800b2ba:	f7f5 fa6b 	bl	8000794 <__aeabi_ddiv>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f7f5 fbeb 	bl	8000aa0 <__aeabi_d2uiz>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	0a1b      	lsrs	r3, r3, #8
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	4b55      	ldr	r3, [pc, #340]	@ (800b42c <hci_ctrl+0x11a4>)
 800b2d6:	705a      	strb	r2, [r3, #1]
	Transmit_Data[2] = ((uint16_t)((ref_fuel_mass_flow_gps)/0.005))&0xFF;  // gain 0.005   offset 0
 800b2d8:	4b57      	ldr	r3, [pc, #348]	@ (800b438 <hci_ctrl+0x11b0>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7f5 f8d7 	bl	8000490 <__aeabi_f2d>
 800b2e2:	a34d      	add	r3, pc, #308	@ (adr r3, 800b418 <hci_ctrl+0x1190>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f5 fa54 	bl	8000794 <__aeabi_ddiv>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f7f5 fbd4 	bl	8000aa0 <__aeabi_d2uiz>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	4b4b      	ldr	r3, [pc, #300]	@ (800b42c <hci_ctrl+0x11a4>)
 800b300:	709a      	strb	r2, [r3, #2]
	Transmit_Data[3] = ((uint16_t)((ref_fuel_mass_flow_gps)/0.005))>>8;
 800b302:	4b4d      	ldr	r3, [pc, #308]	@ (800b438 <hci_ctrl+0x11b0>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4618      	mov	r0, r3
 800b308:	f7f5 f8c2 	bl	8000490 <__aeabi_f2d>
 800b30c:	a342      	add	r3, pc, #264	@ (adr r3, 800b418 <hci_ctrl+0x1190>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f7f5 fa3f 	bl	8000794 <__aeabi_ddiv>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4610      	mov	r0, r2
 800b31c:	4619      	mov	r1, r3
 800b31e:	f7f5 fbbf 	bl	8000aa0 <__aeabi_d2uiz>
 800b322:	4603      	mov	r3, r0
 800b324:	b29b      	uxth	r3, r3
 800b326:	0a1b      	lsrs	r3, r3, #8
 800b328:	b29b      	uxth	r3, r3
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	4b3f      	ldr	r3, [pc, #252]	@ (800b42c <hci_ctrl+0x11a4>)
 800b32e:	70da      	strb	r2, [r3, #3]
	Transmit_Data[4] = ((uint16_t)((pump_period)/0.125))&0xFF;
 800b330:	4b42      	ldr	r3, [pc, #264]	@ (800b43c <hci_ctrl+0x11b4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f7f5 f8ab 	bl	8000490 <__aeabi_f2d>
 800b33a:	f04f 0200 	mov.w	r2, #0
 800b33e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b342:	f7f5 fa27 	bl	8000794 <__aeabi_ddiv>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	4610      	mov	r0, r2
 800b34c:	4619      	mov	r1, r3
 800b34e:	f7f5 fba7 	bl	8000aa0 <__aeabi_d2uiz>
 800b352:	4603      	mov	r3, r0
 800b354:	b29b      	uxth	r3, r3
 800b356:	b2da      	uxtb	r2, r3
 800b358:	4b34      	ldr	r3, [pc, #208]	@ (800b42c <hci_ctrl+0x11a4>)
 800b35a:	711a      	strb	r2, [r3, #4]
	Transmit_Data[5] = ((uint16_t)((pump_period)/0.125))>>8;
 800b35c:	4b37      	ldr	r3, [pc, #220]	@ (800b43c <hci_ctrl+0x11b4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f7f5 f895 	bl	8000490 <__aeabi_f2d>
 800b366:	f04f 0200 	mov.w	r2, #0
 800b36a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b36e:	f7f5 fa11 	bl	8000794 <__aeabi_ddiv>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4610      	mov	r0, r2
 800b378:	4619      	mov	r1, r3
 800b37a:	f7f5 fb91 	bl	8000aa0 <__aeabi_d2uiz>
 800b37e:	4603      	mov	r3, r0
 800b380:	b29b      	uxth	r3, r3
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	b29b      	uxth	r3, r3
 800b386:	b2da      	uxtb	r2, r3
 800b388:	4b28      	ldr	r3, [pc, #160]	@ (800b42c <hci_ctrl+0x11a4>)
 800b38a:	715a      	strb	r2, [r3, #5]
	Transmit_Data[6] = ((uint16_t)((correction_gain)/0.001))&0xFF;  // gain 0.001   offset 0
 800b38c:	4b2c      	ldr	r3, [pc, #176]	@ (800b440 <hci_ctrl+0x11b8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f7f5 f87d 	bl	8000490 <__aeabi_f2d>
 800b396:	a322      	add	r3, pc, #136	@ (adr r3, 800b420 <hci_ctrl+0x1198>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f5 f9fa 	bl	8000794 <__aeabi_ddiv>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	f7f5 fb7a 	bl	8000aa0 <__aeabi_d2uiz>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b42c <hci_ctrl+0x11a4>)
 800b3b4:	719a      	strb	r2, [r3, #6]
	Transmit_Data[7] = ((uint16_t)((correction_gain)/0.001))>>8;
 800b3b6:	4b22      	ldr	r3, [pc, #136]	@ (800b440 <hci_ctrl+0x11b8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7f5 f868 	bl	8000490 <__aeabi_f2d>
 800b3c0:	a317      	add	r3, pc, #92	@ (adr r3, 800b420 <hci_ctrl+0x1198>)
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	f7f5 f9e5 	bl	8000794 <__aeabi_ddiv>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f7f5 fb65 	bl	8000aa0 <__aeabi_d2uiz>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	0a1b      	lsrs	r3, r3, #8
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	4b12      	ldr	r3, [pc, #72]	@ (800b42c <hci_ctrl+0x11a4>)
 800b3e2:	71da      	strb	r2, [r3, #7]

	can_transmit_1(0x3F, 0xFFBD, 0x18, Transmit_Data);
 800b3e4:	4b11      	ldr	r3, [pc, #68]	@ (800b42c <hci_ctrl+0x11a4>)
 800b3e6:	2218      	movs	r2, #24
 800b3e8:	f64f 71bd 	movw	r1, #65469	@ 0xffbd
 800b3ec:	203f      	movs	r0, #63	@ 0x3f
 800b3ee:	f7f6 f831 	bl	8001454 <can_transmit_1>

	can_transmit_1(0x3F, 0xFFAD, 0x18, Injector.current_parameters);
 800b3f2:	4b14      	ldr	r3, [pc, #80]	@ (800b444 <hci_ctrl+0x11bc>)
 800b3f4:	2218      	movs	r2, #24
 800b3f6:	f64f 71ad 	movw	r1, #65453	@ 0xffad
 800b3fa:	203f      	movs	r0, #63	@ 0x3f
 800b3fc:	f7f6 f82a 	bl	8001454 <can_transmit_1>

	can_transmit_1(0x3F, 0xFFAE, 0x18, errors_vector);
 800b400:	4b11      	ldr	r3, [pc, #68]	@ (800b448 <hci_ctrl+0x11c0>)
 800b402:	2218      	movs	r2, #24
 800b404:	f64f 71ae 	movw	r1, #65454	@ 0xffae
 800b408:	203f      	movs	r0, #63	@ 0x3f
 800b40a:	f7f6 f823 	bl	8001454 <can_transmit_1>
}
 800b40e:	bf00      	nop
 800b410:	bdb0      	pop	{r4, r5, r7, pc}
 800b412:	bf00      	nop
 800b414:	f3af 8000 	nop.w
 800b418:	47ae147b 	.word	0x47ae147b
 800b41c:	3f747ae1 	.word	0x3f747ae1
 800b420:	d2f1a9fc 	.word	0xd2f1a9fc
 800b424:	3f50624d 	.word	0x3f50624d
 800b428:	3fd00000 	.word	0x3fd00000
 800b42c:	20000a9c 	.word	0x20000a9c
 800b430:	20000af4 	.word	0x20000af4
 800b434:	43888000 	.word	0x43888000
 800b438:	20000ac8 	.word	0x20000ac8
 800b43c:	20000acc 	.word	0x20000acc
 800b440:	20000218 	.word	0x20000218
 800b444:	2000012d 	.word	0x2000012d
 800b448:	20000a38 	.word	0x20000a38
 800b44c:	00000000 	.word	0x00000000

0800b450 <doc_out_stablility_check>:

void doc_out_stablility_check (void){
 800b450:	b598      	push	{r3, r4, r7, lr}
 800b452:	af00      	add	r7, sp, #0
	static uint8_t i;
	static float sum_temp, sum_t_temp, unstability_factor;
	sum_temp = 0;
 800b454:	4b5c      	ldr	r3, [pc, #368]	@ (800b5c8 <doc_out_stablility_check+0x178>)
 800b456:	f04f 0200 	mov.w	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]
	sum_t_temp = 0;
 800b45c:	4b5b      	ldr	r3, [pc, #364]	@ (800b5cc <doc_out_stablility_check+0x17c>)
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	601a      	str	r2, [r3, #0]

	flag_doc_out_stable_prev = flag_doc_out_stable;
 800b464:	4b5a      	ldr	r3, [pc, #360]	@ (800b5d0 <doc_out_stablility_check+0x180>)
 800b466:	781a      	ldrb	r2, [r3, #0]
 800b468:	4b5a      	ldr	r3, [pc, #360]	@ (800b5d4 <doc_out_stablility_check+0x184>)
 800b46a:	701a      	strb	r2, [r3, #0]

	sns_doc_out_temp_array[sns_doc_out_temp_array_pointer] = sns_doc_avg_degc;
 800b46c:	4b5a      	ldr	r3, [pc, #360]	@ (800b5d8 <doc_out_stablility_check+0x188>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	4619      	mov	r1, r3
 800b472:	4b5a      	ldr	r3, [pc, #360]	@ (800b5dc <doc_out_stablility_check+0x18c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a5a      	ldr	r2, [pc, #360]	@ (800b5e0 <doc_out_stablility_check+0x190>)
 800b478:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	for (i=0; i<TENC_TEMP_STABILITY_TIME_RANGE_S; i++){
 800b47c:	4b59      	ldr	r3, [pc, #356]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
 800b482:	e03c      	b.n	800b4fe <doc_out_stablility_check+0xae>
		sum_temp += sns_doc_out_temp_array[(sns_doc_out_temp_array_pointer + 1 + i) & (TENC_TEMP_STABILITY_TIME_RANGE_S - 1)];
 800b484:	4b54      	ldr	r3, [pc, #336]	@ (800b5d8 <doc_out_stablility_check+0x188>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	3301      	adds	r3, #1
 800b48a:	4a56      	ldr	r2, [pc, #344]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b48c:	7812      	ldrb	r2, [r2, #0]
 800b48e:	4413      	add	r3, r2
 800b490:	f003 030f 	and.w	r3, r3, #15
 800b494:	4a52      	ldr	r2, [pc, #328]	@ (800b5e0 <doc_out_stablility_check+0x190>)
 800b496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b49a:	4a4b      	ldr	r2, [pc, #300]	@ (800b5c8 <doc_out_stablility_check+0x178>)
 800b49c:	6812      	ldr	r2, [r2, #0]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f5 fb73 	bl	8000b8c <__addsf3>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	4b47      	ldr	r3, [pc, #284]	@ (800b5c8 <doc_out_stablility_check+0x178>)
 800b4ac:	601a      	str	r2, [r3, #0]
		sum_t_temp += sns_doc_out_temp_array[(sns_doc_out_temp_array_pointer + 1 + i) & (TENC_TEMP_STABILITY_TIME_RANGE_S - 1)] * (i+1);
 800b4ae:	4b4a      	ldr	r3, [pc, #296]	@ (800b5d8 <doc_out_stablility_check+0x188>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	4a4b      	ldr	r2, [pc, #300]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b4b6:	7812      	ldrb	r2, [r2, #0]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f003 030f 	and.w	r3, r3, #15
 800b4be:	4a48      	ldr	r2, [pc, #288]	@ (800b5e0 <doc_out_stablility_check+0x190>)
 800b4c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4c4:	4b47      	ldr	r3, [pc, #284]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f5 fc12 	bl	8000cf4 <__aeabi_i2f>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7f5 fc61 	bl	8000d9c <__aeabi_fmul>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b3b      	ldr	r3, [pc, #236]	@ (800b5cc <doc_out_stablility_check+0x17c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f7f5 fb51 	bl	8000b8c <__addsf3>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	4b37      	ldr	r3, [pc, #220]	@ (800b5cc <doc_out_stablility_check+0x17c>)
 800b4f0:	601a      	str	r2, [r3, #0]
	for (i=0; i<TENC_TEMP_STABILITY_TIME_RANGE_S; i++){
 800b4f2:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	4b3a      	ldr	r3, [pc, #232]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	4b39      	ldr	r3, [pc, #228]	@ (800b5e4 <doc_out_stablility_check+0x194>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b0f      	cmp	r3, #15
 800b504:	d9be      	bls.n	800b484 <doc_out_stablility_check+0x34>
	}
	unstability_factor = ( TENC_TEMP_STABILITY_TIME_RANGE_S * sum_t_temp - TENC_TEMP_STABILITY_SUM_T * sum_temp ) /
 800b506:	4b31      	ldr	r3, [pc, #196]	@ (800b5cc <doc_out_stablility_check+0x17c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800b50e:	4618      	mov	r0, r3
 800b510:	f7f5 fc44 	bl	8000d9c <__aeabi_fmul>
 800b514:	4603      	mov	r3, r0
 800b516:	461c      	mov	r4, r3
 800b518:	4b2b      	ldr	r3, [pc, #172]	@ (800b5c8 <doc_out_stablility_check+0x178>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4932      	ldr	r1, [pc, #200]	@ (800b5e8 <doc_out_stablility_check+0x198>)
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f5 fc3c 	bl	8000d9c <__aeabi_fmul>
 800b524:	4603      	mov	r3, r0
 800b526:	4619      	mov	r1, r3
 800b528:	4620      	mov	r0, r4
 800b52a:	f7f5 fb2d 	bl	8000b88 <__aeabi_fsub>
 800b52e:	4603      	mov	r3, r0
 800b530:	492e      	ldr	r1, [pc, #184]	@ (800b5ec <doc_out_stablility_check+0x19c>)
 800b532:	4618      	mov	r0, r3
 800b534:	f7f5 fce6 	bl	8000f04 <__aeabi_fdiv>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	4b2c      	ldr	r3, [pc, #176]	@ (800b5f0 <doc_out_stablility_check+0x1a0>)
 800b53e:	601a      	str	r2, [r3, #0]
			( TENC_TEMP_STABILITY_TIME_RANGE_S * TENC_TEMP_STABILITY_SUM_T_2 - ( TENC_TEMP_STABILITY_SUM_T * TENC_TEMP_STABILITY_SUM_T ));
	if (unstability_factor < 0){
 800b540:	4b2b      	ldr	r3, [pc, #172]	@ (800b5f0 <doc_out_stablility_check+0x1a0>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f04f 0100 	mov.w	r1, #0
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f5 fdc5 	bl	80010d8 <__aeabi_fcmplt>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <doc_out_stablility_check+0x110>
		unstability_factor *= -1;
 800b554:	4b26      	ldr	r3, [pc, #152]	@ (800b5f0 <doc_out_stablility_check+0x1a0>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800b55c:	4a24      	ldr	r2, [pc, #144]	@ (800b5f0 <doc_out_stablility_check+0x1a0>)
 800b55e:	6013      	str	r3, [r2, #0]
	}
	if ( unstability_factor < TENC_LIMIT_TEMP_STABILITY_FACTOR){
 800b560:	4b23      	ldr	r3, [pc, #140]	@ (800b5f0 <doc_out_stablility_check+0x1a0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4618      	mov	r0, r3
 800b566:	f7f4 ff93 	bl	8000490 <__aeabi_f2d>
 800b56a:	a315      	add	r3, pc, #84	@ (adr r3, 800b5c0 <doc_out_stablility_check+0x170>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f5 fa58 	bl	8000a24 <__aeabi_dcmplt>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <doc_out_stablility_check+0x132>
		flag_doc_out_stable = true;
 800b57a:	4b15      	ldr	r3, [pc, #84]	@ (800b5d0 <doc_out_stablility_check+0x180>)
 800b57c:	2201      	movs	r2, #1
 800b57e:	701a      	strb	r2, [r3, #0]
 800b580:	e002      	b.n	800b588 <doc_out_stablility_check+0x138>
	}
	else{
		flag_doc_out_stable = false;
 800b582:	4b13      	ldr	r3, [pc, #76]	@ (800b5d0 <doc_out_stablility_check+0x180>)
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]
	}
	if (flag_doc_out_stable && !flag_doc_out_stable_prev) {
 800b588:	4b11      	ldr	r3, [pc, #68]	@ (800b5d0 <doc_out_stablility_check+0x180>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d009      	beq.n	800b5a4 <doc_out_stablility_check+0x154>
 800b590:	4b10      	ldr	r3, [pc, #64]	@ (800b5d4 <doc_out_stablility_check+0x184>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	f083 0301 	eor.w	r3, r3, #1
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <doc_out_stablility_check+0x154>
		flag_doc_out_0_1 = true;
 800b59e:	4b15      	ldr	r3, [pc, #84]	@ (800b5f4 <doc_out_stablility_check+0x1a4>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	701a      	strb	r2, [r3, #0]
	}
	sns_doc_out_temp_array_pointer = (sns_doc_out_temp_array_pointer+1) & (TENC_TEMP_STABILITY_TIME_RANGE_S - 1);
 800b5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d8 <doc_out_stablility_check+0x188>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 030f 	and.w	r3, r3, #15
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	4b09      	ldr	r3, [pc, #36]	@ (800b5d8 <doc_out_stablility_check+0x188>)
 800b5b4:	701a      	strb	r2, [r3, #0]
	return;
 800b5b6:	bf00      	nop
}
 800b5b8:	bd98      	pop	{r3, r4, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	f3af 8000 	nop.w
 800b5c0:	9999999a 	.word	0x9999999a
 800b5c4:	3fb99999 	.word	0x3fb99999
 800b5c8:	20000ba8 	.word	0x20000ba8
 800b5cc:	20000bac 	.word	0x20000bac
 800b5d0:	20000b96 	.word	0x20000b96
 800b5d4:	20000b97 	.word	0x20000b97
 800b5d8:	20000b94 	.word	0x20000b94
 800b5dc:	20000a80 	.word	0x20000a80
 800b5e0:	20000b10 	.word	0x20000b10
 800b5e4:	20000bb0 	.word	0x20000bb0
 800b5e8:	43080000 	.word	0x43080000
 800b5ec:	45aa0000 	.word	0x45aa0000
 800b5f0:	20000bb4 	.word	0x20000bb4
 800b5f4:	20000b98 	.word	0x20000b98

0800b5f8 <dpf_out_trand_calculation>:

void dpf_out_trand_calculation(void) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
	sns_dpf_out_trand = sns_dpf_out_degc - previous_dpf_temperature_degc;
 800b5fc:	4b08      	ldr	r3, [pc, #32]	@ (800b620 <dpf_out_trand_calculation+0x28>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a08      	ldr	r2, [pc, #32]	@ (800b624 <dpf_out_trand_calculation+0x2c>)
 800b602:	6812      	ldr	r2, [r2, #0]
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f7f5 fabe 	bl	8000b88 <__aeabi_fsub>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <dpf_out_trand_calculation+0x30>)
 800b612:	601a      	str	r2, [r3, #0]
	previous_dpf_temperature_degc = sns_dpf_out_degc;
 800b614:	4b02      	ldr	r3, [pc, #8]	@ (800b620 <dpf_out_trand_calculation+0x28>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a02      	ldr	r2, [pc, #8]	@ (800b624 <dpf_out_trand_calculation+0x2c>)
 800b61a:	6013      	str	r3, [r2, #0]

	return;
 800b61c:	bf00      	nop
}
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20000a84 	.word	0x20000a84
 800b624:	20000b90 	.word	0x20000b90
 800b628:	20000a8c 	.word	0x20000a8c
 800b62c:	00000000 	.word	0x00000000

0800b630 <dpf_out_stablility_check>:

void dpf_out_stablility_check (void) {
 800b630:	b598      	push	{r3, r4, r7, lr}
 800b632:	af00      	add	r7, sp, #0
	static uint8_t i;
	static float sum_temp, sum_t_temp, unstability_factor;
	sum_temp = 0;
 800b634:	4b5c      	ldr	r3, [pc, #368]	@ (800b7a8 <dpf_out_stablility_check+0x178>)
 800b636:	f04f 0200 	mov.w	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
	sum_t_temp = 0;
 800b63c:	4b5b      	ldr	r3, [pc, #364]	@ (800b7ac <dpf_out_stablility_check+0x17c>)
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	601a      	str	r2, [r3, #0]

	flag_dpf_out_stable_prev = flag_dpf_out_stable;
 800b644:	4b5a      	ldr	r3, [pc, #360]	@ (800b7b0 <dpf_out_stablility_check+0x180>)
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	4b5a      	ldr	r3, [pc, #360]	@ (800b7b4 <dpf_out_stablility_check+0x184>)
 800b64a:	701a      	strb	r2, [r3, #0]

	sns_dpf_out_temp_array[sns_dpf_out_temp_array_pointer] = sns_dpf_avg_degc;
 800b64c:	4b5a      	ldr	r3, [pc, #360]	@ (800b7b8 <dpf_out_stablility_check+0x188>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	4619      	mov	r1, r3
 800b652:	4b5a      	ldr	r3, [pc, #360]	@ (800b7bc <dpf_out_stablility_check+0x18c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a5a      	ldr	r2, [pc, #360]	@ (800b7c0 <dpf_out_stablility_check+0x190>)
 800b658:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	for (i=0; i<TENC_TEMP_STABILITY_TIME_RANGE_S; i++){
 800b65c:	4b59      	ldr	r3, [pc, #356]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b65e:	2200      	movs	r2, #0
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e03c      	b.n	800b6de <dpf_out_stablility_check+0xae>
		sum_temp += sns_dpf_out_temp_array[(sns_dpf_out_temp_array_pointer + 1 + i) & (TENC_TEMP_STABILITY_TIME_RANGE_S - 1)];
 800b664:	4b54      	ldr	r3, [pc, #336]	@ (800b7b8 <dpf_out_stablility_check+0x188>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	3301      	adds	r3, #1
 800b66a:	4a56      	ldr	r2, [pc, #344]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b66c:	7812      	ldrb	r2, [r2, #0]
 800b66e:	4413      	add	r3, r2
 800b670:	f003 030f 	and.w	r3, r3, #15
 800b674:	4a52      	ldr	r2, [pc, #328]	@ (800b7c0 <dpf_out_stablility_check+0x190>)
 800b676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b67a:	4a4b      	ldr	r2, [pc, #300]	@ (800b7a8 <dpf_out_stablility_check+0x178>)
 800b67c:	6812      	ldr	r2, [r2, #0]
 800b67e:	4611      	mov	r1, r2
 800b680:	4618      	mov	r0, r3
 800b682:	f7f5 fa83 	bl	8000b8c <__addsf3>
 800b686:	4603      	mov	r3, r0
 800b688:	461a      	mov	r2, r3
 800b68a:	4b47      	ldr	r3, [pc, #284]	@ (800b7a8 <dpf_out_stablility_check+0x178>)
 800b68c:	601a      	str	r2, [r3, #0]
		sum_t_temp += sns_dpf_out_temp_array[(sns_dpf_out_temp_array_pointer + 1 + i) & (TENC_TEMP_STABILITY_TIME_RANGE_S - 1)] * (i+1);
 800b68e:	4b4a      	ldr	r3, [pc, #296]	@ (800b7b8 <dpf_out_stablility_check+0x188>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	3301      	adds	r3, #1
 800b694:	4a4b      	ldr	r2, [pc, #300]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b696:	7812      	ldrb	r2, [r2, #0]
 800b698:	4413      	add	r3, r2
 800b69a:	f003 030f 	and.w	r3, r3, #15
 800b69e:	4a48      	ldr	r2, [pc, #288]	@ (800b7c0 <dpf_out_stablility_check+0x190>)
 800b6a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6a4:	4b47      	ldr	r3, [pc, #284]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7f5 fb22 	bl	8000cf4 <__aeabi_i2f>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f7f5 fb71 	bl	8000d9c <__aeabi_fmul>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4b3b      	ldr	r3, [pc, #236]	@ (800b7ac <dpf_out_stablility_check+0x17c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7f5 fa61 	bl	8000b8c <__addsf3>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b37      	ldr	r3, [pc, #220]	@ (800b7ac <dpf_out_stablility_check+0x17c>)
 800b6d0:	601a      	str	r2, [r3, #0]
	for (i=0; i<TENC_TEMP_STABILITY_TIME_RANGE_S; i++){
 800b6d2:	4b3c      	ldr	r3, [pc, #240]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	4b3a      	ldr	r3, [pc, #232]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b6dc:	701a      	strb	r2, [r3, #0]
 800b6de:	4b39      	ldr	r3, [pc, #228]	@ (800b7c4 <dpf_out_stablility_check+0x194>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b0f      	cmp	r3, #15
 800b6e4:	d9be      	bls.n	800b664 <dpf_out_stablility_check+0x34>
	}
	unstability_factor = ( TENC_TEMP_STABILITY_TIME_RANGE_S * sum_t_temp - TENC_TEMP_STABILITY_SUM_T * sum_temp ) /
 800b6e6:	4b31      	ldr	r3, [pc, #196]	@ (800b7ac <dpf_out_stablility_check+0x17c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7f5 fb54 	bl	8000d9c <__aeabi_fmul>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	461c      	mov	r4, r3
 800b6f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b7a8 <dpf_out_stablility_check+0x178>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4932      	ldr	r1, [pc, #200]	@ (800b7c8 <dpf_out_stablility_check+0x198>)
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f5 fb4c 	bl	8000d9c <__aeabi_fmul>
 800b704:	4603      	mov	r3, r0
 800b706:	4619      	mov	r1, r3
 800b708:	4620      	mov	r0, r4
 800b70a:	f7f5 fa3d 	bl	8000b88 <__aeabi_fsub>
 800b70e:	4603      	mov	r3, r0
 800b710:	492e      	ldr	r1, [pc, #184]	@ (800b7cc <dpf_out_stablility_check+0x19c>)
 800b712:	4618      	mov	r0, r3
 800b714:	f7f5 fbf6 	bl	8000f04 <__aeabi_fdiv>
 800b718:	4603      	mov	r3, r0
 800b71a:	461a      	mov	r2, r3
 800b71c:	4b2c      	ldr	r3, [pc, #176]	@ (800b7d0 <dpf_out_stablility_check+0x1a0>)
 800b71e:	601a      	str	r2, [r3, #0]
			( TENC_TEMP_STABILITY_TIME_RANGE_S * TENC_TEMP_STABILITY_SUM_T_2 - ( TENC_TEMP_STABILITY_SUM_T * TENC_TEMP_STABILITY_SUM_T ));
	if (unstability_factor < 0){
 800b720:	4b2b      	ldr	r3, [pc, #172]	@ (800b7d0 <dpf_out_stablility_check+0x1a0>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f04f 0100 	mov.w	r1, #0
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f5 fcd5 	bl	80010d8 <__aeabi_fcmplt>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <dpf_out_stablility_check+0x110>
		unstability_factor *= -1;
 800b734:	4b26      	ldr	r3, [pc, #152]	@ (800b7d0 <dpf_out_stablility_check+0x1a0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800b73c:	4a24      	ldr	r2, [pc, #144]	@ (800b7d0 <dpf_out_stablility_check+0x1a0>)
 800b73e:	6013      	str	r3, [r2, #0]
	}
	if ( unstability_factor < TENC_LIMIT_TEMP_STABILITY_FACTOR){
 800b740:	4b23      	ldr	r3, [pc, #140]	@ (800b7d0 <dpf_out_stablility_check+0x1a0>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4618      	mov	r0, r3
 800b746:	f7f4 fea3 	bl	8000490 <__aeabi_f2d>
 800b74a:	a315      	add	r3, pc, #84	@ (adr r3, 800b7a0 <dpf_out_stablility_check+0x170>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f5 f968 	bl	8000a24 <__aeabi_dcmplt>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <dpf_out_stablility_check+0x132>
		flag_dpf_out_stable = true;
 800b75a:	4b15      	ldr	r3, [pc, #84]	@ (800b7b0 <dpf_out_stablility_check+0x180>)
 800b75c:	2201      	movs	r2, #1
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	e002      	b.n	800b768 <dpf_out_stablility_check+0x138>
	}
	else{
		flag_dpf_out_stable = false;
 800b762:	4b13      	ldr	r3, [pc, #76]	@ (800b7b0 <dpf_out_stablility_check+0x180>)
 800b764:	2200      	movs	r2, #0
 800b766:	701a      	strb	r2, [r3, #0]
	}
	if (flag_dpf_out_stable && !flag_dpf_out_stable_prev) {
 800b768:	4b11      	ldr	r3, [pc, #68]	@ (800b7b0 <dpf_out_stablility_check+0x180>)
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d009      	beq.n	800b784 <dpf_out_stablility_check+0x154>
 800b770:	4b10      	ldr	r3, [pc, #64]	@ (800b7b4 <dpf_out_stablility_check+0x184>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	f083 0301 	eor.w	r3, r3, #1
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <dpf_out_stablility_check+0x154>
		flag_dpf_out_0_1 = true;
 800b77e:	4b15      	ldr	r3, [pc, #84]	@ (800b7d4 <dpf_out_stablility_check+0x1a4>)
 800b780:	2201      	movs	r2, #1
 800b782:	701a      	strb	r2, [r3, #0]
	}
	sns_dpf_out_temp_array_pointer = (sns_dpf_out_temp_array_pointer+1) & (TENC_TEMP_STABILITY_TIME_RANGE_S - 1);
 800b784:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b8 <dpf_out_stablility_check+0x188>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	f003 030f 	and.w	r3, r3, #15
 800b790:	b2da      	uxtb	r2, r3
 800b792:	4b09      	ldr	r3, [pc, #36]	@ (800b7b8 <dpf_out_stablility_check+0x188>)
 800b794:	701a      	strb	r2, [r3, #0]
	return;
 800b796:	bf00      	nop
}
 800b798:	bd98      	pop	{r3, r4, r7, pc}
 800b79a:	bf00      	nop
 800b79c:	f3af 8000 	nop.w
 800b7a0:	9999999a 	.word	0x9999999a
 800b7a4:	3fb99999 	.word	0x3fb99999
 800b7a8:	20000bb8 	.word	0x20000bb8
 800b7ac:	20000bbc 	.word	0x20000bbc
 800b7b0:	20000b99 	.word	0x20000b99
 800b7b4:	20000b9a 	.word	0x20000b9a
 800b7b8:	20000b95 	.word	0x20000b95
 800b7bc:	20000a88 	.word	0x20000a88
 800b7c0:	20000b50 	.word	0x20000b50
 800b7c4:	20000bc0 	.word	0x20000bc0
 800b7c8:	43080000 	.word	0x43080000
 800b7cc:	45aa0000 	.word	0x45aa0000
 800b7d0:	20000bc4 	.word	0x20000bc4
 800b7d4:	20000b9b 	.word	0x20000b9b

0800b7d8 <pwm_calculation>:


void pwm_calculation(float fuel_mass_flow_gps, bool soft_changes){
 800b7d8:	b5b0      	push	{r4, r5, r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]

	if ( tenc_ref_fuel_flow_gps_ovd_on == 1 ) {
 800b7e4:	4b4e      	ldr	r3, [pc, #312]	@ (800b920 <pwm_calculation+0x148>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <pwm_calculation+0x1a>
		fuel_mass_flow_gps = tenc_ref_fuel_flow_gps_ovd_val;
 800b7ec:	4b4d      	ldr	r3, [pc, #308]	@ (800b924 <pwm_calculation+0x14c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	607b      	str	r3, [r7, #4]

	//temp_correct_pwm = rt_Lookup(tenm_temp_correct_pwm_x, 2, sns_fuel_temp_degc, tenm_temp_correct_pwm_z);

	//ref_fuel_mass_flow_gps_corrected = fuel_mass_flow_gps * temp_correct_pwm;

	pump_period_raw = 53 / fuel_mass_flow_gps;//(fuel_mass_flow_gps  * -1334.52) + 1060;
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	484c      	ldr	r0, [pc, #304]	@ (800b928 <pwm_calculation+0x150>)
 800b7f6:	f7f5 fb85 	bl	8000f04 <__aeabi_fdiv>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4b4b      	ldr	r3, [pc, #300]	@ (800b92c <pwm_calculation+0x154>)
 800b800:	601a      	str	r2, [r3, #0]

	if ( tenc_hci_inj_pwm_ovd_on == 1 ) {
 800b802:	4b4b      	ldr	r3, [pc, #300]	@ (800b930 <pwm_calculation+0x158>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d004      	beq.n	800b814 <pwm_calculation+0x3c>
		pump_period = tenc_hci_inj_pwm_ovd_val;
 800b80a:	4b4a      	ldr	r3, [pc, #296]	@ (800b934 <pwm_calculation+0x15c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a4a      	ldr	r2, [pc, #296]	@ (800b938 <pwm_calculation+0x160>)
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	e06d      	b.n	800b8f0 <pwm_calculation+0x118>
	}
	else {
		if (soft_changes) {
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d05a      	beq.n	800b8d0 <pwm_calculation+0xf8>
			if ( pump_period_raw >= pump_period + TENC_DV_PWM_RAMP_UP_RATE_PERCPS ){
 800b81a:	4b44      	ldr	r3, [pc, #272]	@ (800b92c <pwm_calculation+0x154>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7f4 fe36 	bl	8000490 <__aeabi_f2d>
 800b824:	4604      	mov	r4, r0
 800b826:	460d      	mov	r5, r1
 800b828:	4b43      	ldr	r3, [pc, #268]	@ (800b938 <pwm_calculation+0x160>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f4 fe2f 	bl	8000490 <__aeabi_f2d>
 800b832:	a337      	add	r3, pc, #220	@ (adr r3, 800b910 <pwm_calculation+0x138>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fccc 	bl	80001d4 <__adddf3>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4620      	mov	r0, r4
 800b842:	4629      	mov	r1, r5
 800b844:	f7f5 f902 	bl	8000a4c <__aeabi_dcmpge>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d013      	beq.n	800b876 <pwm_calculation+0x9e>
				pump_period_raw = pump_period + TENC_DV_PWM_RAMP_UP_RATE_PERCPS;
 800b84e:	4b3a      	ldr	r3, [pc, #232]	@ (800b938 <pwm_calculation+0x160>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4618      	mov	r0, r3
 800b854:	f7f4 fe1c 	bl	8000490 <__aeabi_f2d>
 800b858:	a32d      	add	r3, pc, #180	@ (adr r3, 800b910 <pwm_calculation+0x138>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fcb9 	bl	80001d4 <__adddf3>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4610      	mov	r0, r2
 800b868:	4619      	mov	r1, r3
 800b86a:	f7f5 f939 	bl	8000ae0 <__aeabi_d2f>
 800b86e:	4603      	mov	r3, r0
 800b870:	4a2e      	ldr	r2, [pc, #184]	@ (800b92c <pwm_calculation+0x154>)
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	e02c      	b.n	800b8d0 <pwm_calculation+0xf8>
			}
			else{
				if ( pump_period_raw <= pump_period - TENC_DV_PWM_RAMP_DOWN_RATE_PERCPS ){
 800b876:	4b2d      	ldr	r3, [pc, #180]	@ (800b92c <pwm_calculation+0x154>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f4 fe08 	bl	8000490 <__aeabi_f2d>
 800b880:	4604      	mov	r4, r0
 800b882:	460d      	mov	r5, r1
 800b884:	4b2c      	ldr	r3, [pc, #176]	@ (800b938 <pwm_calculation+0x160>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4618      	mov	r0, r3
 800b88a:	f7f4 fe01 	bl	8000490 <__aeabi_f2d>
 800b88e:	a322      	add	r3, pc, #136	@ (adr r3, 800b918 <pwm_calculation+0x140>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	f7f4 fc9c 	bl	80001d0 <__aeabi_dsub>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f5 f8ca 	bl	8000a38 <__aeabi_dcmple>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d012      	beq.n	800b8d0 <pwm_calculation+0xf8>
					pump_period_raw = pump_period - TENC_DV_PWM_RAMP_DOWN_RATE_PERCPS;
 800b8aa:	4b23      	ldr	r3, [pc, #140]	@ (800b938 <pwm_calculation+0x160>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f4 fdee 	bl	8000490 <__aeabi_f2d>
 800b8b4:	a318      	add	r3, pc, #96	@ (adr r3, 800b918 <pwm_calculation+0x140>)
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	f7f4 fc89 	bl	80001d0 <__aeabi_dsub>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f7f5 f90b 	bl	8000ae0 <__aeabi_d2f>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4a17      	ldr	r2, [pc, #92]	@ (800b92c <pwm_calculation+0x154>)
 800b8ce:	6013      	str	r3, [r2, #0]
				}
			}
		}
		pump_period = pump_period_raw;
 800b8d0:	4b16      	ldr	r3, [pc, #88]	@ (800b92c <pwm_calculation+0x154>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a18      	ldr	r2, [pc, #96]	@ (800b938 <pwm_calculation+0x160>)
 800b8d6:	6013      	str	r3, [r2, #0]
		if ( pump_period > TENC_MAX_PUMP_PERIOD_MS){
 800b8d8:	4b17      	ldr	r3, [pc, #92]	@ (800b938 <pwm_calculation+0x160>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4917      	ldr	r1, [pc, #92]	@ (800b93c <pwm_calculation+0x164>)
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f5 fc18 	bl	8001114 <__aeabi_fcmpgt>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <pwm_calculation+0x118>
			pump_period = TENC_MAX_PUMP_PERIOD_MS;
 800b8ea:	4b13      	ldr	r3, [pc, #76]	@ (800b938 <pwm_calculation+0x160>)
 800b8ec:	4a13      	ldr	r2, [pc, #76]	@ (800b93c <pwm_calculation+0x164>)
 800b8ee:	601a      	str	r2, [r3, #0]
		}
	}

	pump_cycle (pump_period);
 800b8f0:	4b11      	ldr	r3, [pc, #68]	@ (800b938 <pwm_calculation+0x160>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f5 fc17 	bl	8001128 <__aeabi_f2uiz>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7f6 fbf6 	bl	80020f0 <pump_cycle>
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bdb0      	pop	{r4, r5, r7, pc}
 800b90c:	f3af 8000 	nop.w
 800b910:	9999999a 	.word	0x9999999a
 800b914:	3f999999 	.word	0x3f999999
 800b918:	9999999a 	.word	0x9999999a
 800b91c:	3fa99999 	.word	0x3fa99999
 800b920:	20000aac 	.word	0x20000aac
 800b924:	20000ab0 	.word	0x20000ab0
 800b928:	42540000 	.word	0x42540000
 800b92c:	20000b0c 	.word	0x20000b0c
 800b930:	20000aa5 	.word	0x20000aa5
 800b934:	20000aa8 	.word	0x20000aa8
 800b938:	20000acc 	.word	0x20000acc
 800b93c:	44bb8000 	.word	0x44bb8000

0800b940 <rt_GetLookupIndex>:
 *
 *                 make_rtw OPTS=-DDOINTERPSEARCH
 *
 *      to enable interpolation search.
 */
uint16_t rt_GetLookupIndex(float *x, uint8_t xlen, float u){
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	460b      	mov	r3, r1
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	72fb      	strb	r3, [r7, #11]
	static int16_t bottom;
	static int16_t top;
	static int16_t retValue;
	static bool returnStatus;

	idx = 0;
 800b94e:	4b71      	ldr	r3, [pc, #452]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800b950:	2200      	movs	r2, #0
 800b952:	801a      	strh	r2, [r3, #0]
	bottom = 0;
 800b954:	4b70      	ldr	r3, [pc, #448]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800b956:	2200      	movs	r2, #0
 800b958:	801a      	strh	r2, [r3, #0]
	top = xlen-1;
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29b      	uxth	r3, r3
 800b962:	b21a      	sxth	r2, r3
 800b964:	4b6d      	ldr	r3, [pc, #436]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800b966:	801a      	strh	r2, [r3, #0]
	retValue = 0;
 800b968:	4b6d      	ldr	r3, [pc, #436]	@ (800bb20 <rt_GetLookupIndex+0x1e0>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	801a      	strh	r2, [r3, #0]
	returnStatus = 0U;
 800b96e:	4b6d      	ldr	r3, [pc, #436]	@ (800bb24 <rt_GetLookupIndex+0x1e4>)
 800b970:	2200      	movs	r2, #0
 800b972:	701a      	strb	r2, [r3, #0]
  /*
   * Deal with the extreme cases first:
   *   if u <= x[bottom] then return idx = bottom
   *   if u >= x[top]    then return idx = top-1
   */
	if (u <= x[bottom]){
 800b974:	4b68      	ldr	r3, [pc, #416]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800b976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7f5 fbb1 	bl	80010ec <__aeabi_fcmple>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d008      	beq.n	800b9a2 <rt_GetLookupIndex+0x62>
		retValue = bottom;
 800b990:	4b61      	ldr	r3, [pc, #388]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800b992:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b996:	4b62      	ldr	r3, [pc, #392]	@ (800bb20 <rt_GetLookupIndex+0x1e0>)
 800b998:	801a      	strh	r2, [r3, #0]
		returnStatus = 1U;
 800b99a:	4b62      	ldr	r3, [pc, #392]	@ (800bb24 <rt_GetLookupIndex+0x1e4>)
 800b99c:	2201      	movs	r2, #1
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	e019      	b.n	800b9d6 <rt_GetLookupIndex+0x96>
	}
	else if (u >= x[top]){
 800b9a2:	4b5e      	ldr	r3, [pc, #376]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800b9a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7f5 fba4 	bl	8001100 <__aeabi_fcmpge>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00b      	beq.n	800b9d6 <rt_GetLookupIndex+0x96>
		retValue = top-1;
 800b9be:	4b57      	ldr	r3, [pc, #348]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800b9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	b21a      	sxth	r2, r3
 800b9cc:	4b54      	ldr	r3, [pc, #336]	@ (800bb20 <rt_GetLookupIndex+0x1e0>)
 800b9ce:	801a      	strh	r2, [r3, #0]
		returnStatus = 1U;
 800b9d0:	4b54      	ldr	r3, [pc, #336]	@ (800bb24 <rt_GetLookupIndex+0x1e4>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	701a      	strb	r2, [r3, #0]
	else{
		/* else required to ensure safe programming, even *
		 *      * if it's expected that it will never be reached */
	}

	if (returnStatus == 0U){
 800b9d6:	4b53      	ldr	r3, [pc, #332]	@ (800bb24 <rt_GetLookupIndex+0x1e4>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	f083 0301 	eor.w	r3, r3, #1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 808e 	beq.w	800bb02 <rt_GetLookupIndex+0x1c2>
		if (u < 0){
 800b9e6:	f04f 0100 	mov.w	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7f5 fb74 	bl	80010d8 <__aeabi_fcmplt>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d100      	bne.n	800b9f8 <rt_GetLookupIndex+0xb8>
 800b9f6:	e042      	b.n	800ba7e <rt_GetLookupIndex+0x13e>
				offset = (u-x[bottom])/(x[top]-x[bottom]);
				idx = bottom + (int16_t)((top-bottom)*(offset-DBL_EPSILON));

#else

				idx = (bottom + top)>>1;
 800b9f8:	4b47      	ldr	r3, [pc, #284]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800b9fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	4b46      	ldr	r3, [pc, #280]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800ba02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba06:	4413      	add	r3, r2
 800ba08:	105b      	asrs	r3, r3, #1
 800ba0a:	b21a      	sxth	r2, r3
 800ba0c:	4b41      	ldr	r3, [pc, #260]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba0e:	801a      	strh	r2, [r3, #0]

#endif

				if (u < x[idx]){
 800ba10:	4b40      	ldr	r3, [pc, #256]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7f5 fb59 	bl	80010d8 <__aeabi_fcmplt>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d009      	beq.n	800ba40 <rt_GetLookupIndex+0x100>
					top = idx - 1;
 800ba2c:	4b39      	ldr	r3, [pc, #228]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	3b01      	subs	r3, #1
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	b21a      	sxth	r2, r3
 800ba3a:	4b38      	ldr	r3, [pc, #224]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800ba3c:	801a      	strh	r2, [r3, #0]
 800ba3e:	e7db      	b.n	800b9f8 <rt_GetLookupIndex+0xb8>
				}
				else if (u >= x[idx+1]){
 800ba40:	4b34      	ldr	r3, [pc, #208]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba46:	3301      	adds	r3, #1
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7f5 fb54 	bl	8001100 <__aeabi_fcmpge>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d009      	beq.n	800ba72 <rt_GetLookupIndex+0x132>
					bottom = idx + 1;
 800ba5e:	4b2d      	ldr	r3, [pc, #180]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3301      	adds	r3, #1
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	b21a      	sxth	r2, r3
 800ba6c:	4b2a      	ldr	r3, [pc, #168]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800ba6e:	801a      	strh	r2, [r3, #0]
 800ba70:	e7c2      	b.n	800b9f8 <rt_GetLookupIndex+0xb8>
				}
				else {
					/* we have x[idx] <= u < x[idx+1], return idx */
					retValue = idx;
 800ba72:	4b28      	ldr	r3, [pc, #160]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba74:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ba78:	4b29      	ldr	r3, [pc, #164]	@ (800bb20 <rt_GetLookupIndex+0x1e0>)
 800ba7a:	801a      	strh	r2, [r3, #0]
					break;
 800ba7c:	e041      	b.n	800bb02 <rt_GetLookupIndex+0x1c2>
				offset = (u-x[bottom])/(x[top]-x[bottom]);
				idx = bottom + (int16_t)((top-bottom)*(offset-DBL_EPSILON));

#else

				idx = (bottom + top)>>1;
 800ba7e:	4b26      	ldr	r3, [pc, #152]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800ba80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba84:	461a      	mov	r2, r3
 800ba86:	4b25      	ldr	r3, [pc, #148]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800ba88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	105b      	asrs	r3, r3, #1
 800ba90:	b21a      	sxth	r2, r3
 800ba92:	4b20      	ldr	r3, [pc, #128]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba94:	801a      	strh	r2, [r3, #0]

#endif

				if (u <= x[idx]){
 800ba96:	4b1f      	ldr	r3, [pc, #124]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800ba98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4413      	add	r3, r2
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7f5 fb20 	bl	80010ec <__aeabi_fcmple>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <rt_GetLookupIndex+0x186>
					top = idx - 1;
 800bab2:	4b18      	ldr	r3, [pc, #96]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800bab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	3b01      	subs	r3, #1
 800babc:	b29b      	uxth	r3, r3
 800babe:	b21a      	sxth	r2, r3
 800bac0:	4b16      	ldr	r3, [pc, #88]	@ (800bb1c <rt_GetLookupIndex+0x1dc>)
 800bac2:	801a      	strh	r2, [r3, #0]
 800bac4:	e7db      	b.n	800ba7e <rt_GetLookupIndex+0x13e>
				}
				else if (u > x[idx+1]){
 800bac6:	4b13      	ldr	r3, [pc, #76]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800bac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bacc:	3301      	adds	r3, #1
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4413      	add	r3, r2
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7f5 fb1b 	bl	8001114 <__aeabi_fcmpgt>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d009      	beq.n	800baf8 <rt_GetLookupIndex+0x1b8>
					bottom = idx + 1;
 800bae4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800bae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800baea:	b29b      	uxth	r3, r3
 800baec:	3301      	adds	r3, #1
 800baee:	b29b      	uxth	r3, r3
 800baf0:	b21a      	sxth	r2, r3
 800baf2:	4b09      	ldr	r3, [pc, #36]	@ (800bb18 <rt_GetLookupIndex+0x1d8>)
 800baf4:	801a      	strh	r2, [r3, #0]
 800baf6:	e7c2      	b.n	800ba7e <rt_GetLookupIndex+0x13e>
				}
				else {
					/* we have x[idx] < u <= x[idx+1], return idx */
					retValue = idx;
 800baf8:	4b06      	ldr	r3, [pc, #24]	@ (800bb14 <rt_GetLookupIndex+0x1d4>)
 800bafa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bafe:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <rt_GetLookupIndex+0x1e0>)
 800bb00:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	return retValue;
 800bb02:	4b07      	ldr	r3, [pc, #28]	@ (800bb20 <rt_GetLookupIndex+0x1e0>)
 800bb04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb08:	b29b      	uxth	r3, r3
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000bc8 	.word	0x20000bc8
 800bb18:	20000bca 	.word	0x20000bca
 800bb1c:	20000bcc 	.word	0x20000bcc
 800bb20:	20000bce 	.word	0x20000bce
 800bb24:	20000bd0 	.word	0x20000bd0

0800bb28 <rt_Lookup>:

/* Function: rt_Lookup ==============================================
 * Abstract:
 *      1D lookup routine for data type of real_T
 */
float rt_Lookup(float *x, uint8_t xlen, float u, float *y){
 800bb28:	b590      	push	{r4, r7, lr}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	607a      	str	r2, [r7, #4]
 800bb32:	603b      	str	r3, [r7, #0]
 800bb34:	460b      	mov	r3, r1
 800bb36:	72fb      	strb	r3, [r7, #11]
	static uint16_t idx;
	static float num;
	static float den;

	idx = rt_GetLookupIndex(x, xlen, u);
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff fefe 	bl	800b940 <rt_GetLookupIndex>
 800bb44:	4603      	mov	r3, r0
 800bb46:	461a      	mov	r2, r3
 800bb48:	4b2b      	ldr	r3, [pc, #172]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bb4a:	801a      	strh	r2, [r3, #0]
	num = y[idx+1] - y[idx];
 800bb4c:	4b2a      	ldr	r3, [pc, #168]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	4413      	add	r3, r2
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	4b27      	ldr	r3, [pc, #156]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	4413      	add	r3, r2
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4619      	mov	r1, r3
 800bb68:	f7f5 f80e 	bl	8000b88 <__aeabi_fsub>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4b22      	ldr	r3, [pc, #136]	@ (800bbfc <rt_Lookup+0xd4>)
 800bb72:	601a      	str	r2, [r3, #0]
	den = x[idx+1] - x[idx];
 800bb74:	4b20      	ldr	r3, [pc, #128]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	f7f4 fffa 	bl	8000b88 <__aeabi_fsub>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	4b19      	ldr	r3, [pc, #100]	@ (800bc00 <rt_Lookup+0xd8>)
 800bb9a:	601a      	str	r2, [r3, #0]

  /* Due to the way the binary search is implemented
     in rt_look.c (rt_GetLookupIndex), den cannot be
     0.  Equivalently, m cannot be inf or nan. */
	static float m;
	m = num/den;
 800bb9c:	4b17      	ldr	r3, [pc, #92]	@ (800bbfc <rt_Lookup+0xd4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a17      	ldr	r2, [pc, #92]	@ (800bc00 <rt_Lookup+0xd8>)
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7f5 f9ac 	bl	8000f04 <__aeabi_fdiv>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	4b14      	ldr	r3, [pc, #80]	@ (800bc04 <rt_Lookup+0xdc>)
 800bbb2:	601a      	str	r2, [r3, #0]
	return (y[idx] + (m * (u - x[idx])));
 800bbb4:	4b10      	ldr	r3, [pc, #64]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	681c      	ldr	r4, [r3, #0]
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <rt_Lookup+0xd0>)
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7f4 ffda 	bl	8000b88 <__aeabi_fsub>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	@ (800bc04 <rt_Lookup+0xdc>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4610      	mov	r0, r2
 800bbe0:	f7f5 f8dc 	bl	8000d9c <__aeabi_fmul>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7f4 ffcf 	bl	8000b8c <__addsf3>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd90      	pop	{r4, r7, pc}
 800bbf8:	20000bd2 	.word	0x20000bd2
 800bbfc:	20000bd4 	.word	0x20000bd4
 800bc00:	20000bd8 	.word	0x20000bd8
 800bc04:	20000bdc 	.word	0x20000bdc

0800bc08 <get_sensors_value>:
		70.0, 65.0, 60.0, 55.0, 50.0, 45.0, 40.0, 35.0, 30.0, 25.0, 20.0, 15.0, 10.0, 5.0, 0.0, -5.0,
		-10.0, -15.0, -20.0, -25.0, -30.0, -35.0, -40.0 };

uint8_t temperature_sourse = 0;

void get_sensors_value(void){
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0

	//  Inputs - RAW
	sns_manifold_p_volt = analog_in_1();
 800bc0e:	f7f5 ffad 	bl	8001b6c <analog_in_1>
 800bc12:	4603      	mov	r3, r0
 800bc14:	4a5c      	ldr	r2, [pc, #368]	@ (800bd88 <get_sensors_value+0x180>)
 800bc16:	6013      	str	r3, [r2, #0]
	sns_p_diff_dpf_volt = analog_in_2();
 800bc18:	f7f5 ffb0 	bl	8001b7c <analog_in_2>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	4a5b      	ldr	r2, [pc, #364]	@ (800bd8c <get_sensors_value+0x184>)
 800bc20:	6013      	str	r3, [r2, #0]
	sns_maf_flow_volt = analog_in_3();
 800bc22:	f7f5 ffb3 	bl	8001b8c <analog_in_3>
 800bc26:	4603      	mov	r3, r0
 800bc28:	4a59      	ldr	r2, [pc, #356]	@ (800bd90 <get_sensors_value+0x188>)
 800bc2a:	6013      	str	r3, [r2, #0]

	sns_fuel_temp_volt = rtd_in_2();
 800bc2c:	f7f5 ffbe 	bl	8001bac <rtd_in_2>
 800bc30:	4603      	mov	r3, r0
 800bc32:	4a58      	ldr	r2, [pc, #352]	@ (800bd94 <get_sensors_value+0x18c>)
 800bc34:	6013      	str	r3, [r2, #0]
	sns_temp_amb_volt = rtd_in_1();
 800bc36:	f7f5 ffb1 	bl	8001b9c <rtd_in_1>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4a56      	ldr	r2, [pc, #344]	@ (800bd98 <get_sensors_value+0x190>)
 800bc3e:	6013      	str	r3, [r2, #0]
	sns_engine_speed_hz = freq_in_1();
 800bc40:	f7f6 fd62 	bl	8002708 <freq_in_1>
 800bc44:	4603      	mov	r3, r0
 800bc46:	4a55      	ldr	r2, [pc, #340]	@ (800bd9c <get_sensors_value+0x194>)
 800bc48:	6013      	str	r3, [r2, #0]

// ---------------  Intake Manifold Pressure Sensor  ---------------------
	if (sns_manifold_p_volt < TENC_SNS_MANIFOLD_PRESSURE_MINIMUM_VAL){
 800bc4a:	4b4f      	ldr	r3, [pc, #316]	@ (800bd88 <get_sensors_value+0x180>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7f4 fc1e 	bl	8000490 <__aeabi_f2d>
 800bc54:	a348      	add	r3, pc, #288	@ (adr r3, 800bd78 <get_sensors_value+0x170>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f7f4 fee3 	bl	8000a24 <__aeabi_dcmplt>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <get_sensors_value+0x6c>
		errors_vector[1] |= 0x01;
 800bc64:	4b4e      	ldr	r3, [pc, #312]	@ (800bda0 <get_sensors_value+0x198>)
 800bc66:	785b      	ldrb	r3, [r3, #1]
 800bc68:	f043 0301 	orr.w	r3, r3, #1
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	4b4c      	ldr	r3, [pc, #304]	@ (800bda0 <get_sensors_value+0x198>)
 800bc70:	705a      	strb	r2, [r3, #1]
 800bc72:	e006      	b.n	800bc82 <get_sensors_value+0x7a>
	}
	else{
		errors_vector[1] &= 0xFE;
 800bc74:	4b4a      	ldr	r3, [pc, #296]	@ (800bda0 <get_sensors_value+0x198>)
 800bc76:	785b      	ldrb	r3, [r3, #1]
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b48      	ldr	r3, [pc, #288]	@ (800bda0 <get_sensors_value+0x198>)
 800bc80:	705a      	strb	r2, [r3, #1]
	}

	if (sns_manifold_p_volt > TENC_SNS_MANIFOLD_PRESSURE_MAXIMUM_VAL){
 800bc82:	4b41      	ldr	r3, [pc, #260]	@ (800bd88 <get_sensors_value+0x180>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7f4 fc02 	bl	8000490 <__aeabi_f2d>
 800bc8c:	a33c      	add	r3, pc, #240	@ (adr r3, 800bd80 <get_sensors_value+0x178>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f7f4 fee5 	bl	8000a60 <__aeabi_dcmpgt>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <get_sensors_value+0xa4>
		errors_vector[1] |= 0x02;
 800bc9c:	4b40      	ldr	r3, [pc, #256]	@ (800bda0 <get_sensors_value+0x198>)
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	f043 0302 	orr.w	r3, r3, #2
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	4b3e      	ldr	r3, [pc, #248]	@ (800bda0 <get_sensors_value+0x198>)
 800bca8:	705a      	strb	r2, [r3, #1]
 800bcaa:	e006      	b.n	800bcba <get_sensors_value+0xb2>
	}
	else{
		errors_vector[1] &= 0xFD;
 800bcac:	4b3c      	ldr	r3, [pc, #240]	@ (800bda0 <get_sensors_value+0x198>)
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	f023 0302 	bic.w	r3, r3, #2
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	4b3a      	ldr	r3, [pc, #232]	@ (800bda0 <get_sensors_value+0x198>)
 800bcb8:	705a      	strb	r2, [r3, #1]
	}
	sns_manifold_p_kpa = sns_manifold_p_volt * TENC_SNS_MANIFOLD_P_GAIN + TENC_SNS_MANIFOLD_P_BIAS;
 800bcba:	4b33      	ldr	r3, [pc, #204]	@ (800bd88 <get_sensors_value+0x180>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f4 fbe6 	bl	8000490 <__aeabi_f2d>
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	4b36      	ldr	r3, [pc, #216]	@ (800bda4 <get_sensors_value+0x19c>)
 800bcca:	f7f4 fc39 	bl	8000540 <__aeabi_dmul>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	f04f 0300 	mov.w	r3, #0
 800bcde:	f7f4 fa79 	bl	80001d4 <__adddf3>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4610      	mov	r0, r2
 800bce8:	4619      	mov	r1, r3
 800bcea:	f7f4 fef9 	bl	8000ae0 <__aeabi_d2f>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4a2d      	ldr	r2, [pc, #180]	@ (800bda8 <get_sensors_value+0x1a0>)
 800bcf2:	6013      	str	r3, [r2, #0]

// ---------------  Exhaust Manifold Pressure Sensor  ---------------------
	if (sns_p_diff_dpf_volt < TENC_SNS_P_DIFF_DPF_MINIMUM_VAL){
 800bcf4:	4b25      	ldr	r3, [pc, #148]	@ (800bd8c <get_sensors_value+0x184>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7f4 fbc9 	bl	8000490 <__aeabi_f2d>
 800bcfe:	a31e      	add	r3, pc, #120	@ (adr r3, 800bd78 <get_sensors_value+0x170>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fe8e 	bl	8000a24 <__aeabi_dcmplt>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d007      	beq.n	800bd1e <get_sensors_value+0x116>
		errors_vector[1] |= 0x04;
 800bd0e:	4b24      	ldr	r3, [pc, #144]	@ (800bda0 <get_sensors_value+0x198>)
 800bd10:	785b      	ldrb	r3, [r3, #1]
 800bd12:	f043 0304 	orr.w	r3, r3, #4
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	4b21      	ldr	r3, [pc, #132]	@ (800bda0 <get_sensors_value+0x198>)
 800bd1a:	705a      	strb	r2, [r3, #1]
 800bd1c:	e006      	b.n	800bd2c <get_sensors_value+0x124>
	}
	else{
		errors_vector[1] &= 0xFB;
 800bd1e:	4b20      	ldr	r3, [pc, #128]	@ (800bda0 <get_sensors_value+0x198>)
 800bd20:	785b      	ldrb	r3, [r3, #1]
 800bd22:	f023 0304 	bic.w	r3, r3, #4
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	4b1d      	ldr	r3, [pc, #116]	@ (800bda0 <get_sensors_value+0x198>)
 800bd2a:	705a      	strb	r2, [r3, #1]
	}
	if (sns_p_diff_dpf_volt > TENC_SNS_P_DIFF_DPF_MAXIMUM_VAL){
 800bd2c:	4b17      	ldr	r3, [pc, #92]	@ (800bd8c <get_sensors_value+0x184>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7f4 fbad 	bl	8000490 <__aeabi_f2d>
 800bd36:	a312      	add	r3, pc, #72	@ (adr r3, 800bd80 <get_sensors_value+0x178>)
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	f7f4 fe90 	bl	8000a60 <__aeabi_dcmpgt>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d007      	beq.n	800bd56 <get_sensors_value+0x14e>
		errors_vector[1] |= 0x08;
 800bd46:	4b16      	ldr	r3, [pc, #88]	@ (800bda0 <get_sensors_value+0x198>)
 800bd48:	785b      	ldrb	r3, [r3, #1]
 800bd4a:	f043 0308 	orr.w	r3, r3, #8
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	4b13      	ldr	r3, [pc, #76]	@ (800bda0 <get_sensors_value+0x198>)
 800bd52:	705a      	strb	r2, [r3, #1]
 800bd54:	e006      	b.n	800bd64 <get_sensors_value+0x15c>
	}
	else{
		errors_vector[1] &= 0xF7;
 800bd56:	4b12      	ldr	r3, [pc, #72]	@ (800bda0 <get_sensors_value+0x198>)
 800bd58:	785b      	ldrb	r3, [r3, #1]
 800bd5a:	f023 0308 	bic.w	r3, r3, #8
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	4b0f      	ldr	r3, [pc, #60]	@ (800bda0 <get_sensors_value+0x198>)
 800bd62:	705a      	strb	r2, [r3, #1]
	}

	sns_p_diff_dpf_inchw = 0;
 800bd64:	4b11      	ldr	r3, [pc, #68]	@ (800bdac <get_sensors_value+0x1a4>)
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i<5; i++) {
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	71fb      	strb	r3, [r7, #7]
 800bd70:	e02f      	b.n	800bdd2 <get_sensors_value+0x1ca>
 800bd72:	bf00      	nop
 800bd74:	f3af 8000 	nop.w
 800bd78:	9999999a 	.word	0x9999999a
 800bd7c:	3fa99999 	.word	0x3fa99999
 800bd80:	33333333 	.word	0x33333333
 800bd84:	40133333 	.word	0x40133333
 800bd88:	20000be0 	.word	0x20000be0
 800bd8c:	20000be4 	.word	0x20000be4
 800bd90:	20000c04 	.word	0x20000c04
 800bd94:	20000c08 	.word	0x20000c08
 800bd98:	20000c00 	.word	0x20000c00
 800bd9c:	20000c0c 	.word	0x20000c0c
 800bda0:	20000a38 	.word	0x20000a38
 800bda4:	40590000 	.word	0x40590000
 800bda8:	20000a60 	.word	0x20000a60
 800bdac:	20000a64 	.word	0x20000a64
		sns_p_diff_dpf_inchw += sns_p_diff_dpf_inchw_arr[i];
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	4a8f      	ldr	r2, [pc, #572]	@ (800bff0 <get_sensors_value+0x3e8>)
 800bdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb8:	4a8e      	ldr	r2, [pc, #568]	@ (800bff4 <get_sensors_value+0x3ec>)
 800bdba:	6812      	ldr	r2, [r2, #0]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f4 fee4 	bl	8000b8c <__addsf3>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4b8a      	ldr	r3, [pc, #552]	@ (800bff4 <get_sensors_value+0x3ec>)
 800bdca:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i<5; i++) {
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	71fb      	strb	r3, [r7, #7]
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	d9eb      	bls.n	800bdb0 <get_sensors_value+0x1a8>
	}
	sns_p_diff_dpf_inchw /= 5;
 800bdd8:	4b86      	ldr	r3, [pc, #536]	@ (800bff4 <get_sensors_value+0x3ec>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4986      	ldr	r1, [pc, #536]	@ (800bff8 <get_sensors_value+0x3f0>)
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f5 f890 	bl	8000f04 <__aeabi_fdiv>
 800bde4:	4603      	mov	r3, r0
 800bde6:	461a      	mov	r2, r3
 800bde8:	4b82      	ldr	r3, [pc, #520]	@ (800bff4 <get_sensors_value+0x3ec>)
 800bdea:	601a      	str	r2, [r3, #0]
	sns_p_diff_dpf_arr_index ++;
 800bdec:	4b83      	ldr	r3, [pc, #524]	@ (800bffc <get_sensors_value+0x3f4>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	4b81      	ldr	r3, [pc, #516]	@ (800bffc <get_sensors_value+0x3f4>)
 800bdf6:	701a      	strb	r2, [r3, #0]
	if (sns_p_diff_dpf_arr_index == 5) {
 800bdf8:	4b80      	ldr	r3, [pc, #512]	@ (800bffc <get_sensors_value+0x3f4>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b05      	cmp	r3, #5
 800bdfe:	d102      	bne.n	800be06 <get_sensors_value+0x1fe>
		sns_p_diff_dpf_arr_index = 0;
 800be00:	4b7e      	ldr	r3, [pc, #504]	@ (800bffc <get_sensors_value+0x3f4>)
 800be02:	2200      	movs	r2, #0
 800be04:	701a      	strb	r2, [r3, #0]
	}
	sns_p_diff_dpf_inchw = sns_p_diff_dpf_volt * TENC_SNS_P_DIFF_DPF_GAIN + TENC_SNS_P_DIFF_DPF_BIAS;
 800be06:	4b7e      	ldr	r3, [pc, #504]	@ (800c000 <get_sensors_value+0x3f8>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f4 fb40 	bl	8000490 <__aeabi_f2d>
 800be10:	a371      	add	r3, pc, #452	@ (adr r3, 800bfd8 <get_sensors_value+0x3d0>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	f7f4 fb93 	bl	8000540 <__aeabi_dmul>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4610      	mov	r0, r2
 800be20:	4619      	mov	r1, r3
 800be22:	a36f      	add	r3, pc, #444	@ (adr r3, 800bfe0 <get_sensors_value+0x3d8>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 f9d2 	bl	80001d0 <__aeabi_dsub>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4610      	mov	r0, r2
 800be32:	4619      	mov	r1, r3
 800be34:	f7f4 fe54 	bl	8000ae0 <__aeabi_d2f>
 800be38:	4603      	mov	r3, r0
 800be3a:	4a6e      	ldr	r2, [pc, #440]	@ (800bff4 <get_sensors_value+0x3ec>)
 800be3c:	6013      	str	r3, [r2, #0]

// ---------------  Sensor  ---------------------
	sns_eng_speed_rpm = TENC_ENG_SPEED_GAIN * sns_engine_speed_hz;
 800be3e:	4b71      	ldr	r3, [pc, #452]	@ (800c004 <get_sensors_value+0x3fc>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4971      	ldr	r1, [pc, #452]	@ (800c008 <get_sensors_value+0x400>)
 800be44:	4618      	mov	r0, r3
 800be46:	f7f4 ffa9 	bl	8000d9c <__aeabi_fmul>
 800be4a:	4603      	mov	r3, r0
 800be4c:	461a      	mov	r2, r3
 800be4e:	4b6f      	ldr	r3, [pc, #444]	@ (800c00c <get_sensors_value+0x404>)
 800be50:	601a      	str	r2, [r3, #0]
	sns_temp_amb_degc = rt_Lookup(tenm_sns_t_amb_table_x, 13, sns_temp_amb_volt, tenm_sns_t_amb_table_z);
 800be52:	4b6f      	ldr	r3, [pc, #444]	@ (800c010 <get_sensors_value+0x408>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4b6f      	ldr	r3, [pc, #444]	@ (800c014 <get_sensors_value+0x40c>)
 800be58:	210d      	movs	r1, #13
 800be5a:	486f      	ldr	r0, [pc, #444]	@ (800c018 <get_sensors_value+0x410>)
 800be5c:	f7ff fe64 	bl	800bb28 <rt_Lookup>
 800be60:	4603      	mov	r3, r0
 800be62:	4a6e      	ldr	r2, [pc, #440]	@ (800c01c <get_sensors_value+0x414>)
 800be64:	6013      	str	r3, [r2, #0]
	sns_maf_flow_kgph = rt_Lookup(tenm_sns_maf_flow_table_x, 10, sns_maf_flow_volt, tenm_sns_maf_flow_table_z);
 800be66:	4b6e      	ldr	r3, [pc, #440]	@ (800c020 <get_sensors_value+0x418>)
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	4b6e      	ldr	r3, [pc, #440]	@ (800c024 <get_sensors_value+0x41c>)
 800be6c:	210a      	movs	r1, #10
 800be6e:	486e      	ldr	r0, [pc, #440]	@ (800c028 <get_sensors_value+0x420>)
 800be70:	f7ff fe5a 	bl	800bb28 <rt_Lookup>
 800be74:	4603      	mov	r3, r0
 800be76:	4a6d      	ldr	r2, [pc, #436]	@ (800c02c <get_sensors_value+0x424>)
 800be78:	6013      	str	r3, [r2, #0]
	sns_fuel_temp_degc = rt_Lookup(tenm_rtd_tf_x, 35, sns_fuel_temp_volt, tenm_rtd_tf_z);
 800be7a:	4b6d      	ldr	r3, [pc, #436]	@ (800c030 <get_sensors_value+0x428>)
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	4b6d      	ldr	r3, [pc, #436]	@ (800c034 <get_sensors_value+0x42c>)
 800be80:	2123      	movs	r1, #35	@ 0x23
 800be82:	486d      	ldr	r0, [pc, #436]	@ (800c038 <get_sensors_value+0x430>)
 800be84:	f7ff fe50 	bl	800bb28 <rt_Lookup>
 800be88:	4603      	mov	r3, r0
 800be8a:	4a6c      	ldr	r2, [pc, #432]	@ (800c03c <get_sensors_value+0x434>)
 800be8c:	6013      	str	r3, [r2, #0]
	sns_fuel_press_out_kpa = 200;
 800be8e:	4b6c      	ldr	r3, [pc, #432]	@ (800c040 <get_sensors_value+0x438>)
 800be90:	4a6c      	ldr	r2, [pc, #432]	@ (800c044 <get_sensors_value+0x43c>)
 800be92:	601a      	str	r2, [r3, #0]

	// temperature sensors
	if (temperature_sourse == HUASDER_THERMOCOUPLE){
 800be94:	4b6c      	ldr	r3, [pc, #432]	@ (800c048 <get_sensors_value+0x440>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d172      	bne.n	800bf82 <get_sensors_value+0x37a>
		if (can_receive_1(0xFF09, CAN_FF09, 100)) {
 800be9c:	2264      	movs	r2, #100	@ 0x64
 800be9e:	496b      	ldr	r1, [pc, #428]	@ (800c04c <get_sensors_value+0x444>)
 800bea0:	f64f 7009 	movw	r0, #65289	@ 0xff09
 800bea4:	f7f5 fc7c 	bl	80017a0 <can_receive_1>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d04e      	beq.n	800bf4c <get_sensors_value+0x344>
			//sns_eng_out_degc = ((CAN_FF09[1]<<8) + CAN_FF09[0])*0.03125-273.0;
			sns_eng_out_degc = ((CAN_FF09[3]<<8) + CAN_FF09[2])*0.03125-273.0;
 800beae:	4b67      	ldr	r3, [pc, #412]	@ (800c04c <get_sensors_value+0x444>)
 800beb0:	78db      	ldrb	r3, [r3, #3]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	4a65      	ldr	r2, [pc, #404]	@ (800c04c <get_sensors_value+0x444>)
 800beb6:	7892      	ldrb	r2, [r2, #2]
 800beb8:	4413      	add	r3, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f4 fad6 	bl	800046c <__aeabi_i2d>
 800bec0:	f04f 0200 	mov.w	r2, #0
 800bec4:	4b62      	ldr	r3, [pc, #392]	@ (800c050 <get_sensors_value+0x448>)
 800bec6:	f7f4 fb3b 	bl	8000540 <__aeabi_dmul>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4610      	mov	r0, r2
 800bed0:	4619      	mov	r1, r3
 800bed2:	a345      	add	r3, pc, #276	@ (adr r3, 800bfe8 <get_sensors_value+0x3e0>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 f97a 	bl	80001d0 <__aeabi_dsub>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	4610      	mov	r0, r2
 800bee2:	4619      	mov	r1, r3
 800bee4:	f7f4 fdfc 	bl	8000ae0 <__aeabi_d2f>
 800bee8:	4603      	mov	r3, r0
 800beea:	4a5a      	ldr	r2, [pc, #360]	@ (800c054 <get_sensors_value+0x44c>)
 800beec:	6013      	str	r3, [r2, #0]
			//sns_doc_out_degc = ((CAN_FF09[3]<<8) + CAN_FF09[2])*0.03125-273.0;
			sns_dpf_out_degc = ((CAN_FF09[5]<<8) + CAN_FF09[4])*0.03125-273.0;
 800beee:	4b57      	ldr	r3, [pc, #348]	@ (800c04c <get_sensors_value+0x444>)
 800bef0:	795b      	ldrb	r3, [r3, #5]
 800bef2:	021b      	lsls	r3, r3, #8
 800bef4:	4a55      	ldr	r2, [pc, #340]	@ (800c04c <get_sensors_value+0x444>)
 800bef6:	7912      	ldrb	r2, [r2, #4]
 800bef8:	4413      	add	r3, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7f4 fab6 	bl	800046c <__aeabi_i2d>
 800bf00:	f04f 0200 	mov.w	r2, #0
 800bf04:	4b52      	ldr	r3, [pc, #328]	@ (800c050 <get_sensors_value+0x448>)
 800bf06:	f7f4 fb1b 	bl	8000540 <__aeabi_dmul>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	a335      	add	r3, pc, #212	@ (adr r3, 800bfe8 <get_sensors_value+0x3e0>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f95a 	bl	80001d0 <__aeabi_dsub>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4610      	mov	r0, r2
 800bf22:	4619      	mov	r1, r3
 800bf24:	f7f4 fddc 	bl	8000ae0 <__aeabi_d2f>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4a4b      	ldr	r2, [pc, #300]	@ (800c058 <get_sensors_value+0x450>)
 800bf2c:	6013      	str	r3, [r2, #0]
			sns_doc_out_degc = sns_dpf_out_degc;
 800bf2e:	4b4a      	ldr	r3, [pc, #296]	@ (800c058 <get_sensors_value+0x450>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a4a      	ldr	r2, [pc, #296]	@ (800c05c <get_sensors_value+0x454>)
 800bf34:	6013      	str	r3, [r2, #0]

			CAN_FF09_error_count = 0;
 800bf36:	4b4a      	ldr	r3, [pc, #296]	@ (800c060 <get_sensors_value+0x458>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
			errors_vector[0] &= 0x7F;
 800bf3c:	4b49      	ldr	r3, [pc, #292]	@ (800c064 <get_sensors_value+0x45c>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	4b47      	ldr	r3, [pc, #284]	@ (800c064 <get_sensors_value+0x45c>)
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	e01a      	b.n	800bf82 <get_sensors_value+0x37a>
		}
		else {
			if (CAN_FF09_error_count > CAN_FF09_MAX_ERROR_COUNT){
 800bf4c:	4b44      	ldr	r3, [pc, #272]	@ (800c060 <get_sensors_value+0x458>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b05      	cmp	r3, #5
 800bf52:	d910      	bls.n	800bf76 <get_sensors_value+0x36e>
				sns_eng_out_degc = TEMPERATURE_OVERRIDE_VALUE;
 800bf54:	4b3f      	ldr	r3, [pc, #252]	@ (800c054 <get_sensors_value+0x44c>)
 800bf56:	4a44      	ldr	r2, [pc, #272]	@ (800c068 <get_sensors_value+0x460>)
 800bf58:	601a      	str	r2, [r3, #0]
				sns_doc_out_degc = TEMPERATURE_OVERRIDE_VALUE;
 800bf5a:	4b40      	ldr	r3, [pc, #256]	@ (800c05c <get_sensors_value+0x454>)
 800bf5c:	4a42      	ldr	r2, [pc, #264]	@ (800c068 <get_sensors_value+0x460>)
 800bf5e:	601a      	str	r2, [r3, #0]
				sns_dpf_out_degc = TEMPERATURE_OVERRIDE_VALUE;
 800bf60:	4b3d      	ldr	r3, [pc, #244]	@ (800c058 <get_sensors_value+0x450>)
 800bf62:	4a41      	ldr	r2, [pc, #260]	@ (800c068 <get_sensors_value+0x460>)
 800bf64:	601a      	str	r2, [r3, #0]

				errors_vector[0] |= 0x80;
 800bf66:	4b3f      	ldr	r3, [pc, #252]	@ (800c064 <get_sensors_value+0x45c>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	4b3c      	ldr	r3, [pc, #240]	@ (800c064 <get_sensors_value+0x45c>)
 800bf72:	701a      	strb	r2, [r3, #0]
 800bf74:	e005      	b.n	800bf82 <get_sensors_value+0x37a>
			}
			else{
				CAN_FF09_error_count ++;
 800bf76:	4b3a      	ldr	r3, [pc, #232]	@ (800c060 <get_sensors_value+0x458>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	4b38      	ldr	r3, [pc, #224]	@ (800c060 <get_sensors_value+0x458>)
 800bf80:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	sns_dpf_avg_degc = (sns_dpf_avg_degc + sns_dpf_out_degc) / 2;
 800bf82:	4b3a      	ldr	r3, [pc, #232]	@ (800c06c <get_sensors_value+0x464>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a34      	ldr	r2, [pc, #208]	@ (800c058 <get_sensors_value+0x450>)
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f4 fdfd 	bl	8000b8c <__addsf3>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7f4 ffb3 	bl	8000f04 <__aeabi_fdiv>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4b32      	ldr	r3, [pc, #200]	@ (800c06c <get_sensors_value+0x464>)
 800bfa4:	601a      	str	r2, [r3, #0]
	sns_doc_avg_degc = (sns_doc_avg_degc + sns_doc_out_degc) / 2;
 800bfa6:	4b32      	ldr	r3, [pc, #200]	@ (800c070 <get_sensors_value+0x468>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a2c      	ldr	r2, [pc, #176]	@ (800c05c <get_sensors_value+0x454>)
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f4 fdeb 	bl	8000b8c <__addsf3>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7f4 ffa1 	bl	8000f04 <__aeabi_fdiv>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	4b2a      	ldr	r3, [pc, #168]	@ (800c070 <get_sensors_value+0x468>)
 800bfc8:	601a      	str	r2, [r3, #0]
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	f3af 8000 	nop.w
 800bfd8:	a3d70a3d 	.word	0xa3d70a3d
 800bfdc:	4055bd70 	.word	0x4055bd70
 800bfe0:	cccccccd 	.word	0xcccccccd
 800bfe4:	40462ccc 	.word	0x40462ccc
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	40711000 	.word	0x40711000
 800bff0:	20000be8 	.word	0x20000be8
 800bff4:	20000a64 	.word	0x20000a64
 800bff8:	40a00000 	.word	0x40a00000
 800bffc:	20000bfc 	.word	0x20000bfc
 800c000:	20000be4 	.word	0x20000be4
 800c004:	20000c0c 	.word	0x20000c0c
 800c008:	42700000 	.word	0x42700000
 800c00c:	20000a68 	.word	0x20000a68
 800c010:	20000c00 	.word	0x20000c00
 800c014:	200002c4 	.word	0x200002c4
 800c018:	20000290 	.word	0x20000290
 800c01c:	20000a5c 	.word	0x20000a5c
 800c020:	20000c04 	.word	0x20000c04
 800c024:	20000320 	.word	0x20000320
 800c028:	200002f8 	.word	0x200002f8
 800c02c:	20000a70 	.word	0x20000a70
 800c030:	20000c08 	.word	0x20000c08
 800c034:	200003d4 	.word	0x200003d4
 800c038:	20000348 	.word	0x20000348
 800c03c:	20000a6c 	.word	0x20000a6c
 800c040:	20000a74 	.word	0x20000a74
 800c044:	43480000 	.word	0x43480000
 800c048:	20000c19 	.word	0x20000c19
 800c04c:	20000c10 	.word	0x20000c10
 800c050:	3fa00000 	.word	0x3fa00000
 800c054:	20000a78 	.word	0x20000a78
 800c058:	20000a84 	.word	0x20000a84
 800c05c:	20000a7c 	.word	0x20000a7c
 800c060:	20000c18 	.word	0x20000c18
 800c064:	20000a38 	.word	0x20000a38
 800c068:	c3888000 	.word	0xc3888000
 800c06c:	20000a88 	.word	0x20000a88
 800c070:	20000a80 	.word	0x20000a80

0800c074 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4613      	mov	r3, r2
 800c080:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c082:	2301      	movs	r3, #1
 800c084:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c08a:	4b1e      	ldr	r3, [pc, #120]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c08c:	7a5b      	ldrb	r3, [r3, #9]
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b01      	cmp	r3, #1
 800c092:	d831      	bhi.n	800c0f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c094:	4b1b      	ldr	r3, [pc, #108]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c096:	7a5b      	ldrb	r3, [r3, #9]
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	461a      	mov	r2, r3
 800c09c:	4b19      	ldr	r3, [pc, #100]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c09e:	2100      	movs	r1, #0
 800c0a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c0a2:	4b18      	ldr	r3, [pc, #96]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c0a4:	7a5b      	ldrb	r3, [r3, #9]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	4a16      	ldr	r2, [pc, #88]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c0b2:	4b14      	ldr	r3, [pc, #80]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c0b4:	7a5b      	ldrb	r3, [r3, #9]
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	4b12      	ldr	r3, [pc, #72]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c0bc:	4413      	add	r3, r2
 800c0be:	79fa      	ldrb	r2, [r7, #7]
 800c0c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c0c2:	4b10      	ldr	r3, [pc, #64]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c0c4:	7a5b      	ldrb	r3, [r3, #9]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	b2d1      	uxtb	r1, r2
 800c0cc:	4a0d      	ldr	r2, [pc, #52]	@ (800c104 <FATFS_LinkDriverEx+0x90>)
 800c0ce:	7251      	strb	r1, [r2, #9]
 800c0d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c0d2:	7dbb      	ldrb	r3, [r7, #22]
 800c0d4:	3330      	adds	r3, #48	@ 0x30
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	223a      	movs	r2, #58	@ 0x3a
 800c0e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	3302      	adds	r3, #2
 800c0e8:	222f      	movs	r2, #47	@ 0x2f
 800c0ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	3303      	adds	r3, #3
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bc80      	pop	{r7}
 800c102:	4770      	bx	lr
 800c104:	20000c1c 	.word	0x20000c1c

0800c108 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c112:	2200      	movs	r2, #0
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff ffac 	bl	800c074 <FATFS_LinkDriverEx>
 800c11c:	4603      	mov	r3, r0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <memset>:
 800c126:	4603      	mov	r3, r0
 800c128:	4402      	add	r2, r0
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d100      	bne.n	800c130 <memset+0xa>
 800c12e:	4770      	bx	lr
 800c130:	f803 1b01 	strb.w	r1, [r3], #1
 800c134:	e7f9      	b.n	800c12a <memset+0x4>
	...

0800c138 <__errno>:
 800c138:	4b01      	ldr	r3, [pc, #4]	@ (800c140 <__errno+0x8>)
 800c13a:	6818      	ldr	r0, [r3, #0]
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	20000460 	.word	0x20000460

0800c144 <__libc_init_array>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	2600      	movs	r6, #0
 800c148:	4d0c      	ldr	r5, [pc, #48]	@ (800c17c <__libc_init_array+0x38>)
 800c14a:	4c0d      	ldr	r4, [pc, #52]	@ (800c180 <__libc_init_array+0x3c>)
 800c14c:	1b64      	subs	r4, r4, r5
 800c14e:	10a4      	asrs	r4, r4, #2
 800c150:	42a6      	cmp	r6, r4
 800c152:	d109      	bne.n	800c168 <__libc_init_array+0x24>
 800c154:	f000 f922 	bl	800c39c <_init>
 800c158:	2600      	movs	r6, #0
 800c15a:	4d0a      	ldr	r5, [pc, #40]	@ (800c184 <__libc_init_array+0x40>)
 800c15c:	4c0a      	ldr	r4, [pc, #40]	@ (800c188 <__libc_init_array+0x44>)
 800c15e:	1b64      	subs	r4, r4, r5
 800c160:	10a4      	asrs	r4, r4, #2
 800c162:	42a6      	cmp	r6, r4
 800c164:	d105      	bne.n	800c172 <__libc_init_array+0x2e>
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16c:	4798      	blx	r3
 800c16e:	3601      	adds	r6, #1
 800c170:	e7ee      	b.n	800c150 <__libc_init_array+0xc>
 800c172:	f855 3b04 	ldr.w	r3, [r5], #4
 800c176:	4798      	blx	r3
 800c178:	3601      	adds	r6, #1
 800c17a:	e7f2      	b.n	800c162 <__libc_init_array+0x1e>
 800c17c:	0800c3dc 	.word	0x0800c3dc
 800c180:	0800c3dc 	.word	0x0800c3dc
 800c184:	0800c3dc 	.word	0x0800c3dc
 800c188:	0800c3e0 	.word	0x0800c3e0

0800c18c <memcpy>:
 800c18c:	440a      	add	r2, r1
 800c18e:	4291      	cmp	r1, r2
 800c190:	f100 33ff 	add.w	r3, r0, #4294967295
 800c194:	d100      	bne.n	800c198 <memcpy+0xc>
 800c196:	4770      	bx	lr
 800c198:	b510      	push	{r4, lr}
 800c19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c19e:	4291      	cmp	r1, r2
 800c1a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a4:	d1f9      	bne.n	800c19a <memcpy+0xe>
 800c1a6:	bd10      	pop	{r4, pc}

0800c1a8 <sqrt>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	f000 f81f 	bl	800c1f0 <__ieee754_sqrt>
 800c1b2:	4632      	mov	r2, r6
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	463b      	mov	r3, r7
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	4639      	mov	r1, r7
 800c1be:	f7f4 fc59 	bl	8000a74 <__aeabi_dcmpun>
 800c1c2:	b990      	cbnz	r0, 800c1ea <sqrt+0x42>
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	f7f4 fc2a 	bl	8000a24 <__aeabi_dcmplt>
 800c1d0:	b158      	cbz	r0, 800c1ea <sqrt+0x42>
 800c1d2:	f7ff ffb1 	bl	800c138 <__errno>
 800c1d6:	2321      	movs	r3, #33	@ 0x21
 800c1d8:	2200      	movs	r2, #0
 800c1da:	6003      	str	r3, [r0, #0]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f7f4 fad7 	bl	8000794 <__aeabi_ddiv>
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1f0 <__ieee754_sqrt>:
 800c1f0:	4a67      	ldr	r2, [pc, #412]	@ (800c390 <__ieee754_sqrt+0x1a0>)
 800c1f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f6:	438a      	bics	r2, r1
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	460f      	mov	r7, r1
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4604      	mov	r4, r0
 800c200:	d10e      	bne.n	800c220 <__ieee754_sqrt+0x30>
 800c202:	4602      	mov	r2, r0
 800c204:	f7f4 f99c 	bl	8000540 <__aeabi_dmul>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	f7f3 ffe0 	bl	80001d4 <__adddf3>
 800c214:	4606      	mov	r6, r0
 800c216:	460f      	mov	r7, r1
 800c218:	4630      	mov	r0, r6
 800c21a:	4639      	mov	r1, r7
 800c21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c220:	2900      	cmp	r1, #0
 800c222:	dc0c      	bgt.n	800c23e <__ieee754_sqrt+0x4e>
 800c224:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c228:	4302      	orrs	r2, r0
 800c22a:	d0f5      	beq.n	800c218 <__ieee754_sqrt+0x28>
 800c22c:	b189      	cbz	r1, 800c252 <__ieee754_sqrt+0x62>
 800c22e:	4602      	mov	r2, r0
 800c230:	f7f3 ffce 	bl	80001d0 <__aeabi_dsub>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	f7f4 faac 	bl	8000794 <__aeabi_ddiv>
 800c23c:	e7ea      	b.n	800c214 <__ieee754_sqrt+0x24>
 800c23e:	150a      	asrs	r2, r1, #20
 800c240:	d115      	bne.n	800c26e <__ieee754_sqrt+0x7e>
 800c242:	2100      	movs	r1, #0
 800c244:	e009      	b.n	800c25a <__ieee754_sqrt+0x6a>
 800c246:	0ae3      	lsrs	r3, r4, #11
 800c248:	3a15      	subs	r2, #21
 800c24a:	0564      	lsls	r4, r4, #21
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0fa      	beq.n	800c246 <__ieee754_sqrt+0x56>
 800c250:	e7f7      	b.n	800c242 <__ieee754_sqrt+0x52>
 800c252:	460a      	mov	r2, r1
 800c254:	e7fa      	b.n	800c24c <__ieee754_sqrt+0x5c>
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	3101      	adds	r1, #1
 800c25a:	02d8      	lsls	r0, r3, #11
 800c25c:	d5fb      	bpl.n	800c256 <__ieee754_sqrt+0x66>
 800c25e:	1e48      	subs	r0, r1, #1
 800c260:	1a12      	subs	r2, r2, r0
 800c262:	f1c1 0020 	rsb	r0, r1, #32
 800c266:	fa24 f000 	lsr.w	r0, r4, r0
 800c26a:	4303      	orrs	r3, r0
 800c26c:	408c      	lsls	r4, r1
 800c26e:	2600      	movs	r6, #0
 800c270:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c274:	2116      	movs	r1, #22
 800c276:	07d2      	lsls	r2, r2, #31
 800c278:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c27c:	4632      	mov	r2, r6
 800c27e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c286:	bf5c      	itt	pl
 800c288:	005b      	lslpl	r3, r3, #1
 800c28a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c28e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c292:	bf58      	it	pl
 800c294:	0064      	lslpl	r4, r4, #1
 800c296:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c29a:	107f      	asrs	r7, r7, #1
 800c29c:	0064      	lsls	r4, r4, #1
 800c29e:	1815      	adds	r5, r2, r0
 800c2a0:	429d      	cmp	r5, r3
 800c2a2:	bfde      	ittt	le
 800c2a4:	182a      	addle	r2, r5, r0
 800c2a6:	1b5b      	suble	r3, r3, r5
 800c2a8:	1836      	addle	r6, r6, r0
 800c2aa:	0fe5      	lsrs	r5, r4, #31
 800c2ac:	3901      	subs	r1, #1
 800c2ae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c2b2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c2b6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c2ba:	d1f0      	bne.n	800c29e <__ieee754_sqrt+0xae>
 800c2bc:	460d      	mov	r5, r1
 800c2be:	f04f 0a20 	mov.w	sl, #32
 800c2c2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	eb01 0c00 	add.w	ip, r1, r0
 800c2cc:	db02      	blt.n	800c2d4 <__ieee754_sqrt+0xe4>
 800c2ce:	d113      	bne.n	800c2f8 <__ieee754_sqrt+0x108>
 800c2d0:	45a4      	cmp	ip, r4
 800c2d2:	d811      	bhi.n	800c2f8 <__ieee754_sqrt+0x108>
 800c2d4:	f1bc 0f00 	cmp.w	ip, #0
 800c2d8:	eb0c 0100 	add.w	r1, ip, r0
 800c2dc:	da42      	bge.n	800c364 <__ieee754_sqrt+0x174>
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	db40      	blt.n	800c364 <__ieee754_sqrt+0x174>
 800c2e2:	f102 0e01 	add.w	lr, r2, #1
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	4672      	mov	r2, lr
 800c2ea:	45a4      	cmp	ip, r4
 800c2ec:	bf88      	it	hi
 800c2ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c2f2:	eba4 040c 	sub.w	r4, r4, ip
 800c2f6:	4405      	add	r5, r0
 800c2f8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c2fc:	f1ba 0a01 	subs.w	sl, sl, #1
 800c300:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c304:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c308:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c30c:	d1db      	bne.n	800c2c6 <__ieee754_sqrt+0xd6>
 800c30e:	431c      	orrs	r4, r3
 800c310:	d01a      	beq.n	800c348 <__ieee754_sqrt+0x158>
 800c312:	4c20      	ldr	r4, [pc, #128]	@ (800c394 <__ieee754_sqrt+0x1a4>)
 800c314:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c398 <__ieee754_sqrt+0x1a8>
 800c318:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c31c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c320:	f7f3 ff56 	bl	80001d0 <__aeabi_dsub>
 800c324:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4640      	mov	r0, r8
 800c32e:	4649      	mov	r1, r9
 800c330:	f7f4 fb82 	bl	8000a38 <__aeabi_dcmple>
 800c334:	b140      	cbz	r0, 800c348 <__ieee754_sqrt+0x158>
 800c336:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c33a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c33e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c342:	d111      	bne.n	800c368 <__ieee754_sqrt+0x178>
 800c344:	4655      	mov	r5, sl
 800c346:	3601      	adds	r6, #1
 800c348:	1072      	asrs	r2, r6, #1
 800c34a:	086b      	lsrs	r3, r5, #1
 800c34c:	07f1      	lsls	r1, r6, #31
 800c34e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c352:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c356:	bf48      	it	mi
 800c358:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c35c:	4618      	mov	r0, r3
 800c35e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c362:	e757      	b.n	800c214 <__ieee754_sqrt+0x24>
 800c364:	4696      	mov	lr, r2
 800c366:	e7be      	b.n	800c2e6 <__ieee754_sqrt+0xf6>
 800c368:	f7f3 ff34 	bl	80001d4 <__adddf3>
 800c36c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4640      	mov	r0, r8
 800c376:	4649      	mov	r1, r9
 800c378:	f7f4 fb54 	bl	8000a24 <__aeabi_dcmplt>
 800c37c:	b120      	cbz	r0, 800c388 <__ieee754_sqrt+0x198>
 800c37e:	1ca8      	adds	r0, r5, #2
 800c380:	bf08      	it	eq
 800c382:	3601      	addeq	r6, #1
 800c384:	3502      	adds	r5, #2
 800c386:	e7df      	b.n	800c348 <__ieee754_sqrt+0x158>
 800c388:	1c6b      	adds	r3, r5, #1
 800c38a:	f023 0501 	bic.w	r5, r3, #1
 800c38e:	e7db      	b.n	800c348 <__ieee754_sqrt+0x158>
 800c390:	7ff00000 	.word	0x7ff00000
 800c394:	200004b8 	.word	0x200004b8
 800c398:	200004b0 	.word	0x200004b0

0800c39c <_init>:
 800c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39e:	bf00      	nop
 800c3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a2:	bc08      	pop	{r3}
 800c3a4:	469e      	mov	lr, r3
 800c3a6:	4770      	bx	lr

0800c3a8 <_fini>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	bf00      	nop
 800c3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ae:	bc08      	pop	{r3}
 800c3b0:	469e      	mov	lr, r3
 800c3b2:	4770      	bx	lr
